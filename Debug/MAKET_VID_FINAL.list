
MAKET_VID_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008880  08008880  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08008880  08008880  00018880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008888  08008888  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008888  08008888  00018888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08008890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          000007dc  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000804  20000804  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .debug_info   000215bd  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003584  00000000  00000000  00041615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00044ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f28  00000000  00000000  00045c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002277e  00000000  00000000  00046b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016485  00000000  00000000  000692a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce68d  00000000  00000000  0007f72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014ddb8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000444c  00000000  00000000  0014de0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008648 	.word	0x08008648

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08008648 	.word	0x08008648

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <Periph_Init>:
uint32_t I_mean_sum;
uint16_t I_mean_buf[MEAN_BUF_SIZE];

HAL_StatusTypeDef Init_Error;

uint8_t Periph_Init() {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

	// Запуск АЦП
	__HAL_ADC_ENABLE(&hadc2);
 8000d00:	4b55      	ldr	r3, [pc, #340]	; (8000e58 <Periph_Init+0x15c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	4b54      	ldr	r3, [pc, #336]	; (8000e58 <Periph_Init+0x15c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f042 0201 	orr.w	r2, r2, #1
 8000d0e:	609a      	str	r2, [r3, #8]
	__HAL_ADC_ENABLE(&hadc3);
 8000d10:	4b52      	ldr	r3, [pc, #328]	; (8000e5c <Periph_Init+0x160>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	4b51      	ldr	r3, [pc, #324]	; (8000e5c <Periph_Init+0x160>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 0201 	orr.w	r2, r2, #1
 8000d1e:	609a      	str	r2, [r3, #8]
	Init_Error = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*) Device_ADC_Buf, ADC_CHANNELS);
 8000d20:	2203      	movs	r2, #3
 8000d22:	494f      	ldr	r1, [pc, #316]	; (8000e60 <Periph_Init+0x164>)
 8000d24:	484f      	ldr	r0, [pc, #316]	; (8000e64 <Periph_Init+0x168>)
 8000d26:	f003 feb3 	bl	8004a90 <HAL_ADCEx_MultiModeStart_DMA>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	; (8000e68 <Periph_Init+0x16c>)
 8000d30:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_TC);
 8000d32:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <Periph_Init+0x170>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b4c      	ldr	r3, [pc, #304]	; (8000e6c <Periph_Init+0x170>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0210 	bic.w	r2, r2, #16
 8000d40:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8000d42:	4b4a      	ldr	r3, [pc, #296]	; (8000e6c <Periph_Init+0x170>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b48      	ldr	r3, [pc, #288]	; (8000e6c <Periph_Init+0x170>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0208 	bic.w	r2, r2, #8
 8000d50:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_TE);
 8000d52:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <Periph_Init+0x170>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <Periph_Init+0x170>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 0204 	bic.w	r2, r2, #4
 8000d60:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_FE);
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <Periph_Init+0x170>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	4b40      	ldr	r3, [pc, #256]	; (8000e6c <Periph_Init+0x170>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d70:	615a      	str	r2, [r3, #20]
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_DME);
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <Periph_Init+0x170>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <Periph_Init+0x170>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 0202 	bic.w	r2, r2, #2
 8000d80:	601a      	str	r2, [r3, #0]
	//HAL_Delay(ADC_DELAY);
	Init_Error = HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 8000d82:	210c      	movs	r1, #12
 8000d84:	483a      	ldr	r0, [pc, #232]	; (8000e70 <Periph_Init+0x174>)
 8000d86:	f005 fb5b 	bl	8006440 <HAL_TIM_OC_Start>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <Periph_Init+0x16c>)
 8000d90:	701a      	strb	r2, [r3, #0]

	//Настройка и запуск основного таймера
	Init_Error = HAL_TIM_Base_Start_IT(&htim1);
 8000d92:	4838      	ldr	r0, [pc, #224]	; (8000e74 <Periph_Init+0x178>)
 8000d94:	f005 fa8a 	bl	80062ac <HAL_TIM_Base_Start_IT>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <Periph_Init+0x16c>)
 8000d9e:	701a      	strb	r2, [r3, #0]

	// ?нициализация сдвинутых таймеров
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 8000da0:	4b34      	ldr	r3, [pc, #208]	; (8000e74 <Periph_Init+0x178>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	68da      	ldr	r2, [r3, #12]
 8000da6:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <Periph_Init+0x178>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0204 	orr.w	r2, r2, #4
 8000dae:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 8000db0:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <Periph_Init+0x178>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <Periph_Init+0x178>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0208 	orr.w	r2, r2, #8
 8000dbe:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <Periph_Init+0x178>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <Periph_Init+0x178>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0210 	orr.w	r2, r2, #16
 8000dce:	60da      	str	r2, [r3, #12]
	TIM1->CCR2 = TIM1->ARR;
 8000dd0:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <Periph_Init+0x17c>)
 8000dd2:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <Periph_Init+0x17c>)
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = TIM1->ARR;
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <Periph_Init+0x17c>)
 8000dda:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <Periph_Init+0x17c>)
 8000ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dde:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4 = TIM1->ARR;
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <Periph_Init+0x17c>)
 8000de2:	4a25      	ldr	r2, [pc, #148]	; (8000e78 <Periph_Init+0x17c>)
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40

	//Запуск вспомогательных таймеров
	Init_Error = HAL_TIM_Base_Start(&htim2);
 8000de8:	4824      	ldr	r0, [pc, #144]	; (8000e7c <Periph_Init+0x180>)
 8000dea:	f005 f9f7 	bl	80061dc <HAL_TIM_Base_Start>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <Periph_Init+0x16c>)
 8000df4:	701a      	strb	r2, [r3, #0]
	Init_Error = HAL_TIM_Base_Start(&htim3);
 8000df6:	4822      	ldr	r0, [pc, #136]	; (8000e80 <Periph_Init+0x184>)
 8000df8:	f005 f9f0 	bl	80061dc <HAL_TIM_Base_Start>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <Periph_Init+0x16c>)
 8000e02:	701a      	strb	r2, [r3, #0]
	Init_Error = HAL_TIM_Base_Start(&htim9);
 8000e04:	481f      	ldr	r0, [pc, #124]	; (8000e84 <Periph_Init+0x188>)
 8000e06:	f005 f9e9 	bl	80061dc <HAL_TIM_Base_Start>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <Periph_Init+0x16c>)
 8000e10:	701a      	strb	r2, [r3, #0]


	//Запуск таймера для жесткой коммутации
	//в нем же работаем с обсчетом регуляторов
	Init_Error = HAL_TIM_Base_Start_IT(&htim8);
 8000e12:	481d      	ldr	r0, [pc, #116]	; (8000e88 <Periph_Init+0x18c>)
 8000e14:	f005 fa4a 	bl	80062ac <HAL_TIM_Base_Start_IT>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <Periph_Init+0x16c>)
 8000e1e:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_CC2);
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <Periph_Init+0x18c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <Periph_Init+0x18c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0204 	orr.w	r2, r2, #4
 8000e2e:	60da      	str	r2, [r3, #12]
	TIM8->CCR2 = TIM8->ARR;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <Periph_Init+0x190>)
 8000e32:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <Periph_Init+0x190>)
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	6393      	str	r3, [r2, #56]	; 0x38

	Init_Error = HAL_TIM_Base_Start(&htim12);
 8000e38:	4815      	ldr	r0, [pc, #84]	; (8000e90 <Periph_Init+0x194>)
 8000e3a:	f005 f9cf 	bl	80061dc <HAL_TIM_Base_Start>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <Periph_Init+0x16c>)
 8000e44:	701a      	strb	r2, [r3, #0]

	if(Init_Error != HAL_OK){
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <Periph_Init+0x16c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <Periph_Init+0x156>
		return -1;
 8000e4e:	23ff      	movs	r3, #255	; 0xff
 8000e50:	e000      	b.n	8000e54 <Periph_Init+0x158>
	} else {
		return 0;
 8000e52:	2300      	movs	r3, #0
	}

}
 8000e54:	4618      	mov	r0, r3
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200002e4 	.word	0x200002e4
 8000e5c:	20000374 	.word	0x20000374
 8000e60:	200000b8 	.word	0x200000b8
 8000e64:	2000032c 	.word	0x2000032c
 8000e68:	200001a2 	.word	0x200001a2
 8000e6c:	200003bc 	.word	0x200003bc
 8000e70:	2000060c 	.word	0x2000060c
 8000e74:	2000069c 	.word	0x2000069c
 8000e78:	40010000 	.word	0x40010000
 8000e7c:	2000072c 	.word	0x2000072c
 8000e80:	20000654 	.word	0x20000654
 8000e84:	200006e4 	.word	0x200006e4
 8000e88:	200005c4 	.word	0x200005c4
 8000e8c:	40010400 	.word	0x40010400
 8000e90:	20000774 	.word	0x20000774

08000e94 <HW_Driver_DI_AI_Read>:
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
	HAL_TIM_OC_Stop(&htim4, TIM_CHANNEL_4);
}

void HW_Driver_DI_AI_Read() {
 8000e94:	b5b0      	push	{r4, r5, r7, lr}
 8000e96:	af00      	add	r7, sp, #0

	// Считывание дискретных сигналов

	Fault_H1_State = !HAL_GPIO_ReadPin(Fault_H1_GPIO_Port, Fault_H1_Pin);
 8000e98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e9c:	48a8      	ldr	r0, [pc, #672]	; (8001140 <HW_Driver_DI_AI_Read+0x2ac>)
 8000e9e:	f004 fca7 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bf0c      	ite	eq
 8000ea8:	2301      	moveq	r3, #1
 8000eaa:	2300      	movne	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4ba4      	ldr	r3, [pc, #656]	; (8001144 <HW_Driver_DI_AI_Read+0x2b0>)
 8000eb2:	701a      	strb	r2, [r3, #0]
	Fault_H2_State = !HAL_GPIO_ReadPin(Fault_L2_GPIO_Port, Fault_L2_Pin);
 8000eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb8:	48a3      	ldr	r0, [pc, #652]	; (8001148 <HW_Driver_DI_AI_Read+0x2b4>)
 8000eba:	f004 fc99 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bf0c      	ite	eq
 8000ec4:	2301      	moveq	r3, #1
 8000ec6:	2300      	movne	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b9f      	ldr	r3, [pc, #636]	; (800114c <HW_Driver_DI_AI_Read+0x2b8>)
 8000ece:	701a      	strb	r2, [r3, #0]
	Fault_H3_State = !HAL_GPIO_ReadPin(Fault_H3_GPIO_Port, Fault_H3_Pin);
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	489d      	ldr	r0, [pc, #628]	; (8001148 <HW_Driver_DI_AI_Read+0x2b4>)
 8000ed4:	f004 fc8c 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bf0c      	ite	eq
 8000ede:	2301      	moveq	r3, #1
 8000ee0:	2300      	movne	r3, #0
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b9a      	ldr	r3, [pc, #616]	; (8001150 <HW_Driver_DI_AI_Read+0x2bc>)
 8000ee8:	701a      	strb	r2, [r3, #0]
	Fault_H4_State = !HAL_GPIO_ReadPin(Fault_H4_GPIO_Port, Fault_H4_Pin);
 8000eea:	2104      	movs	r1, #4
 8000eec:	4899      	ldr	r0, [pc, #612]	; (8001154 <HW_Driver_DI_AI_Read+0x2c0>)
 8000eee:	f004 fc7f 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf0c      	ite	eq
 8000ef8:	2301      	moveq	r3, #1
 8000efa:	2300      	movne	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b95      	ldr	r3, [pc, #596]	; (8001158 <HW_Driver_DI_AI_Read+0x2c4>)
 8000f02:	701a      	strb	r2, [r3, #0]
	Fault_H4_1_State = !HAL_GPIO_ReadPin(Fault_H4_1_GPIO_Port, Fault_H4_1_Pin);
 8000f04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f08:	488f      	ldr	r0, [pc, #572]	; (8001148 <HW_Driver_DI_AI_Read+0x2b4>)
 8000f0a:	f004 fc71 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf0c      	ite	eq
 8000f14:	2301      	moveq	r3, #1
 8000f16:	2300      	movne	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b8f      	ldr	r3, [pc, #572]	; (800115c <HW_Driver_DI_AI_Read+0x2c8>)
 8000f1e:	701a      	strb	r2, [r3, #0]
	Fault_H5_State = !HAL_GPIO_ReadPin(Fault_H5_GPIO_Port, Fault_H5_Pin);
 8000f20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f24:	488b      	ldr	r0, [pc, #556]	; (8001154 <HW_Driver_DI_AI_Read+0x2c0>)
 8000f26:	f004 fc63 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bf0c      	ite	eq
 8000f30:	2301      	moveq	r3, #1
 8000f32:	2300      	movne	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b89      	ldr	r3, [pc, #548]	; (8001160 <HW_Driver_DI_AI_Read+0x2cc>)
 8000f3a:	701a      	strb	r2, [r3, #0]

	Fault_L1_State = !HAL_GPIO_ReadPin(Fault_L1_GPIO_Port, Fault_L1_Pin);
 8000f3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f40:	487f      	ldr	r0, [pc, #508]	; (8001140 <HW_Driver_DI_AI_Read+0x2ac>)
 8000f42:	f004 fc55 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	bf0c      	ite	eq
 8000f4c:	2301      	moveq	r3, #1
 8000f4e:	2300      	movne	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b83      	ldr	r3, [pc, #524]	; (8001164 <HW_Driver_DI_AI_Read+0x2d0>)
 8000f56:	701a      	strb	r2, [r3, #0]
	Fault_L2_State = !HAL_GPIO_ReadPin(Fault_L2_GPIO_Port, Fault_L2_Pin);
 8000f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f5c:	487a      	ldr	r0, [pc, #488]	; (8001148 <HW_Driver_DI_AI_Read+0x2b4>)
 8000f5e:	f004 fc47 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bf0c      	ite	eq
 8000f68:	2301      	moveq	r3, #1
 8000f6a:	2300      	movne	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b7d      	ldr	r3, [pc, #500]	; (8001168 <HW_Driver_DI_AI_Read+0x2d4>)
 8000f72:	701a      	strb	r2, [r3, #0]
	Fault_L3_State = !HAL_GPIO_ReadPin(Fault_L3_GPIO_Port, Fault_L3_Pin);
 8000f74:	2110      	movs	r1, #16
 8000f76:	4874      	ldr	r0, [pc, #464]	; (8001148 <HW_Driver_DI_AI_Read+0x2b4>)
 8000f78:	f004 fc3a 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf0c      	ite	eq
 8000f82:	2301      	moveq	r3, #1
 8000f84:	2300      	movne	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b78      	ldr	r3, [pc, #480]	; (800116c <HW_Driver_DI_AI_Read+0x2d8>)
 8000f8c:	701a      	strb	r2, [r3, #0]
	Fault_L4_State = !HAL_GPIO_ReadPin(Fault_L4_GPIO_Port, Fault_L4_Pin);
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4870      	ldr	r0, [pc, #448]	; (8001154 <HW_Driver_DI_AI_Read+0x2c0>)
 8000f92:	f004 fc2d 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	bf0c      	ite	eq
 8000f9c:	2301      	moveq	r3, #1
 8000f9e:	2300      	movne	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b72      	ldr	r3, [pc, #456]	; (8001170 <HW_Driver_DI_AI_Read+0x2dc>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	Fault_L4_2_State = !HAL_GPIO_ReadPin(Fault_L4_2_GPIO_Port, Fault_L4_2_Pin);
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	4867      	ldr	r0, [pc, #412]	; (8001148 <HW_Driver_DI_AI_Read+0x2b4>)
 8000fac:	f004 fc20 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2301      	moveq	r3, #1
 8000fb8:	2300      	movne	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b6d      	ldr	r3, [pc, #436]	; (8001174 <HW_Driver_DI_AI_Read+0x2e0>)
 8000fc0:	701a      	strb	r2, [r3, #0]
	Fault_L5_State = !HAL_GPIO_ReadPin(Fault_L5_GPIO_Port, Fault_L5_Pin);
 8000fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc6:	4863      	ldr	r0, [pc, #396]	; (8001154 <HW_Driver_DI_AI_Read+0x2c0>)
 8000fc8:	f004 fc12 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	bf0c      	ite	eq
 8000fd2:	2301      	moveq	r3, #1
 8000fd4:	2300      	movne	r3, #0
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b67      	ldr	r3, [pc, #412]	; (8001178 <HW_Driver_DI_AI_Read+0x2e4>)
 8000fdc:	701a      	strb	r2, [r3, #0]

	PWR_Fault1_State = HAL_GPIO_ReadPin(PWR_Fault1_GPIO_Port, PWR_Fault1_Pin);
 8000fde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe2:	4857      	ldr	r0, [pc, #348]	; (8001140 <HW_Driver_DI_AI_Read+0x2ac>)
 8000fe4:	f004 fc04 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b63      	ldr	r3, [pc, #396]	; (800117c <HW_Driver_DI_AI_Read+0x2e8>)
 8000fee:	701a      	strb	r2, [r3, #0]
	PWR_Fault2_State = HAL_GPIO_ReadPin(PWR_Fault2_GPIO_Port, PWR_Fault2_Pin);
 8000ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff4:	4854      	ldr	r0, [pc, #336]	; (8001148 <HW_Driver_DI_AI_Read+0x2b4>)
 8000ff6:	f004 fbfb 	bl	80057f0 <HAL_GPIO_ReadPin>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b60      	ldr	r3, [pc, #384]	; (8001180 <HW_Driver_DI_AI_Read+0x2ec>)
 8001000:	701a      	strb	r2, [r3, #0]
	PWR_Fault3_State = HAL_GPIO_ReadPin(PWR_Fault3_GPIO_Port, PWR_Fault3_Pin);
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	484e      	ldr	r0, [pc, #312]	; (8001140 <HW_Driver_DI_AI_Read+0x2ac>)
 8001006:	f004 fbf3 	bl	80057f0 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b5d      	ldr	r3, [pc, #372]	; (8001184 <HW_Driver_DI_AI_Read+0x2f0>)
 8001010:	701a      	strb	r2, [r3, #0]
	PWR_Fault4_State = HAL_GPIO_ReadPin(PWR_Fault4_GPIO_Port, PWR_Fault4_Pin);
 8001012:	2101      	movs	r1, #1
 8001014:	484f      	ldr	r0, [pc, #316]	; (8001154 <HW_Driver_DI_AI_Read+0x2c0>)
 8001016:	f004 fbeb 	bl	80057f0 <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b5a      	ldr	r3, [pc, #360]	; (8001188 <HW_Driver_DI_AI_Read+0x2f4>)
 8001020:	701a      	strb	r2, [r3, #0]
	//PWR_Fault5_State = HAL_GPIO_ReadPin(PWR_Fault5_GPIO_Port, PWR_Fault5_Pin);

	// Функц кнопки
	But_1_State = !HAL_GPIO_ReadPin(GLOBAL_SB_GPIO_Port, GLOBAL_SB_Pin);
 8001022:	2110      	movs	r1, #16
 8001024:	484b      	ldr	r0, [pc, #300]	; (8001154 <HW_Driver_DI_AI_Read+0x2c0>)
 8001026:	f004 fbe3 	bl	80057f0 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	bf0c      	ite	eq
 8001030:	2301      	moveq	r3, #1
 8001032:	2300      	movne	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	461a      	mov	r2, r3
 8001038:	4b54      	ldr	r3, [pc, #336]	; (800118c <HW_Driver_DI_AI_Read+0x2f8>)
 800103a:	701a      	strb	r2, [r3, #0]
	//But_2_State = !HAL_GPIO_ReadPin(But_2_GPIO_Port, But_2_Pin);
	//EN_OS_State = HAL_GPIO_ReadPin(EN_OS_GPIO_Port, EN_OS_Pin);


	// Считывание аналоговых сигналов
	T_RT4_Value = Device_ADC_Buf[0];
 800103c:	4b54      	ldr	r3, [pc, #336]	; (8001190 <HW_Driver_DI_AI_Read+0x2fc>)
 800103e:	881a      	ldrh	r2, [r3, #0]
 8001040:	4b54      	ldr	r3, [pc, #336]	; (8001194 <HW_Driver_DI_AI_Read+0x300>)
 8001042:	801a      	strh	r2, [r3, #0]
	T_RT1_Value = Device_ADC_Buf[1];
 8001044:	4b52      	ldr	r3, [pc, #328]	; (8001190 <HW_Driver_DI_AI_Read+0x2fc>)
 8001046:	885a      	ldrh	r2, [r3, #2]
 8001048:	4b53      	ldr	r3, [pc, #332]	; (8001198 <HW_Driver_DI_AI_Read+0x304>)
 800104a:	801a      	strh	r2, [r3, #0]
	T_RT2_Value = Device_ADC_Buf[2];
 800104c:	4b50      	ldr	r3, [pc, #320]	; (8001190 <HW_Driver_DI_AI_Read+0x2fc>)
 800104e:	889a      	ldrh	r2, [r3, #4]
 8001050:	4b52      	ldr	r3, [pc, #328]	; (800119c <HW_Driver_DI_AI_Read+0x308>)
 8001052:	801a      	strh	r2, [r3, #0]
	T_RT3_Value = Device_ADC_Buf[3];
 8001054:	4b4e      	ldr	r3, [pc, #312]	; (8001190 <HW_Driver_DI_AI_Read+0x2fc>)
 8001056:	88da      	ldrh	r2, [r3, #6]
 8001058:	4b51      	ldr	r3, [pc, #324]	; (80011a0 <HW_Driver_DI_AI_Read+0x30c>)
 800105a:	801a      	strh	r2, [r3, #0]
	AI_8_Value = Device_ADC_Buf[4];
 800105c:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <HW_Driver_DI_AI_Read+0x2fc>)
 800105e:	891a      	ldrh	r2, [r3, #8]
 8001060:	4b50      	ldr	r3, [pc, #320]	; (80011a4 <HW_Driver_DI_AI_Read+0x310>)
 8001062:	801a      	strh	r2, [r3, #0]
	U_Value = Device_ADC_Buf[5];
 8001064:	4b4a      	ldr	r3, [pc, #296]	; (8001190 <HW_Driver_DI_AI_Read+0x2fc>)
 8001066:	895a      	ldrh	r2, [r3, #10]
 8001068:	4b4f      	ldr	r3, [pc, #316]	; (80011a8 <HW_Driver_DI_AI_Read+0x314>)
 800106a:	801a      	strh	r2, [r3, #0]
	I_Value = Device_ADC_Buf[6];
 800106c:	4b48      	ldr	r3, [pc, #288]	; (8001190 <HW_Driver_DI_AI_Read+0x2fc>)
 800106e:	899a      	ldrh	r2, [r3, #12]
 8001070:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <HW_Driver_DI_AI_Read+0x318>)
 8001072:	801a      	strh	r2, [r3, #0]
	Trt_Value = Device_ADC_Buf[7];
 8001074:	4b46      	ldr	r3, [pc, #280]	; (8001190 <HW_Driver_DI_AI_Read+0x2fc>)
 8001076:	89da      	ldrh	r2, [r3, #14]
 8001078:	4b4d      	ldr	r3, [pc, #308]	; (80011b0 <HW_Driver_DI_AI_Read+0x31c>)
 800107a:	801a      	strh	r2, [r3, #0]
	T_RT5_Value = Device_ADC_Buf[8];
 800107c:	4b44      	ldr	r3, [pc, #272]	; (8001190 <HW_Driver_DI_AI_Read+0x2fc>)
 800107e:	8a1a      	ldrh	r2, [r3, #16]
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <HW_Driver_DI_AI_Read+0x320>)
 8001082:	801a      	strh	r2, [r3, #0]
	I_Instant = ((float)I_mean - I_ADC_ref) * I_ADC_koef;
 8001084:	4b4c      	ldr	r3, [pc, #304]	; (80011b8 <HW_Driver_DI_AI_Read+0x324>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001090:	4b4a      	ldr	r3, [pc, #296]	; (80011bc <HW_Driver_DI_AI_Read+0x328>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	ee37 7a67 	vsub.f32	s14, s14, s15
 800109a:	4b49      	ldr	r3, [pc, #292]	; (80011c0 <HW_Driver_DI_AI_Read+0x32c>)
 800109c:	edd3 7a00 	vldr	s15, [r3]
 80010a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HW_Driver_DI_AI_Read+0x330>)
 80010a6:	edc3 7a00 	vstr	s15, [r3]

	if(I_Instant < 0){
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HW_Driver_DI_AI_Read+0x330>)
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	d508      	bpl.n	80010cc <HW_Driver_DI_AI_Read+0x238>
		I_abs = -1*I_Instant;
 80010ba:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <HW_Driver_DI_AI_Read+0x330>)
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	eef1 7a67 	vneg.f32	s15, s15
 80010c4:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <HW_Driver_DI_AI_Read+0x334>)
 80010c6:	edc3 7a00 	vstr	s15, [r3]
 80010ca:	e003      	b.n	80010d4 <HW_Driver_DI_AI_Read+0x240>
	} else {
		I_abs = I_Instant;
 80010cc:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <HW_Driver_DI_AI_Read+0x330>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a3d      	ldr	r2, [pc, #244]	; (80011c8 <HW_Driver_DI_AI_Read+0x334>)
 80010d2:	6013      	str	r3, [r2, #0]
	}

	U_Instant = ((float)U_mean - U_ADC_ref) * U_ADC_koef;
 80010d4:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <HW_Driver_DI_AI_Read+0x338>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e0:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <HW_Driver_DI_AI_Read+0x33c>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010ea:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <HW_Driver_DI_AI_Read+0x340>)
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f4:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <HW_Driver_DI_AI_Read+0x344>)
 80010f6:	edc3 7a00 	vstr	s15, [r3]
	calc_os_u = U_Instant - R_KABEL*I_abs;
 80010fa:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <HW_Driver_DI_AI_Read+0x344>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f9c6 	bl	8000490 <__aeabi_f2d>
 8001104:	4604      	mov	r4, r0
 8001106:	460d      	mov	r5, r1
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <HW_Driver_DI_AI_Read+0x334>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f9bf 	bl	8000490 <__aeabi_f2d>
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <HW_Driver_DI_AI_Read+0x348>)
 8001118:	f7ff fa12 	bl	8000540 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	f7ff f854 	bl	80001d0 <__aeabi_dsub>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fc18 	bl	8000964 <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	4a2a      	ldr	r2, [pc, #168]	; (80011e0 <HW_Driver_DI_AI_Read+0x34c>)
 8001138:	6013      	str	r3, [r2, #0]

}
 800113a:	bf00      	nop
 800113c:	bdb0      	pop	{r4, r5, r7, pc}
 800113e:	bf00      	nop
 8001140:	40020000 	.word	0x40020000
 8001144:	200000ab 	.word	0x200000ab
 8001148:	40020800 	.word	0x40020800
 800114c:	200000a2 	.word	0x200000a2
 8001150:	2000009d 	.word	0x2000009d
 8001154:	40020400 	.word	0x40020400
 8001158:	200000a4 	.word	0x200000a4
 800115c:	20000084 	.word	0x20000084
 8001160:	2000012c 	.word	0x2000012c
 8001164:	200001ac 	.word	0x200001ac
 8001168:	20000094 	.word	0x20000094
 800116c:	200000b6 	.word	0x200000b6
 8001170:	200001a8 	.word	0x200001a8
 8001174:	200000ad 	.word	0x200000ad
 8001178:	200000a3 	.word	0x200000a3
 800117c:	200000bf 	.word	0x200000bf
 8001180:	200001ad 	.word	0x200001ad
 8001184:	200000ac 	.word	0x200000ac
 8001188:	200000a1 	.word	0x200000a1
 800118c:	200000a0 	.word	0x200000a0
 8001190:	200000b8 	.word	0x200000b8
 8001194:	200000b4 	.word	0x200000b4
 8001198:	2000009e 	.word	0x2000009e
 800119c:	200001aa 	.word	0x200001aa
 80011a0:	200000a6 	.word	0x200000a6
 80011a4:	200001a6 	.word	0x200001a6
 80011a8:	200001a4 	.word	0x200001a4
 80011ac:	20000082 	.word	0x20000082
 80011b0:	20000080 	.word	0x20000080
 80011b4:	200000a8 	.word	0x200000a8
 80011b8:	20000194 	.word	0x20000194
 80011bc:	20000004 	.word	0x20000004
 80011c0:	20000008 	.word	0x20000008
 80011c4:	200000b0 	.word	0x200000b0
 80011c8:	2000019c 	.word	0x2000019c
 80011cc:	20000098 	.word	0x20000098
 80011d0:	20000044 	.word	0x20000044
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000088 	.word	0x20000088
 80011dc:	401e0000 	.word	0x401e0000
 80011e0:	2000053c 	.word	0x2000053c

080011e4 <HW_Driver_DO_PWM_Out>:

void HW_Driver_DO_PWM_Out() {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(DO_1_GPIO_Port, DO_1_Pin, DO_1_State);
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HW_Driver_DO_PWM_Out+0x44>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	480e      	ldr	r0, [pc, #56]	; (800122c <HW_Driver_DO_PWM_Out+0x48>)
 80011f2:	f004 fb15 	bl	8005820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO_2_GPIO_Port, DO_2_Pin, DO_2_State);
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HW_Driver_DO_PWM_Out+0x4c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <HW_Driver_DO_PWM_Out+0x48>)
 8001200:	f004 fb0e 	bl	8005820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_PWM_GPIO_Port, EN_PWM_Pin, EN_PWM_State);
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HW_Driver_DO_PWM_Out+0x50>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <HW_Driver_DO_PWM_Out+0x48>)
 8001210:	f004 fb06 	bl	8005820 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, LED_1_State);
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HW_Driver_DO_PWM_Out+0x54>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <HW_Driver_DO_PWM_Out+0x48>)
 8001220:	f004 fafe 	bl	8005820 <HAL_GPIO_WritePin>


}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200001a0 	.word	0x200001a0
 800122c:	40020400 	.word	0x40020400
 8001230:	2000008c 	.word	0x2000008c
 8001234:	2000009c 	.word	0x2000009c
 8001238:	200000aa 	.word	0x200000aa

0800123c <MEAN_Signal>:
// Out - среднее знанчение
// S - входное число
// Ss - вся сумма
// S_buf - буффер
// N -  размер буффера
void MEAN_Signal(uint32_t *Out, uint16_t *S, uint32_t *Ss, uint16_t *S_buf, uint16_t N) {
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	603b      	str	r3, [r7, #0]

	*Ss -= S_buf[0];
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	8812      	ldrh	r2, [r2, #0]
 8001252:	1a9a      	subs	r2, r3, r2
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < N - 1; i++) {
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	e00d      	b.n	800127a <MEAN_Signal+0x3e>
		S_buf[i] = S_buf[i + 1];
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	441a      	add	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	440b      	add	r3, r1
 8001270:	8812      	ldrh	r2, [r2, #0]
 8001272:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < N - 1; i++) {
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	8c3b      	ldrh	r3, [r7, #32]
 800127c:	3b01      	subs	r3, #1
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbec      	blt.n	800125e <MEAN_Signal+0x22>
	}
	S_buf[N - 1] = *S;
 8001284:	8c3b      	ldrh	r3, [r7, #32]
 8001286:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800128a:	3b01      	subs	r3, #1
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	4413      	add	r3, r2
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	8812      	ldrh	r2, [r2, #0]
 8001296:	801a      	strh	r2, [r3, #0]

	*Ss += S_buf[N - 1];
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	8c3b      	ldrh	r3, [r7, #32]
 800129e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80012a2:	3b01      	subs	r3, #1
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	6839      	ldr	r1, [r7, #0]
 80012a8:	440b      	add	r3, r1
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	441a      	add	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	601a      	str	r2, [r3, #0]
	*Out = *Ss / N;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	8c3b      	ldrh	r3, [r7, #32]
 80012b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	601a      	str	r2, [r3, #0]
}
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <ModbusRTU_UART_Init>:
unsigned char END_FRAME;
unsigned short CRC_modbus;

const unsigned short Crc16Table[256];

void ModbusRTU_UART_Init() {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	MX_UART5_Init(); // поставить нужный
 80012d0:	f003 f804 	bl	80042dc <MX_UART5_Init>
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <ModbusRTU_Init>:

void ModbusRTU_Init() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	ModbusRTU_Init_AO();
 80012dc:	f001 fe64 	bl	8002fa8 <ModbusRTU_Init_AO>
	ModbusRTU_Init_AI();
 80012e0:	f001 fe82 	bl	8002fe8 <ModbusRTU_Init_AI>
	ModbusRTU_UART_Init();
 80012e4:	f7ff fff2 	bl	80012cc <ModbusRTU_UART_Init>
	MODBUS_FAULT = 0;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <ModbusRTU_Init+0x44>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	801a      	strh	r2, [r3, #0]
	UART_ERR = 0;
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <ModbusRTU_Init+0x48>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(UART_DIR_PORT, UART_DIR_PIN, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2108      	movs	r1, #8
 80012f8:	480a      	ldr	r0, [pc, #40]	; (8001324 <ModbusRTU_Init+0x4c>)
 80012fa:	f004 fa91 	bl	8005820 <HAL_GPIO_WritePin>
	__HAL_UART_ENABLE_IT(&UART_MODBUS, UART_IT_IDLE);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <ModbusRTU_Init+0x50>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <ModbusRTU_Init+0x50>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0210 	orr.w	r2, r2, #16
 800130c:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&UART_MODBUS, (uint8_t*) buff_rx, Num_Data_buf);
 800130e:	2264      	movs	r2, #100	; 0x64
 8001310:	4906      	ldr	r1, [pc, #24]	; (800132c <ModbusRTU_Init+0x54>)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <ModbusRTU_Init+0x50>)
 8001314:	f006 fa22 	bl	800775c <HAL_UART_Receive_IT>
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200002e2 	.word	0x200002e2
 8001320:	200002e0 	.word	0x200002e0
 8001324:	40020400 	.word	0x40020400
 8001328:	200007bc 	.word	0x200007bc
 800132c:	200001b4 	.word	0x200001b4

08001330 <ModbusRTU_Handler>:
	__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_IDLE);
	HAL_UART_AbortReceive_IT(&UART_MODBUS);

}

void ModbusRTU_Handler() {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	if (RESET != __HAL_UART_GET_FLAG(&UART_MODBUS, UART_FLAG_IDLE)) {
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <ModbusRTU_Handler+0x5c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b10      	cmp	r3, #16
 8001342:	d11e      	bne.n	8001382 <ModbusRTU_Handler+0x52>
		__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_IDLE);
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <ModbusRTU_Handler+0x5c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <ModbusRTU_Handler+0x5c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0210 	bic.w	r2, r2, #16
 8001352:	60da      	str	r2, [r3, #12]
		__HAL_UART_CLEAR_IDLEFLAG(&UART_MODBUS); //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <ModbusRTU_Handler+0x5c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <ModbusRTU_Handler+0x5c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
		ModbusRTU_Receive();
 800136a:	f000 f811 	bl	8001390 <ModbusRTU_Receive>
		ModbusRTU_Transmit();
 800136e:	f000 fba7 	bl	8001ac0 <ModbusRTU_Transmit>
		__HAL_UART_ENABLE_IT(&UART_MODBUS, UART_IT_IDLE);
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <ModbusRTU_Handler+0x5c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <ModbusRTU_Handler+0x5c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0210 	orr.w	r2, r2, #16
 8001380:	60da      	str	r2, [r3, #12]

	}
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200007bc 	.word	0x200007bc

08001390 <ModbusRTU_Receive>:

void ModbusRTU_Receive(){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

	Num_Data_RX = Num_Data_buf - UART_MODBUS.RxXferCount;
 8001396:	4b9e      	ldr	r3, [pc, #632]	; (8001610 <ModbusRTU_Receive+0x280>)
 8001398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800139a:	b29b      	uxth	r3, r3
 800139c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b9c      	ldr	r3, [pc, #624]	; (8001614 <ModbusRTU_Receive+0x284>)
 80013a4:	801a      	strh	r2, [r3, #0]
	CRC_modbus = CRC16(buff_rx, Num_Data_RX);
 80013a6:	4b9b      	ldr	r3, [pc, #620]	; (8001614 <ModbusRTU_Receive+0x284>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	489a      	ldr	r0, [pc, #616]	; (8001618 <ModbusRTU_Receive+0x288>)
 80013ae:	f000 fbf7 	bl	8001ba0 <CRC16>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b99      	ldr	r3, [pc, #612]	; (800161c <ModbusRTU_Receive+0x28c>)
 80013b8:	801a      	strh	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(&UART_MODBUS);
 80013ba:	4895      	ldr	r0, [pc, #596]	; (8001610 <ModbusRTU_Receive+0x280>)
 80013bc:	f006 f9fe 	bl	80077bc <HAL_UART_AbortReceive_IT>

	if (CRC_modbus == 0) {
 80013c0:	4b96      	ldr	r3, [pc, #600]	; (800161c <ModbusRTU_Receive+0x28c>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f040 835c 	bne.w	8001a82 <ModbusRTU_Receive+0x6f2>

		// Считываем ИД и функциональную команду
		ID = buff_rx[0];
 80013ca:	4b93      	ldr	r3, [pc, #588]	; (8001618 <ModbusRTU_Receive+0x288>)
 80013cc:	781a      	ldrb	r2, [r3, #0]
 80013ce:	4b94      	ldr	r3, [pc, #592]	; (8001620 <ModbusRTU_Receive+0x290>)
 80013d0:	701a      	strb	r2, [r3, #0]
		FK = buff_rx[1];
 80013d2:	4b91      	ldr	r3, [pc, #580]	; (8001618 <ModbusRTU_Receive+0x288>)
 80013d4:	785a      	ldrb	r2, [r3, #1]
 80013d6:	4b93      	ldr	r3, [pc, #588]	; (8001624 <ModbusRTU_Receive+0x294>)
 80013d8:	701a      	strb	r2, [r3, #0]

		if (ID == ID_Device) // Проверяем ИД, если не совпал чистим буфер
 80013da:	4b91      	ldr	r3, [pc, #580]	; (8001620 <ModbusRTU_Receive+0x290>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b91      	ldr	r3, [pc, #580]	; (8001628 <ModbusRTU_Receive+0x298>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	f040 8346 	bne.w	8001a76 <ModbusRTU_Receive+0x6e6>
		{

			ADR = buff_rx[2]; // Выделяем адрес первой переменной
 80013ea:	4b8b      	ldr	r3, [pc, #556]	; (8001618 <ModbusRTU_Receive+0x288>)
 80013ec:	789b      	ldrb	r3, [r3, #2]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b8e      	ldr	r3, [pc, #568]	; (800162c <ModbusRTU_Receive+0x29c>)
 80013f2:	801a      	strh	r2, [r3, #0]
			ADR = ADR << 8;
 80013f4:	4b8d      	ldr	r3, [pc, #564]	; (800162c <ModbusRTU_Receive+0x29c>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4b8b      	ldr	r3, [pc, #556]	; (800162c <ModbusRTU_Receive+0x29c>)
 80013fe:	801a      	strh	r2, [r3, #0]
			ADR = ADR | buff_rx[3];
 8001400:	4b85      	ldr	r3, [pc, #532]	; (8001618 <ModbusRTU_Receive+0x288>)
 8001402:	78db      	ldrb	r3, [r3, #3]
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b89      	ldr	r3, [pc, #548]	; (800162c <ModbusRTU_Receive+0x29c>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	4313      	orrs	r3, r2
 800140c:	b29a      	uxth	r2, r3
 800140e:	4b87      	ldr	r3, [pc, #540]	; (800162c <ModbusRTU_Receive+0x29c>)
 8001410:	801a      	strh	r2, [r3, #0]

			NUM_REG = buff_rx[4]; // Выделяем количество адресов, так же данные для ФК 5 и 6
 8001412:	4b81      	ldr	r3, [pc, #516]	; (8001618 <ModbusRTU_Receive+0x288>)
 8001414:	791b      	ldrb	r3, [r3, #4]
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b85      	ldr	r3, [pc, #532]	; (8001630 <ModbusRTU_Receive+0x2a0>)
 800141a:	801a      	strh	r2, [r3, #0]
			NUM_REG = NUM_REG << 8;
 800141c:	4b84      	ldr	r3, [pc, #528]	; (8001630 <ModbusRTU_Receive+0x2a0>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b29a      	uxth	r2, r3
 8001424:	4b82      	ldr	r3, [pc, #520]	; (8001630 <ModbusRTU_Receive+0x2a0>)
 8001426:	801a      	strh	r2, [r3, #0]
			NUM_REG = NUM_REG | buff_rx[5];
 8001428:	4b7b      	ldr	r3, [pc, #492]	; (8001618 <ModbusRTU_Receive+0x288>)
 800142a:	795b      	ldrb	r3, [r3, #5]
 800142c:	b29a      	uxth	r2, r3
 800142e:	4b80      	ldr	r3, [pc, #512]	; (8001630 <ModbusRTU_Receive+0x2a0>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	4313      	orrs	r3, r2
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b7e      	ldr	r3, [pc, #504]	; (8001630 <ModbusRTU_Receive+0x2a0>)
 8001438:	801a      	strh	r2, [r3, #0]

			switch (FK) {
 800143a:	4b7a      	ldr	r3, [pc, #488]	; (8001624 <ModbusRTU_Receive+0x294>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	3b01      	subs	r3, #1
 8001440:	2b0f      	cmp	r3, #15
 8001442:	f200 8324 	bhi.w	8001a8e <ModbusRTU_Receive+0x6fe>
 8001446:	a201      	add	r2, pc, #4	; (adr r2, 800144c <ModbusRTU_Receive+0xbc>)
 8001448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144c:	0800148d 	.word	0x0800148d
 8001450:	080014db 	.word	0x080014db
 8001454:	08001529 	.word	0x08001529
 8001458:	0800168f 	.word	0x0800168f
 800145c:	080017c3 	.word	0x080017c3
 8001460:	08001811 	.word	0x08001811
 8001464:	08001a8f 	.word	0x08001a8f
 8001468:	08001a8f 	.word	0x08001a8f
 800146c:	08001a8f 	.word	0x08001a8f
 8001470:	08001a8f 	.word	0x08001a8f
 8001474:	08001a8f 	.word	0x08001a8f
 8001478:	08001a8f 	.word	0x08001a8f
 800147c:	08001a8f 	.word	0x08001a8f
 8001480:	08001a8f 	.word	0x08001a8f
 8001484:	080018eb 	.word	0x080018eb
 8001488:	08001939 	.word	0x08001939
			case 1:
				buff_tx[0] = ID_Device;
 800148c:	4b66      	ldr	r3, [pc, #408]	; (8001628 <ModbusRTU_Receive+0x298>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b68      	ldr	r3, [pc, #416]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 8001494:	701a      	strb	r2, [r3, #0]
				buff_tx[1] = FK | 0x80;
 8001496:	4b63      	ldr	r3, [pc, #396]	; (8001624 <ModbusRTU_Receive+0x294>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b64      	ldr	r3, [pc, #400]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80014a2:	705a      	strb	r2, [r3, #1]
				buff_tx[2] = 2;
 80014a4:	4b63      	ldr	r3, [pc, #396]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80014a6:	2202      	movs	r2, #2
 80014a8:	709a      	strb	r2, [r3, #2]
				CRC_modbus = CRC16(buff_tx, 3);
 80014aa:	2103      	movs	r1, #3
 80014ac:	4861      	ldr	r0, [pc, #388]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80014ae:	f000 fb77 	bl	8001ba0 <CRC16>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b59      	ldr	r3, [pc, #356]	; (800161c <ModbusRTU_Receive+0x28c>)
 80014b8:	801a      	strh	r2, [r3, #0]
				buff_tx[3] = CRC_modbus & 0x00ff;
 80014ba:	4b58      	ldr	r3, [pc, #352]	; (800161c <ModbusRTU_Receive+0x28c>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b5c      	ldr	r3, [pc, #368]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80014c2:	70da      	strb	r2, [r3, #3]
				buff_tx[4] = CRC_modbus >> 8;
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <ModbusRTU_Receive+0x28c>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b59      	ldr	r3, [pc, #356]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80014d0:	711a      	strb	r2, [r3, #4]
				Num_Data_TX = 5;
 80014d2:	4b59      	ldr	r3, [pc, #356]	; (8001638 <ModbusRTU_Receive+0x2a8>)
 80014d4:	2205      	movs	r2, #5
 80014d6:	801a      	strh	r2, [r3, #0]
				break;
 80014d8:	e2da      	b.n	8001a90 <ModbusRTU_Receive+0x700>
			case 2:
				buff_tx[0] = ID_Device;
 80014da:	4b53      	ldr	r3, [pc, #332]	; (8001628 <ModbusRTU_Receive+0x298>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b54      	ldr	r3, [pc, #336]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80014e2:	701a      	strb	r2, [r3, #0]
				buff_tx[1] = FK | 0x80;
 80014e4:	4b4f      	ldr	r3, [pc, #316]	; (8001624 <ModbusRTU_Receive+0x294>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b51      	ldr	r3, [pc, #324]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80014f0:	705a      	strb	r2, [r3, #1]
				buff_tx[2] = 2;
 80014f2:	4b50      	ldr	r3, [pc, #320]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80014f4:	2202      	movs	r2, #2
 80014f6:	709a      	strb	r2, [r3, #2]
				CRC_modbus = CRC16(buff_tx, 3);
 80014f8:	2103      	movs	r1, #3
 80014fa:	484e      	ldr	r0, [pc, #312]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80014fc:	f000 fb50 	bl	8001ba0 <CRC16>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	4b45      	ldr	r3, [pc, #276]	; (800161c <ModbusRTU_Receive+0x28c>)
 8001506:	801a      	strh	r2, [r3, #0]
				buff_tx[3] = CRC_modbus & 0x00ff;
 8001508:	4b44      	ldr	r3, [pc, #272]	; (800161c <ModbusRTU_Receive+0x28c>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b49      	ldr	r3, [pc, #292]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 8001510:	70da      	strb	r2, [r3, #3]
				buff_tx[4] = CRC_modbus >> 8;
 8001512:	4b42      	ldr	r3, [pc, #264]	; (800161c <ModbusRTU_Receive+0x28c>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	b29b      	uxth	r3, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b45      	ldr	r3, [pc, #276]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 800151e:	711a      	strb	r2, [r3, #4]
				Num_Data_TX = 5;
 8001520:	4b45      	ldr	r3, [pc, #276]	; (8001638 <ModbusRTU_Receive+0x2a8>)
 8001522:	2205      	movs	r2, #5
 8001524:	801a      	strh	r2, [r3, #0]
				break;
 8001526:	e2b3      	b.n	8001a90 <ModbusRTU_Receive+0x700>
			case 3:
				if ((ADR <= ADR_MAX_AO) && (ADR + NUM_REG <= ADR_MAX_AO)
 8001528:	4b40      	ldr	r3, [pc, #256]	; (800162c <ModbusRTU_Receive+0x29c>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	2b0a      	cmp	r3, #10
 800152e:	f200 8087 	bhi.w	8001640 <ModbusRTU_Receive+0x2b0>
 8001532:	4b3e      	ldr	r3, [pc, #248]	; (800162c <ModbusRTU_Receive+0x29c>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <ModbusRTU_Receive+0x2a0>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	4413      	add	r3, r2
 800153e:	2b0a      	cmp	r3, #10
 8001540:	dc7e      	bgt.n	8001640 <ModbusRTU_Receive+0x2b0>
						&& (NUM_REG > 0)) {
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <ModbusRTU_Receive+0x2a0>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d07a      	beq.n	8001640 <ModbusRTU_Receive+0x2b0>
					buff_tx[0] = ID_Device;
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <ModbusRTU_Receive+0x298>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b38      	ldr	r3, [pc, #224]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 8001552:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK;
 8001554:	4b33      	ldr	r3, [pc, #204]	; (8001624 <ModbusRTU_Receive+0x294>)
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 800155a:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = 2 * NUM_REG;
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <ModbusRTU_Receive+0x2a0>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4b33      	ldr	r3, [pc, #204]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 8001568:	709a      	strb	r2, [r3, #2]
					for (int i = 0; i < NUM_REG; i++) {
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	e022      	b.n	80015b6 <ModbusRTU_Receive+0x226>
						buff_tx[3 + 2 * i] = *DATA_AO[ADR + i] >> 8;
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <ModbusRTU_Receive+0x29c>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	4a30      	ldr	r2, [pc, #192]	; (800163c <ModbusRTU_Receive+0x2ac>)
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	0a1b      	lsrs	r3, r3, #8
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	3303      	adds	r3, #3
 800158c:	b2d1      	uxtb	r1, r2
 800158e:	4a29      	ldr	r2, [pc, #164]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 8001590:	54d1      	strb	r1, [r2, r3]
						buff_tx[4 + 2 * i] = *DATA_AO[ADR + i] & 0x00ff;
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <ModbusRTU_Receive+0x29c>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	4a27      	ldr	r2, [pc, #156]	; (800163c <ModbusRTU_Receive+0x2ac>)
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	881a      	ldrh	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3302      	adds	r3, #2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	b2d1      	uxtb	r1, r2
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80015ae:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < NUM_REG; i++) {
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <ModbusRTU_Receive+0x2a0>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4293      	cmp	r3, r2
 80015c0:	dbd6      	blt.n	8001570 <ModbusRTU_Receive+0x1e0>
					}
					CRC_modbus = CRC16(buff_tx, 3 + buff_tx[2]);
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80015c4:	789b      	ldrb	r3, [r3, #2]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	3303      	adds	r3, #3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	4819      	ldr	r0, [pc, #100]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80015d0:	f000 fae6 	bl	8001ba0 <CRC16>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <ModbusRTU_Receive+0x28c>)
 80015da:	801a      	strh	r2, [r3, #0]
					buff_tx[3 + buff_tx[2]] = CRC_modbus & 0x00ff;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <ModbusRTU_Receive+0x28c>)
 80015de:	881a      	ldrh	r2, [r3, #0]
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80015e2:	789b      	ldrb	r3, [r3, #2]
 80015e4:	3303      	adds	r3, #3
 80015e6:	b2d1      	uxtb	r1, r2
 80015e8:	4a12      	ldr	r2, [pc, #72]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80015ea:	54d1      	strb	r1, [r2, r3]
					buff_tx[4 + buff_tx[2]] = CRC_modbus >> 8;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <ModbusRTU_Receive+0x28c>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80015f6:	789b      	ldrb	r3, [r3, #2]
 80015f8:	3304      	adds	r3, #4
 80015fa:	b2d1      	uxtb	r1, r2
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 80015fe:	54d1      	strb	r1, [r2, r3]
					Num_Data_TX = 5 + buff_tx[2];
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <ModbusRTU_Receive+0x2a4>)
 8001602:	789b      	ldrb	r3, [r3, #2]
 8001604:	b29b      	uxth	r3, r3
 8001606:	3305      	adds	r3, #5
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <ModbusRTU_Receive+0x2a8>)
 800160c:	801a      	strh	r2, [r3, #0]
					buff_tx[3] = CRC_modbus & 0x00ff;
					buff_tx[4] = CRC_modbus >> 8;
					Num_Data_TX = 5;
				}

				break;
 800160e:	e23f      	b.n	8001a90 <ModbusRTU_Receive+0x700>
 8001610:	200007bc 	.word	0x200007bc
 8001614:	200002b0 	.word	0x200002b0
 8001618:	200001b4 	.word	0x200001b4
 800161c:	2000021c 	.word	0x2000021c
 8001620:	20000218 	.word	0x20000218
 8001624:	2000021e 	.word	0x2000021e
 8001628:	2000000c 	.word	0x2000000c
 800162c:	200002b4 	.word	0x200002b4
 8001630:	2000021a 	.word	0x2000021a
 8001634:	20000224 	.word	0x20000224
 8001638:	200002b2 	.word	0x200002b2
 800163c:	20000288 	.word	0x20000288
					buff_tx[0] = ID_Device;
 8001640:	4b8c      	ldr	r3, [pc, #560]	; (8001874 <ModbusRTU_Receive+0x4e4>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b8c      	ldr	r3, [pc, #560]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001648:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK | 0x80;
 800164a:	4b8c      	ldr	r3, [pc, #560]	; (800187c <ModbusRTU_Receive+0x4ec>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b88      	ldr	r3, [pc, #544]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001656:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = 2;
 8001658:	4b87      	ldr	r3, [pc, #540]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 800165a:	2202      	movs	r2, #2
 800165c:	709a      	strb	r2, [r3, #2]
					CRC_modbus = CRC16(buff_tx, 3);
 800165e:	2103      	movs	r1, #3
 8001660:	4885      	ldr	r0, [pc, #532]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001662:	f000 fa9d 	bl	8001ba0 <CRC16>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	4b85      	ldr	r3, [pc, #532]	; (8001880 <ModbusRTU_Receive+0x4f0>)
 800166c:	801a      	strh	r2, [r3, #0]
					buff_tx[3] = CRC_modbus & 0x00ff;
 800166e:	4b84      	ldr	r3, [pc, #528]	; (8001880 <ModbusRTU_Receive+0x4f0>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b80      	ldr	r3, [pc, #512]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001676:	70da      	strb	r2, [r3, #3]
					buff_tx[4] = CRC_modbus >> 8;
 8001678:	4b81      	ldr	r3, [pc, #516]	; (8001880 <ModbusRTU_Receive+0x4f0>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	b29b      	uxth	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b7d      	ldr	r3, [pc, #500]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001684:	711a      	strb	r2, [r3, #4]
					Num_Data_TX = 5;
 8001686:	4b7f      	ldr	r3, [pc, #508]	; (8001884 <ModbusRTU_Receive+0x4f4>)
 8001688:	2205      	movs	r2, #5
 800168a:	801a      	strh	r2, [r3, #0]
				break;
 800168c:	e200      	b.n	8001a90 <ModbusRTU_Receive+0x700>
			case 4:
				if ((ADR <= ADR_MAX_AI) && (ADR + NUM_REG <= ADR_MAX_AI)
 800168e:	4b7e      	ldr	r3, [pc, #504]	; (8001888 <ModbusRTU_Receive+0x4f8>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	2b0a      	cmp	r3, #10
 8001694:	d86e      	bhi.n	8001774 <ModbusRTU_Receive+0x3e4>
 8001696:	4b7c      	ldr	r3, [pc, #496]	; (8001888 <ModbusRTU_Receive+0x4f8>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b7b      	ldr	r3, [pc, #492]	; (800188c <ModbusRTU_Receive+0x4fc>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	dc66      	bgt.n	8001774 <ModbusRTU_Receive+0x3e4>
						&& (NUM_REG > 0)) {
 80016a6:	4b79      	ldr	r3, [pc, #484]	; (800188c <ModbusRTU_Receive+0x4fc>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d062      	beq.n	8001774 <ModbusRTU_Receive+0x3e4>
					buff_tx[0] = ID_Device;
 80016ae:	4b71      	ldr	r3, [pc, #452]	; (8001874 <ModbusRTU_Receive+0x4e4>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b70      	ldr	r3, [pc, #448]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 80016b6:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK;
 80016b8:	4b70      	ldr	r3, [pc, #448]	; (800187c <ModbusRTU_Receive+0x4ec>)
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	4b6e      	ldr	r3, [pc, #440]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 80016be:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = 2 * NUM_REG;
 80016c0:	4b72      	ldr	r3, [pc, #456]	; (800188c <ModbusRTU_Receive+0x4fc>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b6b      	ldr	r3, [pc, #428]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 80016cc:	709a      	strb	r2, [r3, #2]
					for (int i = 0; i < NUM_REG; i++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	e022      	b.n	800171a <ModbusRTU_Receive+0x38a>
						buff_tx[3 + 2 * i] = *DATA_AI[ADR + i] >> 8;
 80016d4:	4b6c      	ldr	r3, [pc, #432]	; (8001888 <ModbusRTU_Receive+0x4f8>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	4413      	add	r3, r2
 80016de:	4a6c      	ldr	r2, [pc, #432]	; (8001890 <ModbusRTU_Receive+0x500>)
 80016e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	3303      	adds	r3, #3
 80016f0:	b2d1      	uxtb	r1, r2
 80016f2:	4a61      	ldr	r2, [pc, #388]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 80016f4:	54d1      	strb	r1, [r2, r3]
						buff_tx[4 + 2 * i] = *DATA_AI[ADR + i] & 0x00ff;
 80016f6:	4b64      	ldr	r3, [pc, #400]	; (8001888 <ModbusRTU_Receive+0x4f8>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4413      	add	r3, r2
 8001700:	4a63      	ldr	r2, [pc, #396]	; (8001890 <ModbusRTU_Receive+0x500>)
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	881a      	ldrh	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	3302      	adds	r3, #2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	b2d1      	uxtb	r1, r2
 8001710:	4a59      	ldr	r2, [pc, #356]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001712:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < NUM_REG; i++) {
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3301      	adds	r3, #1
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b5c      	ldr	r3, [pc, #368]	; (800188c <ModbusRTU_Receive+0x4fc>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4293      	cmp	r3, r2
 8001724:	dbd6      	blt.n	80016d4 <ModbusRTU_Receive+0x344>
					}
					CRC_modbus = CRC16(buff_tx, 3 + buff_tx[2]);
 8001726:	4b54      	ldr	r3, [pc, #336]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001728:	789b      	ldrb	r3, [r3, #2]
 800172a:	b29b      	uxth	r3, r3
 800172c:	3303      	adds	r3, #3
 800172e:	b29b      	uxth	r3, r3
 8001730:	4619      	mov	r1, r3
 8001732:	4851      	ldr	r0, [pc, #324]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001734:	f000 fa34 	bl	8001ba0 <CRC16>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <ModbusRTU_Receive+0x4f0>)
 800173e:	801a      	strh	r2, [r3, #0]
					buff_tx[3 + buff_tx[2]] = CRC_modbus & 0x00ff;
 8001740:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <ModbusRTU_Receive+0x4f0>)
 8001742:	881a      	ldrh	r2, [r3, #0]
 8001744:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001746:	789b      	ldrb	r3, [r3, #2]
 8001748:	3303      	adds	r3, #3
 800174a:	b2d1      	uxtb	r1, r2
 800174c:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 800174e:	54d1      	strb	r1, [r2, r3]
					buff_tx[4 + buff_tx[2]] = CRC_modbus >> 8;
 8001750:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <ModbusRTU_Receive+0x4f0>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b47      	ldr	r3, [pc, #284]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 800175a:	789b      	ldrb	r3, [r3, #2]
 800175c:	3304      	adds	r3, #4
 800175e:	b2d1      	uxtb	r1, r2
 8001760:	4a45      	ldr	r2, [pc, #276]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001762:	54d1      	strb	r1, [r2, r3]
					Num_Data_TX = 5 + buff_tx[2];
 8001764:	4b44      	ldr	r3, [pc, #272]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001766:	789b      	ldrb	r3, [r3, #2]
 8001768:	b29b      	uxth	r3, r3
 800176a:	3305      	adds	r3, #5
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b45      	ldr	r3, [pc, #276]	; (8001884 <ModbusRTU_Receive+0x4f4>)
 8001770:	801a      	strh	r2, [r3, #0]
					CRC_modbus = CRC16(buff_tx, 3);
					buff_tx[3] = CRC_modbus & 0x00ff;
					buff_tx[4] = CRC_modbus >> 8;
					Num_Data_TX = 5;
				}
				break;
 8001772:	e18d      	b.n	8001a90 <ModbusRTU_Receive+0x700>
					buff_tx[0] = ID_Device;
 8001774:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <ModbusRTU_Receive+0x4e4>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 800177c:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK | 0x80;
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <ModbusRTU_Receive+0x4ec>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 800178a:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = 2;
 800178c:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 800178e:	2202      	movs	r2, #2
 8001790:	709a      	strb	r2, [r3, #2]
					CRC_modbus = CRC16(buff_tx, 3);
 8001792:	2103      	movs	r1, #3
 8001794:	4838      	ldr	r0, [pc, #224]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001796:	f000 fa03 	bl	8001ba0 <CRC16>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	4b38      	ldr	r3, [pc, #224]	; (8001880 <ModbusRTU_Receive+0x4f0>)
 80017a0:	801a      	strh	r2, [r3, #0]
					buff_tx[3] = CRC_modbus & 0x00ff;
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <ModbusRTU_Receive+0x4f0>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b33      	ldr	r3, [pc, #204]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 80017aa:	70da      	strb	r2, [r3, #3]
					buff_tx[4] = CRC_modbus >> 8;
 80017ac:	4b34      	ldr	r3, [pc, #208]	; (8001880 <ModbusRTU_Receive+0x4f0>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4b30      	ldr	r3, [pc, #192]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 80017b8:	711a      	strb	r2, [r3, #4]
					Num_Data_TX = 5;
 80017ba:	4b32      	ldr	r3, [pc, #200]	; (8001884 <ModbusRTU_Receive+0x4f4>)
 80017bc:	2205      	movs	r2, #5
 80017be:	801a      	strh	r2, [r3, #0]
				break;
 80017c0:	e166      	b.n	8001a90 <ModbusRTU_Receive+0x700>

			case 5:
				buff_tx[0] = ID_Device;
 80017c2:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <ModbusRTU_Receive+0x4e4>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 80017ca:	701a      	strb	r2, [r3, #0]
				buff_tx[1] = FK | 0x80;
 80017cc:	4b2b      	ldr	r3, [pc, #172]	; (800187c <ModbusRTU_Receive+0x4ec>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b28      	ldr	r3, [pc, #160]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 80017d8:	705a      	strb	r2, [r3, #1]
				buff_tx[2] = 2;
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 80017dc:	2202      	movs	r2, #2
 80017de:	709a      	strb	r2, [r3, #2]
				CRC_modbus = CRC16(buff_tx, 3);
 80017e0:	2103      	movs	r1, #3
 80017e2:	4825      	ldr	r0, [pc, #148]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 80017e4:	f000 f9dc 	bl	8001ba0 <CRC16>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <ModbusRTU_Receive+0x4f0>)
 80017ee:	801a      	strh	r2, [r3, #0]
				buff_tx[3] = CRC_modbus & 0x00ff;
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <ModbusRTU_Receive+0x4f0>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 80017f8:	70da      	strb	r2, [r3, #3]
				buff_tx[4] = CRC_modbus >> 8;
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <ModbusRTU_Receive+0x4f0>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	b29b      	uxth	r3, r3
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001806:	711a      	strb	r2, [r3, #4]
				Num_Data_TX = 5;
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <ModbusRTU_Receive+0x4f4>)
 800180a:	2205      	movs	r2, #5
 800180c:	801a      	strh	r2, [r3, #0]
				break;
 800180e:	e13f      	b.n	8001a90 <ModbusRTU_Receive+0x700>

			case 6:
				if (ADR <= ADR_MAX_AO) {
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <ModbusRTU_Receive+0x4f8>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2b0a      	cmp	r3, #10
 8001816:	d841      	bhi.n	800189c <ModbusRTU_Receive+0x50c>
					*DATA_AO[ADR] = NUM_REG;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <ModbusRTU_Receive+0x4f8>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <ModbusRTU_Receive+0x504>)
 8001820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001824:	4a19      	ldr	r2, [pc, #100]	; (800188c <ModbusRTU_Receive+0x4fc>)
 8001826:	8812      	ldrh	r2, [r2, #0]
 8001828:	801a      	strh	r2, [r3, #0]
					buff_tx[0] = buff_rx[0];
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <ModbusRTU_Receive+0x508>)
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001830:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = buff_rx[1];
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <ModbusRTU_Receive+0x508>)
 8001834:	785a      	ldrb	r2, [r3, #1]
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001838:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = buff_rx[2];
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <ModbusRTU_Receive+0x508>)
 800183c:	789a      	ldrb	r2, [r3, #2]
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001840:	709a      	strb	r2, [r3, #2]
					buff_tx[3] = buff_rx[3];
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <ModbusRTU_Receive+0x508>)
 8001844:	78da      	ldrb	r2, [r3, #3]
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001848:	70da      	strb	r2, [r3, #3]
					buff_tx[4] = buff_rx[4];
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <ModbusRTU_Receive+0x508>)
 800184c:	791a      	ldrb	r2, [r3, #4]
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001850:	711a      	strb	r2, [r3, #4]
					buff_tx[5] = buff_rx[5];
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <ModbusRTU_Receive+0x508>)
 8001854:	795a      	ldrb	r2, [r3, #5]
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001858:	715a      	strb	r2, [r3, #5]
					buff_tx[6] = buff_rx[6];
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <ModbusRTU_Receive+0x508>)
 800185c:	799a      	ldrb	r2, [r3, #6]
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001860:	719a      	strb	r2, [r3, #6]
					buff_tx[7] = buff_rx[7];
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <ModbusRTU_Receive+0x508>)
 8001864:	79da      	ldrb	r2, [r3, #7]
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <ModbusRTU_Receive+0x4e8>)
 8001868:	71da      	strb	r2, [r3, #7]
					Num_Data_TX = 8;
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <ModbusRTU_Receive+0x4f4>)
 800186c:	2208      	movs	r2, #8
 800186e:	801a      	strh	r2, [r3, #0]
					CRC_modbus = CRC16(buff_tx, 3);
					buff_tx[3] = CRC_modbus & 0x00ff;
					buff_tx[4] = CRC_modbus >> 8;
					Num_Data_TX = 5;
				}
				break;
 8001870:	e10e      	b.n	8001a90 <ModbusRTU_Receive+0x700>
 8001872:	bf00      	nop
 8001874:	2000000c 	.word	0x2000000c
 8001878:	20000224 	.word	0x20000224
 800187c:	2000021e 	.word	0x2000021e
 8001880:	2000021c 	.word	0x2000021c
 8001884:	200002b2 	.word	0x200002b2
 8001888:	200002b4 	.word	0x200002b4
 800188c:	2000021a 	.word	0x2000021a
 8001890:	200002b8 	.word	0x200002b8
 8001894:	20000288 	.word	0x20000288
 8001898:	200001b4 	.word	0x200001b4
					buff_tx[0] = ID_Device;
 800189c:	4b7e      	ldr	r3, [pc, #504]	; (8001a98 <ModbusRTU_Receive+0x708>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b7e      	ldr	r3, [pc, #504]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80018a4:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK | 0x80;
 80018a6:	4b7e      	ldr	r3, [pc, #504]	; (8001aa0 <ModbusRTU_Receive+0x710>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80018b2:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = 2;
 80018b4:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80018b6:	2202      	movs	r2, #2
 80018b8:	709a      	strb	r2, [r3, #2]
					CRC_modbus = CRC16(buff_tx, 3);
 80018ba:	2103      	movs	r1, #3
 80018bc:	4877      	ldr	r0, [pc, #476]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80018be:	f000 f96f 	bl	8001ba0 <CRC16>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b77      	ldr	r3, [pc, #476]	; (8001aa4 <ModbusRTU_Receive+0x714>)
 80018c8:	801a      	strh	r2, [r3, #0]
					buff_tx[3] = CRC_modbus & 0x00ff;
 80018ca:	4b76      	ldr	r3, [pc, #472]	; (8001aa4 <ModbusRTU_Receive+0x714>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b72      	ldr	r3, [pc, #456]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80018d2:	70da      	strb	r2, [r3, #3]
					buff_tx[4] = CRC_modbus >> 8;
 80018d4:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <ModbusRTU_Receive+0x714>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80018e0:	711a      	strb	r2, [r3, #4]
					Num_Data_TX = 5;
 80018e2:	4b71      	ldr	r3, [pc, #452]	; (8001aa8 <ModbusRTU_Receive+0x718>)
 80018e4:	2205      	movs	r2, #5
 80018e6:	801a      	strh	r2, [r3, #0]
				break;
 80018e8:	e0d2      	b.n	8001a90 <ModbusRTU_Receive+0x700>

			case 15:
				buff_tx[0] = ID_Device;
 80018ea:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <ModbusRTU_Receive+0x708>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b6a      	ldr	r3, [pc, #424]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80018f2:	701a      	strb	r2, [r3, #0]
				buff_tx[1] = FK | 0x80;
 80018f4:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <ModbusRTU_Receive+0x710>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b67      	ldr	r3, [pc, #412]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 8001900:	705a      	strb	r2, [r3, #1]
				buff_tx[2] = 2;
 8001902:	4b66      	ldr	r3, [pc, #408]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 8001904:	2202      	movs	r2, #2
 8001906:	709a      	strb	r2, [r3, #2]
				CRC_modbus = CRC16(buff_tx, 3);
 8001908:	2103      	movs	r1, #3
 800190a:	4864      	ldr	r0, [pc, #400]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 800190c:	f000 f948 	bl	8001ba0 <CRC16>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <ModbusRTU_Receive+0x714>)
 8001916:	801a      	strh	r2, [r3, #0]
				buff_tx[3] = CRC_modbus & 0x00ff;
 8001918:	4b62      	ldr	r3, [pc, #392]	; (8001aa4 <ModbusRTU_Receive+0x714>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b5f      	ldr	r3, [pc, #380]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 8001920:	70da      	strb	r2, [r3, #3]
				buff_tx[4] = CRC_modbus >> 8;
 8001922:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <ModbusRTU_Receive+0x714>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 800192e:	711a      	strb	r2, [r3, #4]
				Num_Data_TX = 5;
 8001930:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <ModbusRTU_Receive+0x718>)
 8001932:	2205      	movs	r2, #5
 8001934:	801a      	strh	r2, [r3, #0]
				break;
 8001936:	e0ab      	b.n	8001a90 <ModbusRTU_Receive+0x700>
			case 16:

				if ((ADR <= ADR_MAX_AO) && (ADR + NUM_REG <= ADR_MAX_AO)
 8001938:	4b5c      	ldr	r3, [pc, #368]	; (8001aac <ModbusRTU_Receive+0x71c>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	2b0a      	cmp	r3, #10
 800193e:	d873      	bhi.n	8001a28 <ModbusRTU_Receive+0x698>
 8001940:	4b5a      	ldr	r3, [pc, #360]	; (8001aac <ModbusRTU_Receive+0x71c>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b5a      	ldr	r3, [pc, #360]	; (8001ab0 <ModbusRTU_Receive+0x720>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	2b0a      	cmp	r3, #10
 800194e:	dc6b      	bgt.n	8001a28 <ModbusRTU_Receive+0x698>
						&& (NUM_REG > 0)) {
 8001950:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <ModbusRTU_Receive+0x720>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d067      	beq.n	8001a28 <ModbusRTU_Receive+0x698>
					for (int i = 0; i < NUM_REG; i++) {
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	e02d      	b.n	80019ba <ModbusRTU_Receive+0x62a>
						*DATA_AO[ADR + i] = buff_rx[7 + 2 * i] << 8;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	3307      	adds	r3, #7
 8001964:	4a53      	ldr	r2, [pc, #332]	; (8001ab4 <ModbusRTU_Receive+0x724>)
 8001966:	5cd3      	ldrb	r3, [r2, r3]
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b50      	ldr	r3, [pc, #320]	; (8001aac <ModbusRTU_Receive+0x71c>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	440b      	add	r3, r1
 8001974:	4950      	ldr	r1, [pc, #320]	; (8001ab8 <ModbusRTU_Receive+0x728>)
 8001976:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800197a:	0212      	lsls	r2, r2, #8
 800197c:	b292      	uxth	r2, r2
 800197e:	801a      	strh	r2, [r3, #0]
						*DATA_AO[ADR + i] |= buff_rx[8 + 2 * i];
 8001980:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <ModbusRTU_Receive+0x71c>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a4b      	ldr	r2, [pc, #300]	; (8001ab8 <ModbusRTU_Receive+0x728>)
 800198c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001990:	8819      	ldrh	r1, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3304      	adds	r3, #4
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4a46      	ldr	r2, [pc, #280]	; (8001ab4 <ModbusRTU_Receive+0x724>)
 800199a:	5cd3      	ldrb	r3, [r2, r3]
 800199c:	b29a      	uxth	r2, r3
 800199e:	4b43      	ldr	r3, [pc, #268]	; (8001aac <ModbusRTU_Receive+0x71c>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4403      	add	r3, r0
 80019a8:	4843      	ldr	r0, [pc, #268]	; (8001ab8 <ModbusRTU_Receive+0x728>)
 80019aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	b292      	uxth	r2, r2
 80019b2:	801a      	strh	r2, [r3, #0]
					for (int i = 0; i < NUM_REG; i++) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3301      	adds	r3, #1
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <ModbusRTU_Receive+0x720>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4293      	cmp	r3, r2
 80019c4:	dbcb      	blt.n	800195e <ModbusRTU_Receive+0x5ce>
					}
					buff_tx[0] = ID_Device;
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <ModbusRTU_Receive+0x708>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80019ce:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK;
 80019d0:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <ModbusRTU_Receive+0x710>)
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80019d6:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = buff_rx[2];
 80019d8:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <ModbusRTU_Receive+0x724>)
 80019da:	789a      	ldrb	r2, [r3, #2]
 80019dc:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80019de:	709a      	strb	r2, [r3, #2]
					buff_tx[3] = buff_rx[3];
 80019e0:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <ModbusRTU_Receive+0x724>)
 80019e2:	78da      	ldrb	r2, [r3, #3]
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80019e6:	70da      	strb	r2, [r3, #3]
					buff_tx[4] = buff_rx[4];
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <ModbusRTU_Receive+0x724>)
 80019ea:	791a      	ldrb	r2, [r3, #4]
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80019ee:	711a      	strb	r2, [r3, #4]
					buff_tx[5] = buff_rx[5];
 80019f0:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <ModbusRTU_Receive+0x724>)
 80019f2:	795a      	ldrb	r2, [r3, #5]
 80019f4:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80019f6:	715a      	strb	r2, [r3, #5]
					CRC_modbus = CRC16(buff_tx, 6);
 80019f8:	2106      	movs	r1, #6
 80019fa:	4828      	ldr	r0, [pc, #160]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 80019fc:	f000 f8d0 	bl	8001ba0 <CRC16>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <ModbusRTU_Receive+0x714>)
 8001a06:	801a      	strh	r2, [r3, #0]
					buff_tx[6] = CRC_modbus & 0x00ff;
 8001a08:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <ModbusRTU_Receive+0x714>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 8001a10:	719a      	strb	r2, [r3, #6]
					buff_tx[7] = CRC_modbus >> 8;
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <ModbusRTU_Receive+0x714>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 8001a1e:	71da      	strb	r2, [r3, #7]
					Num_Data_TX = 8;
 8001a20:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <ModbusRTU_Receive+0x718>)
 8001a22:	2208      	movs	r2, #8
 8001a24:	801a      	strh	r2, [r3, #0]
					CRC_modbus = CRC16(buff_tx, 3);
					buff_tx[3] = CRC_modbus & 0x00ff;
					buff_tx[4] = CRC_modbus >> 8;
					Num_Data_TX = 5;
				}
				break;
 8001a26:	e033      	b.n	8001a90 <ModbusRTU_Receive+0x700>
					buff_tx[0] = ID_Device;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <ModbusRTU_Receive+0x708>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 8001a30:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK | 0x80;
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <ModbusRTU_Receive+0x710>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 8001a3e:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = 2;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 8001a42:	2202      	movs	r2, #2
 8001a44:	709a      	strb	r2, [r3, #2]
					CRC_modbus = CRC16(buff_tx, 3);
 8001a46:	2103      	movs	r1, #3
 8001a48:	4814      	ldr	r0, [pc, #80]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 8001a4a:	f000 f8a9 	bl	8001ba0 <CRC16>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <ModbusRTU_Receive+0x714>)
 8001a54:	801a      	strh	r2, [r3, #0]
					buff_tx[3] = CRC_modbus & 0x00ff;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <ModbusRTU_Receive+0x714>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 8001a5e:	70da      	strb	r2, [r3, #3]
					buff_tx[4] = CRC_modbus >> 8;
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <ModbusRTU_Receive+0x714>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <ModbusRTU_Receive+0x70c>)
 8001a6c:	711a      	strb	r2, [r3, #4]
					Num_Data_TX = 5;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <ModbusRTU_Receive+0x718>)
 8001a70:	2205      	movs	r2, #5
 8001a72:	801a      	strh	r2, [r3, #0]
				break;
 8001a74:	e00c      	b.n	8001a90 <ModbusRTU_Receive+0x700>
			default:

				break;
			}
		} else {
			HAL_UART_Receive_IT(&UART_MODBUS, (uint8_t*) buff_rx, Num_Data_buf);
 8001a76:	2264      	movs	r2, #100	; 0x64
 8001a78:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <ModbusRTU_Receive+0x724>)
 8001a7a:	4810      	ldr	r0, [pc, #64]	; (8001abc <ModbusRTU_Receive+0x72c>)
 8001a7c:	f005 fe6e 	bl	800775c <HAL_UART_Receive_IT>
		}
	} else {
		HAL_UART_Receive_IT(&UART_MODBUS, (uint8_t*) buff_rx, Num_Data_buf);
		//HAL_UART_Receive_IT(&UART_MODBUS, buff_rx, Num_Data_buf);
	}
}
 8001a80:	e006      	b.n	8001a90 <ModbusRTU_Receive+0x700>
		HAL_UART_Receive_IT(&UART_MODBUS, (uint8_t*) buff_rx, Num_Data_buf);
 8001a82:	2264      	movs	r2, #100	; 0x64
 8001a84:	490b      	ldr	r1, [pc, #44]	; (8001ab4 <ModbusRTU_Receive+0x724>)
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <ModbusRTU_Receive+0x72c>)
 8001a88:	f005 fe68 	bl	800775c <HAL_UART_Receive_IT>
}
 8001a8c:	e000      	b.n	8001a90 <ModbusRTU_Receive+0x700>
				break;
 8001a8e:	bf00      	nop
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000000c 	.word	0x2000000c
 8001a9c:	20000224 	.word	0x20000224
 8001aa0:	2000021e 	.word	0x2000021e
 8001aa4:	2000021c 	.word	0x2000021c
 8001aa8:	200002b2 	.word	0x200002b2
 8001aac:	200002b4 	.word	0x200002b4
 8001ab0:	2000021a 	.word	0x2000021a
 8001ab4:	200001b4 	.word	0x200001b4
 8001ab8:	20000288 	.word	0x20000288
 8001abc:	200007bc 	.word	0x200007bc

08001ac0 <ModbusRTU_Transmit>:

void ModbusRTU_Transmit() {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	if (Num_Data_TX > 0) {
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <ModbusRTU_Transmit+0x30>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00e      	beq.n	8001aea <ModbusRTU_Transmit+0x2a>
		HAL_GPIO_WritePin(UART_DIR_PORT, UART_DIR_PIN, 1);
 8001acc:	2201      	movs	r2, #1
 8001ace:	2108      	movs	r1, #8
 8001ad0:	4808      	ldr	r0, [pc, #32]	; (8001af4 <ModbusRTU_Transmit+0x34>)
 8001ad2:	f003 fea5 	bl	8005820 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
		HAL_UART_Transmit_IT(&UART_MODBUS, (uint8_t*) buff_tx, Num_Data_TX);
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <ModbusRTU_Transmit+0x30>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	4906      	ldr	r1, [pc, #24]	; (8001af8 <ModbusRTU_Transmit+0x38>)
 8001ade:	4807      	ldr	r0, [pc, #28]	; (8001afc <ModbusRTU_Transmit+0x3c>)
 8001ae0:	f005 fdf7 	bl	80076d2 <HAL_UART_Transmit_IT>
		Num_Data_TX=0;
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <ModbusRTU_Transmit+0x30>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	801a      	strh	r2, [r3, #0]
		//HAL_UART_Transmit_IT(&UART_MODBUS, buff_tx, Num_Data_TX);

	}
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200002b2 	.word	0x200002b2
 8001af4:	40020400 	.word	0x40020400
 8001af8:	20000224 	.word	0x20000224
 8001afc:	200007bc 	.word	0x200007bc

08001b00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	if (huart == &UART_MODBUS) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <HAL_UART_RxCpltCallback+0x20>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d103      	bne.n	8001b18 <HAL_UART_RxCpltCallback+0x18>
		ModbusRTU_Receive(); //что-то делаем
 8001b10:	f7ff fc3e 	bl	8001390 <ModbusRTU_Receive>
		ModbusRTU_Transmit();
 8001b14:	f7ff ffd4 	bl	8001ac0 <ModbusRTU_Transmit>

	}
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200007bc 	.word	0x200007bc

08001b24 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	if (huart == &UART_MODBUS) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_UART_TxCpltCallback+0x34>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d10c      	bne.n	8001b4e <HAL_UART_TxCpltCallback+0x2a>
		HAL_GPIO_WritePin(UART_DIR_PORT, UART_DIR_PIN, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2108      	movs	r1, #8
 8001b38:	4808      	ldr	r0, [pc, #32]	; (8001b5c <HAL_UART_TxCpltCallback+0x38>)
 8001b3a:	f003 fe71 	bl	8005820 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
		Num_Data_TX = 0;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_UART_TxCpltCallback+0x3c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	801a      	strh	r2, [r3, #0]


		HAL_UART_Receive_IT(&UART_MODBUS, (uint8_t*) buff_rx, Num_Data_buf);
 8001b44:	2264      	movs	r2, #100	; 0x64
 8001b46:	4907      	ldr	r1, [pc, #28]	; (8001b64 <HAL_UART_TxCpltCallback+0x40>)
 8001b48:	4803      	ldr	r0, [pc, #12]	; (8001b58 <HAL_UART_TxCpltCallback+0x34>)
 8001b4a:	f005 fe07 	bl	800775c <HAL_UART_Receive_IT>

		//HAL_UART_Receive_IT(&UART_MODBUS, buff_rx, Num_Data_buf);
	}
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200007bc 	.word	0x200007bc
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	200002b2 	.word	0x200002b2
 8001b64:	200001b4 	.word	0x200001b4

08001b68 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	if (huart == &UART_MODBUS) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_UART_ErrorCallback+0x2c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d109      	bne.n	8001b8c <HAL_UART_ErrorCallback+0x24>
		MODBUS_FAULT = 2;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_UART_ErrorCallback+0x30>)
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	801a      	strh	r2, [r3, #0]
		UART_ERR = HAL_UART_GetError(&UART_MODBUS);
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <HAL_UART_ErrorCallback+0x2c>)
 8001b80:	f006 f972 	bl	8007e68 <HAL_UART_GetError>
 8001b84:	4603      	mov	r3, r0
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <HAL_UART_ErrorCallback+0x34>)
 8001b8a:	801a      	strh	r2, [r3, #0]

		 default:
		 break;
		 }*/
	}
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200007bc 	.word	0x200007bc
 8001b98:	200002e2 	.word	0x200002e2
 8001b9c:	200002e0 	.word	0x200002e0

08001ba0 <CRC16>:

	return x;
}

unsigned short CRC16(unsigned char * pcBlock, unsigned short len)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8001bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb0:	81fb      	strh	r3, [r7, #14]

    while (len--)
 8001bb2:	e00e      	b.n	8001bd2 <CRC16+0x32>
        crc = (crc >> 8) ^ Crc16Table[(crc & 0xFF) ^ *pcBlock++];
 8001bb4:	89fb      	ldrh	r3, [r7, #14]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	89fb      	ldrh	r3, [r7, #14]
 8001bbc:	b2d9      	uxtb	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	1c58      	adds	r0, r3, #1
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	404b      	eors	r3, r1
 8001bc8:	4908      	ldr	r1, [pc, #32]	; (8001bec <CRC16+0x4c>)
 8001bca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001bce:	4053      	eors	r3, r2
 8001bd0:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	1e5a      	subs	r2, r3, #1
 8001bd6:	807a      	strh	r2, [r7, #2]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1eb      	bne.n	8001bb4 <CRC16+0x14>

    return crc;
 8001bdc:	89fb      	ldrh	r3, [r7, #14]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	08008660 	.word	0x08008660

08001bf0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c10:	4a2b      	ldr	r2, [pc, #172]	; (8001cc0 <MX_ADC1_Init+0xd0>)
 8001c12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c1a:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c3e:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c5e:	4817      	ldr	r0, [pc, #92]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c60:	f002 fc96 	bl	8004590 <HAL_ADC_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8001c6a:	f001 fa8d 	bl	8003188 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 8001c6e:	2316      	movs	r3, #22
 8001c70:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 8001c72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c76:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	480e      	ldr	r0, [pc, #56]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001c84:	f002 ffd0 	bl	8004c28 <HAL_ADCEx_MultiModeConfigChannel>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8001c8e:	f001 fa7b 	bl	8003188 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001c92:	230b      	movs	r3, #11
 8001c94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <MX_ADC1_Init+0xcc>)
 8001ca4:	f002 fcd6 	bl	8004654 <HAL_ADC_ConfigChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001cae:	f001 fa6b 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000032c 	.word	0x2000032c
 8001cc0:	40012000 	.word	0x40012000

08001cc4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <MX_ADC2_Init+0x8c>)
 8001cd8:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <MX_ADC2_Init+0x90>)
 8001cda:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <MX_ADC2_Init+0x8c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <MX_ADC2_Init+0x8c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <MX_ADC2_Init+0x8c>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <MX_ADC2_Init+0x8c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <MX_ADC2_Init+0x8c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_ADC2_Init+0x8c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <MX_ADC2_Init+0x8c>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_ADC2_Init+0x8c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_ADC2_Init+0x8c>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d16:	480e      	ldr	r0, [pc, #56]	; (8001d50 <MX_ADC2_Init+0x8c>)
 8001d18:	f002 fc3a 	bl	8004590 <HAL_ADC_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_ADC2_Init+0x62>
  {
    Error_Handler();
 8001d22:	f001 fa31 	bl	8003188 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001d26:	230c      	movs	r3, #12
 8001d28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d32:	463b      	mov	r3, r7
 8001d34:	4619      	mov	r1, r3
 8001d36:	4806      	ldr	r0, [pc, #24]	; (8001d50 <MX_ADC2_Init+0x8c>)
 8001d38:	f002 fc8c 	bl	8004654 <HAL_ADC_ConfigChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8001d42:	f001 fa21 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200002e4 	.word	0x200002e4
 8001d54:	40012100 	.word	0x40012100

08001d58 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <MX_ADC3_Init+0x8c>)
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <MX_ADC3_Init+0x90>)
 8001d6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <MX_ADC3_Init+0x8c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <MX_ADC3_Init+0x8c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <MX_ADC3_Init+0x8c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <MX_ADC3_Init+0x8c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <MX_ADC3_Init+0x8c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <MX_ADC3_Init+0x8c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <MX_ADC3_Init+0x8c>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <MX_ADC3_Init+0x8c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <MX_ADC3_Init+0x8c>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001daa:	480e      	ldr	r0, [pc, #56]	; (8001de4 <MX_ADC3_Init+0x8c>)
 8001dac:	f002 fbf0 	bl	8004590 <HAL_ADC_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_ADC3_Init+0x62>
  {
    Error_Handler();
 8001db6:	f001 f9e7 	bl	8003188 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001dba:	230a      	movs	r3, #10
 8001dbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <MX_ADC3_Init+0x8c>)
 8001dcc:	f002 fc42 	bl	8004654 <HAL_ADC_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 8001dd6:	f001 f9d7 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000374 	.word	0x20000374
 8001de8:	40012200 	.word	0x40012200

08001dec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08e      	sub	sp, #56	; 0x38
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a5d      	ldr	r2, [pc, #372]	; (8001f80 <HAL_ADC_MspInit+0x194>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d158      	bne.n	8001ec0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
 8001e12:	4b5c      	ldr	r3, [pc, #368]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a5b      	ldr	r2, [pc, #364]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	623b      	str	r3, [r7, #32]
 8001e28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a54      	ldr	r2, [pc, #336]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001e34:	f043 0304 	orr.w	r3, r3, #4
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b52      	ldr	r3, [pc, #328]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = U_Pin;
 8001e46:	2302      	movs	r3, #2
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(U_GPIO_Port, &GPIO_InitStruct);
 8001e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e56:	4619      	mov	r1, r3
 8001e58:	484b      	ldr	r0, [pc, #300]	; (8001f88 <HAL_ADC_MspInit+0x19c>)
 8001e5a:	f003 fb2d 	bl	80054b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e5e:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001e60:	4a4b      	ldr	r2, [pc, #300]	; (8001f90 <HAL_ADC_MspInit+0x1a4>)
 8001e62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e64:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6a:	4b48      	ldr	r3, [pc, #288]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e76:	4b45      	ldr	r3, [pc, #276]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e7e:	4b43      	ldr	r3, [pc, #268]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001e88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e8e:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ea2:	483a      	ldr	r0, [pc, #232]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001ea4:	f003 f890 	bl	8004fc8 <HAL_DMA_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001eae:	f001 f96b 	bl	8003188 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a35      	ldr	r2, [pc, #212]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38
 8001eb8:	4a34      	ldr	r2, [pc, #208]	; (8001f8c <HAL_ADC_MspInit+0x1a0>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001ebe:	e05a      	b.n	8001f76 <HAL_ADC_MspInit+0x18a>
  else if(adcHandle->Instance==ADC2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a33      	ldr	r2, [pc, #204]	; (8001f94 <HAL_ADC_MspInit+0x1a8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d128      	bne.n	8001f1c <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4a2c      	ldr	r2, [pc, #176]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001ed4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eda:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a25      	ldr	r2, [pc, #148]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = I_Pin;
 8001f02:	2304      	movs	r3, #4
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f06:	2303      	movs	r3, #3
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	4619      	mov	r1, r3
 8001f14:	481c      	ldr	r0, [pc, #112]	; (8001f88 <HAL_ADC_MspInit+0x19c>)
 8001f16:	f003 facf 	bl	80054b8 <HAL_GPIO_Init>
}
 8001f1a:	e02c      	b.n	8001f76 <HAL_ADC_MspInit+0x18a>
  else if(adcHandle->Instance==ADC3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_ADC_MspInit+0x1ac>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d127      	bne.n	8001f76 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001f30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_ADC_MspInit+0x198>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Trt_Pin;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f62:	2303      	movs	r3, #3
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Trt_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <HAL_ADC_MspInit+0x19c>)
 8001f72:	f003 faa1 	bl	80054b8 <HAL_GPIO_Init>
}
 8001f76:	bf00      	nop
 8001f78:	3738      	adds	r7, #56	; 0x38
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40012000 	.word	0x40012000
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	200003bc 	.word	0x200003bc
 8001f90:	40026410 	.word	0x40026410
 8001f94:	40012100 	.word	0x40012100
 8001f98:	40012200 	.word	0x40012200

08001f9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MX_DMA_Init+0x30>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <MX_DMA_Init+0x30>)
 8001fac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MX_DMA_Init+0x30>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]

}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	4b42      	ldr	r3, [pc, #264]	; (80020f4 <MX_GPIO_Init+0x124>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a41      	ldr	r2, [pc, #260]	; (80020f4 <MX_GPIO_Init+0x124>)
 8001ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b3f      	ldr	r3, [pc, #252]	; (80020f4 <MX_GPIO_Init+0x124>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <MX_GPIO_Init+0x124>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <MX_GPIO_Init+0x124>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <MX_GPIO_Init+0x124>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <MX_GPIO_Init+0x124>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a33      	ldr	r2, [pc, #204]	; (80020f4 <MX_GPIO_Init+0x124>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <MX_GPIO_Init+0x124>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <MX_GPIO_Init+0x124>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a2c      	ldr	r2, [pc, #176]	; (80020f4 <MX_GPIO_Init+0x124>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <MX_GPIO_Init+0x124>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <MX_GPIO_Init+0x124>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <MX_GPIO_Init+0x124>)
 8002060:	f043 0308 	orr.w	r3, r3, #8
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <MX_GPIO_Init+0x124>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_PWM_Pin|UART5_DIR_Pin|DO_1_Pin|DO_2_Pin
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8002078:	481f      	ldr	r0, [pc, #124]	; (80020f8 <MX_GPIO_Init+0x128>)
 800207a:	f003 fbd1 	bl	8005820 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PWR_Fault3_Pin|PWR_Fault1_Pin|Fault_L1_Pin|Fault_H1_Pin;
 800207e:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 8002082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	481a      	ldr	r0, [pc, #104]	; (80020fc <MX_GPIO_Init+0x12c>)
 8002094:	f003 fa10 	bl	80054b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = Fault_L3_Pin|Fault_H3_Pin|Fault_L4_2_Pin|Fault_H4_1_Pin
 8002098:	f44f 635b 	mov.w	r3, #3504	; 0xdb0
 800209c:	617b      	str	r3, [r7, #20]
                          |PWR_Fault2_Pin|Fault_L2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	4814      	ldr	r0, [pc, #80]	; (8002100 <MX_GPIO_Init+0x130>)
 80020ae:	f003 fa03 	bl	80054b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_Fault4_Pin|Fault_L4_Pin|Fault_H4_Pin|Fault_L5_Pin
 80020b2:	f243 0337 	movw	r3, #12343	; 0x3037
 80020b6:	617b      	str	r3, [r7, #20]
                          |Fault_H5_Pin|GLOBAL_SB_Pin|Fault_H2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	480c      	ldr	r0, [pc, #48]	; (80020f8 <MX_GPIO_Init+0x128>)
 80020c8:	f003 f9f6 	bl	80054b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = EN_PWM_Pin|UART5_DIR_Pin|DO_1_Pin|DO_2_Pin
 80020cc:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
 80020d0:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <MX_GPIO_Init+0x128>)
 80020e6:	f003 f9e7 	bl	80054b8 <HAL_GPIO_Init>

}
 80020ea:	bf00      	nop
 80020ec:	3728      	adds	r7, #40	; 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020800 	.word	0x40020800

08002104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002108:	f002 f9ac 	bl	8004464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800210c:	f000 f82e 	bl	800216c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002110:	f7ff ff5e 	bl	8001fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002114:	f7ff ff42 	bl	8001f9c <MX_DMA_Init>
  MX_TIM1_Init();
 8002118:	f001 fba8 	bl	800386c <MX_TIM1_Init>
  MX_TIM3_Init();
 800211c:	f001 fcbc 	bl	8003a98 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002120:	f7ff fd66 	bl	8001bf0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002124:	f7ff fdce 	bl	8001cc4 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002128:	f001 fc40 	bl	80039ac <MX_TIM2_Init>
  MX_TIM9_Init();
 800212c:	f001 fe54 	bl	8003dd8 <MX_TIM9_Init>
  MX_TIM8_Init();
 8002130:	f001 fdb2 	bl	8003c98 <MX_TIM8_Init>
  MX_TIM12_Init();
 8002134:	f001 feb2 	bl	8003e9c <MX_TIM12_Init>
  MX_ADC3_Init();
 8002138:	f7ff fe0e 	bl	8001d58 <MX_ADC3_Init>
  //MX_UART5_Init();
  MX_TIM4_Init();
 800213c:	f001 fd22 	bl	8003b84 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	//Неблокирующий таймер выполнения основного кода
	TIM_NB_Init(&main_timer, 1, main_timer_function);
 8002140:	4a08      	ldr	r2, [pc, #32]	; (8002164 <main+0x60>)
 8002142:	2101      	movs	r1, #1
 8002144:	4808      	ldr	r0, [pc, #32]	; (8002168 <main+0x64>)
 8002146:	f000 fe23 	bl	8002d90 <TIM_NB_Init>
	TIM_NB_Start(&main_timer, MULTIPLE_DELAY);
 800214a:	2102      	movs	r1, #2
 800214c:	4806      	ldr	r0, [pc, #24]	; (8002168 <main+0x64>)
 800214e:	f000 fe31 	bl	8002db4 <TIM_NB_Start>

	//Задежка инициализации
	HAL_Delay(500);
 8002152:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002156:	f002 f9f7 	bl	8004548 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		TIM_NB_Check(&main_timer);
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <main+0x64>)
 800215c:	f000 fe40 	bl	8002de0 <TIM_NB_Check>
 8002160:	e7fb      	b.n	800215a <main+0x56>
 8002162:	bf00      	nop
 8002164:	08002825 	.word	0x08002825
 8002168:	20000420 	.word	0x20000420

0800216c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b094      	sub	sp, #80	; 0x50
 8002170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002172:	f107 0320 	add.w	r3, r7, #32
 8002176:	2230      	movs	r2, #48	; 0x30
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f006 fa5c 	bl	8008638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <SystemClock_Config+0xcc>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	4a27      	ldr	r2, [pc, #156]	; (8002238 <SystemClock_Config+0xcc>)
 800219a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219e:	6413      	str	r3, [r2, #64]	; 0x40
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <SystemClock_Config+0xcc>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ac:	2300      	movs	r3, #0
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <SystemClock_Config+0xd0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a21      	ldr	r2, [pc, #132]	; (800223c <SystemClock_Config+0xd0>)
 80021b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b1f      	ldr	r3, [pc, #124]	; (800223c <SystemClock_Config+0xd0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021c8:	2301      	movs	r3, #1
 80021ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d2:	2302      	movs	r3, #2
 80021d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021dc:	2304      	movs	r3, #4
 80021de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021e0:	23a8      	movs	r3, #168	; 0xa8
 80021e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021e4:	2302      	movs	r3, #2
 80021e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021e8:	2304      	movs	r3, #4
 80021ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ec:	f107 0320 	add.w	r3, r7, #32
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 fb2f 	bl	8005854 <HAL_RCC_OscConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021fc:	f000 ffc4 	bl	8003188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002200:	230f      	movs	r3, #15
 8002202:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002204:	2302      	movs	r3, #2
 8002206:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800220c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002212:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002216:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	2105      	movs	r1, #5
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fd90 	bl	8005d44 <HAL_RCC_ClockConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800222a:	f000 ffad 	bl	8003188 <Error_Handler>
  }
}
 800222e:	bf00      	nop
 8002230:	3750      	adds	r7, #80	; 0x50
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	40007000 	.word	0x40007000

08002240 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

	if (htim == &htim8) {
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a08      	ldr	r2, [pc, #32]	; (800226c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d109      	bne.n	8002264 <HAL_TIM_PeriodElapsedCallback+0x24>

		//Регуляторы и рампы работают в прерывании таймера
		//потому что SysTick не обеспечивает малые постоянные времени
		if(State == Work){
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d105      	bne.n	8002264 <HAL_TIM_PeriodElapsedCallback+0x24>
			//Ramp_Process(&Ramp_Freq);
			Ramp_Process(&Ramp_Amp);
 8002258:	4806      	ldr	r0, [pc, #24]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800225a:	f000 ffd4 	bl	8003206 <Ramp_Process>
			Regulator_Process(&Reg_U);
 800225e:	4806      	ldr	r0, [pc, #24]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002260:	f001 f912 	bl	8003488 <Regulator_Process>

		}

	}

}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200005c4 	.word	0x200005c4
 8002270:	20000534 	.word	0x20000534
 8002274:	200005ac 	.word	0x200005ac
 8002278:	20000548 	.word	0x20000548

0800227c <SoftSw_PWM_Channels_OFF>:

void SoftSw_PWM_Channels_OFF(void) {
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	//Функция для снятия Ш ?Ма на резонансные преобразователи

	TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	4824      	ldr	r0, [pc, #144]	; (8002318 <SoftSw_PWM_Channels_OFF+0x9c>)
 8002286:	f005 f8d0 	bl	800742a <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002292:	f005 f8ca 	bl	800742a <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	4820      	ldr	r0, [pc, #128]	; (800231c <SoftSw_PWM_Channels_OFF+0xa0>)
 800229c:	f005 f8c5 	bl	800742a <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM9, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2100      	movs	r1, #0
 80022a4:	481e      	ldr	r0, [pc, #120]	; (8002320 <SoftSw_PWM_Channels_OFF+0xa4>)
 80022a6:	f005 f8c0 	bl	800742a <TIM_CCxChannelCmd>

	TIM1->BDTR &= ~(TIM_BDTR_MOE);
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <SoftSw_PWM_Channels_OFF+0x9c>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <SoftSw_PWM_Channels_OFF+0x9c>)
 80022b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR &= ~(TIM_BDTR_OSSI);
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <SoftSw_PWM_Channels_OFF+0x9c>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a17      	ldr	r2, [pc, #92]	; (8002318 <SoftSw_PWM_Channels_OFF+0x9c>)
 80022bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
	TIM2->BDTR &= ~(TIM_BDTR_MOE);
 80022c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
	TIM2->BDTR &= ~(TIM_BDTR_OSSI);
 80022d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
	TIM3->BDTR &= ~(TIM_BDTR_MOE);
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <SoftSw_PWM_Channels_OFF+0xa0>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a0d      	ldr	r2, [pc, #52]	; (800231c <SoftSw_PWM_Channels_OFF+0xa0>)
 80022e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
	TIM3->BDTR &= ~(TIM_BDTR_OSSI);
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <SoftSw_PWM_Channels_OFF+0xa0>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <SoftSw_PWM_Channels_OFF+0xa0>)
 80022f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
	TIM9->BDTR &= ~(TIM_BDTR_MOE);
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <SoftSw_PWM_Channels_OFF+0xa4>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <SoftSw_PWM_Channels_OFF+0xa4>)
 8002300:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002304:	6453      	str	r3, [r2, #68]	; 0x44
	TIM9->BDTR &= ~(TIM_BDTR_OSSI);
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <SoftSw_PWM_Channels_OFF+0xa4>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <SoftSw_PWM_Channels_OFF+0xa4>)
 800230c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002310:	6453      	str	r3, [r2, #68]	; 0x44

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40010000 	.word	0x40010000
 800231c:	40000400 	.word	0x40000400
 8002320:	40014000 	.word	0x40014000

08002324 <SoftSw_PWM_Channels_ON>:

void SoftSw_PWM_Channels_ON(void) {
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
	//Функция для выдачи ШиМа на резонансные преобразователи

	TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002328:	2201      	movs	r2, #1
 800232a:	2100      	movs	r1, #0
 800232c:	4817      	ldr	r0, [pc, #92]	; (800238c <SoftSw_PWM_Channels_ON+0x68>)
 800232e:	f005 f87c 	bl	800742a <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002332:	2201      	movs	r2, #1
 8002334:	2100      	movs	r1, #0
 8002336:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800233a:	f005 f876 	bl	800742a <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800233e:	2201      	movs	r2, #1
 8002340:	2100      	movs	r1, #0
 8002342:	4813      	ldr	r0, [pc, #76]	; (8002390 <SoftSw_PWM_Channels_ON+0x6c>)
 8002344:	f005 f871 	bl	800742a <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM9, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002348:	2201      	movs	r2, #1
 800234a:	2100      	movs	r1, #0
 800234c:	4811      	ldr	r0, [pc, #68]	; (8002394 <SoftSw_PWM_Channels_ON+0x70>)
 800234e:	f005 f86c 	bl	800742a <TIM_CCxChannelCmd>

	TIM1->BDTR |= (TIM_BDTR_MOE);
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <SoftSw_PWM_Channels_ON+0x68>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4a0d      	ldr	r2, [pc, #52]	; (800238c <SoftSw_PWM_Channels_ON+0x68>)
 8002358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235c:	6453      	str	r3, [r2, #68]	; 0x44
	TIM2->BDTR |= (TIM_BDTR_MOE);
 800235e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
	TIM3->BDTR |= (TIM_BDTR_MOE);
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <SoftSw_PWM_Channels_ON+0x6c>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	4a07      	ldr	r2, [pc, #28]	; (8002390 <SoftSw_PWM_Channels_ON+0x6c>)
 8002374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002378:	6453      	str	r3, [r2, #68]	; 0x44
	TIM9->BDTR |= (TIM_BDTR_MOE);
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <SoftSw_PWM_Channels_ON+0x70>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <SoftSw_PWM_Channels_ON+0x70>)
 8002380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002384:	6453      	str	r3, [r2, #68]	; 0x44

}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40010000 	.word	0x40010000
 8002390:	40000400 	.word	0x40000400
 8002394:	40014000 	.word	0x40014000

08002398 <SoftSw_PWM_Channels_UpdateDuty>:

void SoftSw_PWM_Channels_UpdateDuty(float New_Duty){
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	ed87 0a01 	vstr	s0, [r7, #4]

	uint32_t duty_tmp;

	if(New_Duty > 1){
 80023a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80023a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b2:	dd02      	ble.n	80023ba <SoftSw_PWM_Channels_UpdateDuty+0x22>
		New_Duty = 1;
 80023b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023b8:	607b      	str	r3, [r7, #4]
	}
	if(New_Duty < 0){
 80023ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80023be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c6:	d502      	bpl.n	80023ce <SoftSw_PWM_Channels_UpdateDuty+0x36>
		New_Duty = 0;
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
	}

	duty_tmp = TIM1->ARR * New_Duty;
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <SoftSw_PWM_Channels_UpdateDuty+0x84>)
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023da:	edd7 7a01 	vldr	s15, [r7, #4]
 80023de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e6:	ee17 3a90 	vmov	r3, s15
 80023ea:	60fb      	str	r3, [r7, #12]

	if (TIM1->CCR1 != duty_tmp) {
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <SoftSw_PWM_Channels_UpdateDuty+0x84>)
 80023ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d00c      	beq.n	8002410 <SoftSw_PWM_Channels_UpdateDuty+0x78>
		//common
		TIM1->CCR1 = duty_tmp;
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <SoftSw_PWM_Channels_UpdateDuty+0x84>)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR1 = duty_tmp;
 80023fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR1 = duty_tmp;
 8002404:	4a06      	ldr	r2, [pc, #24]	; (8002420 <SoftSw_PWM_Channels_UpdateDuty+0x88>)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6353      	str	r3, [r2, #52]	; 0x34
		TIM9->CCR1 = duty_tmp;
 800240a:	4a06      	ldr	r2, [pc, #24]	; (8002424 <SoftSw_PWM_Channels_UpdateDuty+0x8c>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6353      	str	r3, [r2, #52]	; 0x34
	}

}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40010000 	.word	0x40010000
 8002420:	40000400 	.word	0x40000400
 8002424:	40014000 	.word	0x40014000

08002428 <SoftSw_PWM_Channels_UpdatePhase>:

void SoftSw_PWM_Channels_UpdatePhase(uint8_t Tim_Ch_num ,uint32_t New_Phase){
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]

	uint32_t phase_tmp;

	switch(Tim_Ch_num){
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d04c      	beq.n	80024d4 <SoftSw_PWM_Channels_UpdatePhase+0xac>
 800243a:	2b0c      	cmp	r3, #12
 800243c:	dc6d      	bgt.n	800251a <SoftSw_PWM_Channels_UpdatePhase+0xf2>
 800243e:	2b04      	cmp	r3, #4
 8002440:	d002      	beq.n	8002448 <SoftSw_PWM_Channels_UpdatePhase+0x20>
 8002442:	2b08      	cmp	r3, #8
 8002444:	d023      	beq.n	800248e <SoftSw_PWM_Channels_UpdatePhase+0x66>
			TIM1->CCR4 = phase_tmp;
		}
		break;
	default:

		break;
 8002446:	e068      	b.n	800251a <SoftSw_PWM_Channels_UpdatePhase+0xf2>
		phase_tmp = TIM1->ARR - (uint32_t) ((((float) TIM1->ARR / 360)) * New_Phase) - ZERO_PHASE;
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	4a39      	ldr	r2, [pc, #228]	; (8002534 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 800244e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002450:	ee07 2a90 	vmov	s15, r2
 8002454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002458:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002538 <SoftSw_PWM_Channels_UpdatePhase+0x110>
 800245c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	ee07 2a90 	vmov	s15, r2
 8002466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002472:	ee17 2a90 	vmov	r2, s15
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	3b14      	subs	r3, #20
 800247a:	60fb      	str	r3, [r7, #12]
		if(TIM1->CCR2 != phase_tmp){
 800247c:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 800247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	429a      	cmp	r2, r3
 8002484:	d04b      	beq.n	800251e <SoftSw_PWM_Channels_UpdatePhase+0xf6>
			TIM1->CCR2 = phase_tmp;
 8002486:	4a2b      	ldr	r2, [pc, #172]	; (8002534 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800248c:	e047      	b.n	800251e <SoftSw_PWM_Channels_UpdatePhase+0xf6>
		phase_tmp = TIM1->ARR - (uint32_t) ((((float) TIM1->ARR / 360)) * New_Phase) - ZERO_PHASE;
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	4a28      	ldr	r2, [pc, #160]	; (8002534 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 8002494:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002496:	ee07 2a90 	vmov	s15, r2
 800249a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002538 <SoftSw_PWM_Channels_UpdatePhase+0x110>
 80024a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	ee07 2a90 	vmov	s15, r2
 80024ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b8:	ee17 2a90 	vmov	r2, s15
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	3b14      	subs	r3, #20
 80024c0:	60fb      	str	r3, [r7, #12]
		if(TIM1->CCR3 != phase_tmp){
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 80024c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d02a      	beq.n	8002522 <SoftSw_PWM_Channels_UpdatePhase+0xfa>
			TIM1->CCR3 = phase_tmp;
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80024d2:	e026      	b.n	8002522 <SoftSw_PWM_Channels_UpdatePhase+0xfa>
		phase_tmp = TIM1->ARR - (uint32_t) ((((float) TIM1->ARR / 360)) * New_Phase) - ZERO_PHASE;
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	4a16      	ldr	r2, [pc, #88]	; (8002534 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 80024da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024dc:	ee07 2a90 	vmov	s15, r2
 80024e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002538 <SoftSw_PWM_Channels_UpdatePhase+0x110>
 80024e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	ee07 2a90 	vmov	s15, r2
 80024f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024fe:	ee17 2a90 	vmov	r2, s15
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	3b14      	subs	r3, #20
 8002506:	60fb      	str	r3, [r7, #12]
		if(TIM1->CCR4 != phase_tmp){
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	429a      	cmp	r2, r3
 8002510:	d009      	beq.n	8002526 <SoftSw_PWM_Channels_UpdatePhase+0xfe>
			TIM1->CCR4 = phase_tmp;
 8002512:	4a08      	ldr	r2, [pc, #32]	; (8002534 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002518:	e005      	b.n	8002526 <SoftSw_PWM_Channels_UpdatePhase+0xfe>
		break;
 800251a:	bf00      	nop
 800251c:	e004      	b.n	8002528 <SoftSw_PWM_Channels_UpdatePhase+0x100>
		break;
 800251e:	bf00      	nop
 8002520:	e002      	b.n	8002528 <SoftSw_PWM_Channels_UpdatePhase+0x100>
		break;
 8002522:	bf00      	nop
 8002524:	e000      	b.n	8002528 <SoftSw_PWM_Channels_UpdatePhase+0x100>
		break;
 8002526:	bf00      	nop
	}

}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40010000 	.word	0x40010000
 8002538:	43b40000 	.word	0x43b40000

0800253c <SoftSw_PWM_Channels_UpdateFreq>:

void SoftSw_PWM_Channels_UpdateFreq(uint32_t New_Freq){
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

	uint32_t freq_tmp;

	//Ограничение макс частоты
	if (New_Freq > SOFTSW_MAX_FREQ) {
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f244 6250 	movw	r2, #18000	; 0x4650
 800254a:	4293      	cmp	r3, r2
 800254c:	d902      	bls.n	8002554 <SoftSw_PWM_Channels_UpdateFreq+0x18>
		New_Freq = SOFTSW_MAX_FREQ;
 800254e:	f244 6350 	movw	r3, #18000	; 0x4650
 8002552:	607b      	str	r3, [r7, #4]
	}
	//Ограничение мин частоты
	if (New_Freq < SOFTSW_MIN_FREQ) {
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f642 22f7 	movw	r2, #10999	; 0x2af7
 800255a:	4293      	cmp	r3, r2
 800255c:	d802      	bhi.n	8002564 <SoftSw_PWM_Channels_UpdateFreq+0x28>
		New_Freq = SOFTSW_MIN_FREQ;
 800255e:	f642 23f8 	movw	r3, #11000	; 0x2af8
 8002562:	607b      	str	r3, [r7, #4]
	}

	freq_tmp = TIMER_CLK_FREQ / New_Freq;
 8002564:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <SoftSw_PWM_Channels_UpdateFreq+0x68>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	fbb2 f3f3 	udiv	r3, r2, r3
 800256c:	60fb      	str	r3, [r7, #12]

	if(TIM1->ARR != freq_tmp){
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <SoftSw_PWM_Channels_UpdateFreq+0x6c>)
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	429a      	cmp	r2, r3
 8002576:	d00f      	beq.n	8002598 <SoftSw_PWM_Channels_UpdateFreq+0x5c>
		TIM1->ARR = freq_tmp;
 8002578:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <SoftSw_PWM_Channels_UpdateFreq+0x6c>)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM2->ARR = freq_tmp;
 800257e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->ARR = freq_tmp;
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <SoftSw_PWM_Channels_UpdateFreq+0x70>)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM9->ARR = freq_tmp;
 800258c:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <SoftSw_PWM_Channels_UpdateFreq+0x74>)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	62d3      	str	r3, [r2, #44]	; 0x2c
		//АЦП!
		TIM4->ARR = freq_tmp;
 8002592:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <SoftSw_PWM_Channels_UpdateFreq+0x78>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	62d3      	str	r3, [r2, #44]	; 0x2c
	}

}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	01406f40 	.word	0x01406f40
 80025a8:	40010000 	.word	0x40010000
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40014000 	.word	0x40014000
 80025b4:	40000800 	.word	0x40000800

080025b8 <HardSw_PWM_Channels_ON>:

void HardSw_PWM_Channels_ON(void) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	//Эта функция нужна для усправления выдачей импульсов 8 таймера

	TIM_CCxChannelCmd(TIM8, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025bc:	2201      	movs	r2, #1
 80025be:	2100      	movs	r1, #0
 80025c0:	4805      	ldr	r0, [pc, #20]	; (80025d8 <HardSw_PWM_Channels_ON+0x20>)
 80025c2:	f004 ff32 	bl	800742a <TIM_CCxChannelCmd>
	//TIM_CCxChannelCmd(TIM12, TIM_CHANNEL_1, TIM_CCx_ENABLE);

	TIM8->BDTR |= (TIM_BDTR_MOE);
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <HardSw_PWM_Channels_ON+0x20>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a03      	ldr	r2, [pc, #12]	; (80025d8 <HardSw_PWM_Channels_ON+0x20>)
 80025cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
	//TIM12->BDTR |= (TIM_BDTR_MOE);

}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40010400 	.word	0x40010400

080025dc <HardSw_PWM_Channels_OFF>:
void HardSw_PWM_Channels_OFF(void) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	//Эта функция нужна для усправления выдачей импульсов 8 таймера

	TIM_CCxChannelCmd(TIM8, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2100      	movs	r1, #0
 80025e4:	4810      	ldr	r0, [pc, #64]	; (8002628 <HardSw_PWM_Channels_OFF+0x4c>)
 80025e6:	f004 ff20 	bl	800742a <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM12, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	480f      	ldr	r0, [pc, #60]	; (800262c <HardSw_PWM_Channels_OFF+0x50>)
 80025f0:	f004 ff1b 	bl	800742a <TIM_CCxChannelCmd>

	TIM8->BDTR &= ~(TIM_BDTR_MOE);
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HardSw_PWM_Channels_OFF+0x4c>)
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <HardSw_PWM_Channels_OFF+0x4c>)
 80025fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025fe:	6453      	str	r3, [r2, #68]	; 0x44
	TIM8->BDTR &= ~(TIM_BDTR_OSSI);
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HardSw_PWM_Channels_OFF+0x4c>)
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HardSw_PWM_Channels_OFF+0x4c>)
 8002606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800260a:	6453      	str	r3, [r2, #68]	; 0x44
	TIM12->BDTR &= ~(TIM_BDTR_MOE);
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <HardSw_PWM_Channels_OFF+0x50>)
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	4a06      	ldr	r2, [pc, #24]	; (800262c <HardSw_PWM_Channels_OFF+0x50>)
 8002612:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002616:	6453      	str	r3, [r2, #68]	; 0x44
	TIM12->BDTR &= ~(TIM_BDTR_OSSI);
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <HardSw_PWM_Channels_OFF+0x50>)
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	4a03      	ldr	r2, [pc, #12]	; (800262c <HardSw_PWM_Channels_OFF+0x50>)
 800261e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002622:	6453      	str	r3, [r2, #68]	; 0x44
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40010400 	.word	0x40010400
 800262c:	40001800 	.word	0x40001800

08002630 <HardSw_PWM_Channels_UpdateDuty>:

void HardSw_PWM_Channels_UpdateDuty(float New_Duty){
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	ed87 0a01 	vstr	s0, [r7, #4]

	uint32_t duty_tmp;

	if(New_Duty > 1){
 800263a:	edd7 7a01 	vldr	s15, [r7, #4]
 800263e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	dd02      	ble.n	8002652 <HardSw_PWM_Channels_UpdateDuty+0x22>
		New_Duty = 1;
 800264c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002650:	607b      	str	r3, [r7, #4]
	}
	if(New_Duty < 0){
 8002652:	edd7 7a01 	vldr	s15, [r7, #4]
 8002656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800265a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265e:	d502      	bpl.n	8002666 <HardSw_PWM_Channels_UpdateDuty+0x36>
		New_Duty = 0;
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
	}

	duty_tmp = TIM8->ARR * New_Duty;
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HardSw_PWM_Channels_UpdateDuty+0x78>)
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002672:	edd7 7a01 	vldr	s15, [r7, #4]
 8002676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800267e:	ee17 3a90 	vmov	r3, s15
 8002682:	60fb      	str	r3, [r7, #12]

	if (TIM8->CCR1 != duty_tmp) {
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HardSw_PWM_Channels_UpdateDuty+0x78>)
 8002686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	429a      	cmp	r2, r3
 800268c:	d005      	beq.n	800269a <HardSw_PWM_Channels_UpdateDuty+0x6a>
		//common
		TIM8->CCR1 = duty_tmp;
 800268e:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <HardSw_PWM_Channels_UpdateDuty+0x78>)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6353      	str	r3, [r2, #52]	; 0x34
		TIM12->CCR1 = duty_tmp;
 8002694:	4a05      	ldr	r2, [pc, #20]	; (80026ac <HardSw_PWM_Channels_UpdateDuty+0x7c>)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6353      	str	r3, [r2, #52]	; 0x34
	}

}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40010400 	.word	0x40010400
 80026ac:	40001800 	.word	0x40001800

080026b0 <HardSw_PWM_Channels_UpdatePhase>:

void HardSw_PWM_Channels_UpdatePhase(uint8_t Tim_Ch_num ,uint32_t New_Phase){
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]

	uint32_t phase_tmp;

	switch(Tim_Ch_num){
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	2b0c      	cmp	r3, #12
 80026c0:	d04c      	beq.n	800275c <HardSw_PWM_Channels_UpdatePhase+0xac>
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	dc6d      	bgt.n	80027a2 <HardSw_PWM_Channels_UpdatePhase+0xf2>
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d002      	beq.n	80026d0 <HardSw_PWM_Channels_UpdatePhase+0x20>
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d023      	beq.n	8002716 <HardSw_PWM_Channels_UpdatePhase+0x66>
			TIM8->CCR4 = phase_tmp;
		}
		break;
	default:

		break;
 80026ce:	e068      	b.n	80027a2 <HardSw_PWM_Channels_UpdatePhase+0xf2>
		phase_tmp = TIM8->ARR - (uint32_t) ((((float) TIM8->ARR / 360)) * New_Phase) - ZERO_PHASE;
 80026d0:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	4a39      	ldr	r2, [pc, #228]	; (80027bc <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 80026d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026d8:	ee07 2a90 	vmov	s15, r2
 80026dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80027c0 <HardSw_PWM_Channels_UpdatePhase+0x110>
 80026e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	ee07 2a90 	vmov	s15, r2
 80026ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026fa:	ee17 2a90 	vmov	r2, s15
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	3b14      	subs	r3, #20
 8002702:	60fb      	str	r3, [r7, #12]
		if(TIM8->CCR2 != phase_tmp){
 8002704:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	429a      	cmp	r2, r3
 800270c:	d04b      	beq.n	80027a6 <HardSw_PWM_Channels_UpdatePhase+0xf6>
			TIM8->CCR2 = phase_tmp;
 800270e:	4a2b      	ldr	r2, [pc, #172]	; (80027bc <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8002714:	e047      	b.n	80027a6 <HardSw_PWM_Channels_UpdatePhase+0xf6>
		phase_tmp = TIM8->ARR - (uint32_t) ((((float) TIM8->ARR / 360)) * New_Phase) - ZERO_PHASE;
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	4a28      	ldr	r2, [pc, #160]	; (80027bc <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 800271c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800271e:	ee07 2a90 	vmov	s15, r2
 8002722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002726:	eddf 6a26 	vldr	s13, [pc, #152]	; 80027c0 <HardSw_PWM_Channels_UpdatePhase+0x110>
 800272a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	ee07 2a90 	vmov	s15, r2
 8002734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002740:	ee17 2a90 	vmov	r2, s15
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	3b14      	subs	r3, #20
 8002748:	60fb      	str	r3, [r7, #12]
		if(TIM8->CCR3 != phase_tmp){
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 800274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	429a      	cmp	r2, r3
 8002752:	d02a      	beq.n	80027aa <HardSw_PWM_Channels_UpdatePhase+0xfa>
			TIM8->CCR3 = phase_tmp;
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800275a:	e026      	b.n	80027aa <HardSw_PWM_Channels_UpdatePhase+0xfa>
		phase_tmp = TIM8->ARR - (uint32_t) ((((float) TIM8->ARR / 360)) * New_Phase) - ZERO_PHASE;
 800275c:	4b17      	ldr	r3, [pc, #92]	; (80027bc <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	4a16      	ldr	r2, [pc, #88]	; (80027bc <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 8002762:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002764:	ee07 2a90 	vmov	s15, r2
 8002768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80027c0 <HardSw_PWM_Channels_UpdatePhase+0x110>
 8002770:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	ee07 2a90 	vmov	s15, r2
 800277a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002786:	ee17 2a90 	vmov	r2, s15
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	3b14      	subs	r3, #20
 800278e:	60fb      	str	r3, [r7, #12]
		if(TIM8->CCR4 != phase_tmp){
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	429a      	cmp	r2, r3
 8002798:	d009      	beq.n	80027ae <HardSw_PWM_Channels_UpdatePhase+0xfe>
			TIM8->CCR4 = phase_tmp;
 800279a:	4a08      	ldr	r2, [pc, #32]	; (80027bc <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80027a0:	e005      	b.n	80027ae <HardSw_PWM_Channels_UpdatePhase+0xfe>
		break;
 80027a2:	bf00      	nop
 80027a4:	e004      	b.n	80027b0 <HardSw_PWM_Channels_UpdatePhase+0x100>
		break;
 80027a6:	bf00      	nop
 80027a8:	e002      	b.n	80027b0 <HardSw_PWM_Channels_UpdatePhase+0x100>
		break;
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <HardSw_PWM_Channels_UpdatePhase+0x100>
		break;
 80027ae:	bf00      	nop
	}

}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40010400 	.word	0x40010400
 80027c0:	43b40000 	.word	0x43b40000

080027c4 <HardSw_PWM_Channels_UpdateFreq>:

void HardSw_PWM_Channels_UpdateFreq(uint32_t New_Freq){
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

	uint32_t freq_tmp;

	//Ограничение макс частоты
	if (New_Freq > HARDSW_MAX_FREQ) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f244 6250 	movw	r2, #18000	; 0x4650
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d902      	bls.n	80027dc <HardSw_PWM_Channels_UpdateFreq+0x18>
		New_Freq = HARDSW_MAX_FREQ;
 80027d6:	f244 6350 	movw	r3, #18000	; 0x4650
 80027da:	607b      	str	r3, [r7, #4]
	}
	//Ограничение мин частоты
	if (New_Freq < HARDSW_MIN_FREQ) {
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f243 62af 	movw	r2, #13999	; 0x36af
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d802      	bhi.n	80027ec <HardSw_PWM_Channels_UpdateFreq+0x28>
		New_Freq = HARDSW_MIN_FREQ;
 80027e6:	f243 63b0 	movw	r3, #14000	; 0x36b0
 80027ea:	607b      	str	r3, [r7, #4]
	}

	freq_tmp = TIMER_CLK_FREQ / New_Freq;
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <HardSw_PWM_Channels_UpdateFreq+0x54>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	60fb      	str	r3, [r7, #12]

	if(TIM8->ARR != freq_tmp){
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HardSw_PWM_Channels_UpdateFreq+0x58>)
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d005      	beq.n	800280c <HardSw_PWM_Channels_UpdateFreq+0x48>
		TIM8->ARR = freq_tmp;
 8002800:	4a06      	ldr	r2, [pc, #24]	; (800281c <HardSw_PWM_Channels_UpdateFreq+0x58>)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM12->ARR = freq_tmp;
 8002806:	4a06      	ldr	r2, [pc, #24]	; (8002820 <HardSw_PWM_Channels_UpdateFreq+0x5c>)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	62d3      	str	r3, [r2, #44]	; 0x2c
	}

}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	01406f40 	.word	0x01406f40
 800281c:	40010400 	.word	0x40010400
 8002820:	40001800 	.word	0x40001800

08002824 <main_timer_function>:

void main_timer_function() {
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af02      	add	r7, sp, #8

	//Основная функция, где крутится вся логика

	//расчет среднего значения датчиков
	//для фильтрации
	MEAN_Signal(&U_mean, &U_Value, &U_mean_sum, U_mean_buf, MEAN_BUF_SIZE);
 800282a:	2332      	movs	r3, #50	; 0x32
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	4ba8      	ldr	r3, [pc, #672]	; (8002ad0 <main_timer_function+0x2ac>)
 8002830:	4aa8      	ldr	r2, [pc, #672]	; (8002ad4 <main_timer_function+0x2b0>)
 8002832:	49a9      	ldr	r1, [pc, #676]	; (8002ad8 <main_timer_function+0x2b4>)
 8002834:	48a9      	ldr	r0, [pc, #676]	; (8002adc <main_timer_function+0x2b8>)
 8002836:	f7fe fd01 	bl	800123c <MEAN_Signal>
	MEAN_Signal(&I_mean, &I_Value, &I_mean_sum, I_mean_buf, MEAN_BUF_SIZE);
 800283a:	2332      	movs	r3, #50	; 0x32
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	4ba8      	ldr	r3, [pc, #672]	; (8002ae0 <main_timer_function+0x2bc>)
 8002840:	4aa8      	ldr	r2, [pc, #672]	; (8002ae4 <main_timer_function+0x2c0>)
 8002842:	49a9      	ldr	r1, [pc, #676]	; (8002ae8 <main_timer_function+0x2c4>)
 8002844:	48a9      	ldr	r0, [pc, #676]	; (8002aec <main_timer_function+0x2c8>)
 8002846:	f7fe fcf9 	bl	800123c <MEAN_Signal>

	//функции считывания входов и выдачи сигналов на выходы
	HW_Driver_DI_AI_Read();
 800284a:	f7fe fb23 	bl	8000e94 <HW_Driver_DI_AI_Read>
	HW_Driver_DO_PWM_Out();
 800284e:	f7fe fcc9 	bl	80011e4 <HW_Driver_DO_PWM_Out>

	//Светодиодная индикация состояния
	Device_Indication_Process();
 8002852:	f000 fb67 	bl	8002f24 <Device_Indication_Process>
	//Проверка ошибок
	if(CHECK_ERROR_EN){
		Device_Check_Error();
	}

	if(Device_Error > 0){
 8002856:	4ba6      	ldr	r3, [pc, #664]	; (8002af0 <main_timer_function+0x2cc>)
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <main_timer_function+0x40>
		State = Stop;
 800285e:	4ba5      	ldr	r3, [pc, #660]	; (8002af4 <main_timer_function+0x2d0>)
 8002860:	2205      	movs	r2, #5
 8002862:	601a      	str	r2, [r3, #0]
	}

	//По этому флагу разрешается работа доп стойки для жесткой коммутациии
	if(EN_OS_State){
 8002864:	4ba4      	ldr	r3, [pc, #656]	; (8002af8 <main_timer_function+0x2d4>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <main_timer_function+0x50>
		autocomp_enable = 1;
 800286c:	4ba3      	ldr	r3, [pc, #652]	; (8002afc <main_timer_function+0x2d8>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e002      	b.n	800287a <main_timer_function+0x56>
	} else {
		autocomp_enable = 0;
 8002874:	4ba1      	ldr	r3, [pc, #644]	; (8002afc <main_timer_function+0x2d8>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
	}

	// обновление регистров MDB
	ModbusRTU_update_reg();
 800287a:	f000 fbd5 	bl	8003028 <ModbusRTU_update_reg>

	//Основная стейт машина
	switch (State) {
 800287e:	4b9d      	ldr	r3, [pc, #628]	; (8002af4 <main_timer_function+0x2d0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b06      	cmp	r3, #6
 8002884:	f200 824f 	bhi.w	8002d26 <main_timer_function+0x502>
 8002888:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <main_timer_function+0x6c>)
 800288a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288e:	bf00      	nop
 8002890:	080028ad 	.word	0x080028ad
 8002894:	080029d1 	.word	0x080029d1
 8002898:	08002a01 	.word	0x08002a01
 800289c:	08002a85 	.word	0x08002a85
 80028a0:	08002b6d 	.word	0x08002b6d
 80028a4:	08002c4f 	.word	0x08002c4f
 80028a8:	08002cd5 	.word	0x08002cd5

	case Init:

		//не имеет смысла
		if(State != Old_State){
 80028ac:	4b91      	ldr	r3, [pc, #580]	; (8002af4 <main_timer_function+0x2d0>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b93      	ldr	r3, [pc, #588]	; (8002b00 <main_timer_function+0x2dc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d008      	beq.n	80028ca <main_timer_function+0xa6>
			time_tmp = millis();
 80028b8:	f000 fac3 	bl	8002e42 <millis>
 80028bc:	4603      	mov	r3, r0
 80028be:	4a91      	ldr	r2, [pc, #580]	; (8002b04 <main_timer_function+0x2e0>)
 80028c0:	6013      	str	r3, [r2, #0]
			Old_State = State;
 80028c2:	4b8c      	ldr	r3, [pc, #560]	; (8002af4 <main_timer_function+0x2d0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a8e      	ldr	r2, [pc, #568]	; (8002b00 <main_timer_function+0x2dc>)
 80028c8:	6013      	str	r3, [r2, #0]
		}

		Button_1.State = &But_1_State;
 80028ca:	4b8f      	ldr	r3, [pc, #572]	; (8002b08 <main_timer_function+0x2e4>)
 80028cc:	4a8f      	ldr	r2, [pc, #572]	; (8002b0c <main_timer_function+0x2e8>)
 80028ce:	601a      	str	r2, [r3, #0]
		Button_1.delay = SB1_T_DELAY;
 80028d0:	4b8d      	ldr	r3, [pc, #564]	; (8002b08 <main_timer_function+0x2e4>)
 80028d2:	22c8      	movs	r2, #200	; 0xc8
 80028d4:	60da      	str	r2, [r3, #12]
		Button_1.Old_State = OFF;
 80028d6:	4b8c      	ldr	r3, [pc, #560]	; (8002b08 <main_timer_function+0x2e4>)
 80028d8:	2200      	movs	r2, #0
 80028da:	711a      	strb	r2, [r3, #4]
		Button_1.cnt = 0;
 80028dc:	4b8a      	ldr	r3, [pc, #552]	; (8002b08 <main_timer_function+0x2e4>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]

		PC_Button.State = &PC_Start_flag;
 80028e2:	4b8b      	ldr	r3, [pc, #556]	; (8002b10 <main_timer_function+0x2ec>)
 80028e4:	4a8b      	ldr	r2, [pc, #556]	; (8002b14 <main_timer_function+0x2f0>)
 80028e6:	601a      	str	r2, [r3, #0]
		PC_Button.delay = 100;
 80028e8:	4b89      	ldr	r3, [pc, #548]	; (8002b10 <main_timer_function+0x2ec>)
 80028ea:	2264      	movs	r2, #100	; 0x64
 80028ec:	60da      	str	r2, [r3, #12]
		PC_Button.Old_State = OFF;
 80028ee:	4b88      	ldr	r3, [pc, #544]	; (8002b10 <main_timer_function+0x2ec>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	711a      	strb	r2, [r3, #4]
		PC_Button.cnt = 0;
 80028f4:	4b86      	ldr	r3, [pc, #536]	; (8002b10 <main_timer_function+0x2ec>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]

		init_err = Periph_Init();
 80028fa:	f7fe f9ff 	bl	8000cfc <Periph_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	4b85      	ldr	r3, [pc, #532]	; (8002b18 <main_timer_function+0x2f4>)
 8002904:	701a      	strb	r2, [r3, #0]

		// инициализация рамп и регуляторов
		//Работают сейчас
		Ramp_Init(&Ramp_Amp, &zad_u, 1200, 0, 10, 1);
 8002906:	2201      	movs	r2, #1
 8002908:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 800290c:	eddf 0a83 	vldr	s1, [pc, #524]	; 8002b1c <main_timer_function+0x2f8>
 8002910:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8002b20 <main_timer_function+0x2fc>
 8002914:	4983      	ldr	r1, [pc, #524]	; (8002b24 <main_timer_function+0x300>)
 8002916:	4884      	ldr	r0, [pc, #528]	; (8002b28 <main_timer_function+0x304>)
 8002918:	f000 fc3b 	bl	8003192 <Ramp_Init>
		//Regulator_Init(&Reg_U, &Ramp_Amp.Out, &U_Instant, 0.0005, 0.005, 0.8, 0, 0.8, 0);
		Regulator_Init(&Reg_U, &Ramp_Amp.Out, &calc_os_u, 0.0005, 0.005, 0.8, 0, 0.8, 0);
 800291c:	eddf 2a7f 	vldr	s5, [pc, #508]	; 8002b1c <main_timer_function+0x2f8>
 8002920:	ed9f 2a82 	vldr	s4, [pc, #520]	; 8002b2c <main_timer_function+0x308>
 8002924:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8002b1c <main_timer_function+0x2f8>
 8002928:	ed9f 1a80 	vldr	s2, [pc, #512]	; 8002b2c <main_timer_function+0x308>
 800292c:	eddf 0a80 	vldr	s1, [pc, #512]	; 8002b30 <main_timer_function+0x30c>
 8002930:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8002b34 <main_timer_function+0x310>
 8002934:	4a80      	ldr	r2, [pc, #512]	; (8002b38 <main_timer_function+0x314>)
 8002936:	4981      	ldr	r1, [pc, #516]	; (8002b3c <main_timer_function+0x318>)
 8002938:	4881      	ldr	r0, [pc, #516]	; (8002b40 <main_timer_function+0x31c>)
 800293a:	f000 fd4a 	bl	80033d2 <Regulator_Init>
		//Не работают
		Ramp_Init(&Ramp_Freq, &zad_freq, PFM_MAX_FREQ, PFM_MIN_FREQ, 40, 1);
 800293e:	2201      	movs	r2, #1
 8002940:	ed9f 1a80 	vldr	s2, [pc, #512]	; 8002b44 <main_timer_function+0x320>
 8002944:	eddf 0a80 	vldr	s1, [pc, #512]	; 8002b48 <main_timer_function+0x324>
 8002948:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8002b4c <main_timer_function+0x328>
 800294c:	4980      	ldr	r1, [pc, #512]	; (8002b50 <main_timer_function+0x32c>)
 800294e:	4881      	ldr	r0, [pc, #516]	; (8002b54 <main_timer_function+0x330>)
 8002950:	f000 fc1f 	bl	8003192 <Ramp_Init>
		Ramp_Init(&Ramp_Phase, &zad_phase, PFM_MAX_PHASE, PFM_MIN_PHASE, 1, 100);
 8002954:	2264      	movs	r2, #100	; 0x64
 8002956:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800295a:	eddf 0a70 	vldr	s1, [pc, #448]	; 8002b1c <main_timer_function+0x2f8>
 800295e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8002b58 <main_timer_function+0x334>
 8002962:	497e      	ldr	r1, [pc, #504]	; (8002b5c <main_timer_function+0x338>)
 8002964:	487e      	ldr	r0, [pc, #504]	; (8002b60 <main_timer_function+0x33c>)
 8002966:	f000 fc14 	bl	8003192 <Ramp_Init>


		//Modbus заготовочка
		ModbusRTU_Init();
 800296a:	f7fe fcb5 	bl	80012d8 <ModbusRTU_Init>

		//Конфигурируем регистры таймеров на работу с нужной частотой
		SoftSw_PWM_Channels_UpdateFreq(SOFTSW_FREQ);
 800296e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8002972:	f7ff fde3 	bl	800253c <SoftSw_PWM_Channels_UpdateFreq>
		SoftSw_PWM_Channels_UpdatePhase(TIM_CHANNEL_2, SOFTSW_CH2_PHASE);
 8002976:	21b4      	movs	r1, #180	; 0xb4
 8002978:	2004      	movs	r0, #4
 800297a:	f7ff fd55 	bl	8002428 <SoftSw_PWM_Channels_UpdatePhase>
		SoftSw_PWM_Channels_UpdatePhase(TIM_CHANNEL_3, SOFTSW_CH3_PHASE);
 800297e:	215a      	movs	r1, #90	; 0x5a
 8002980:	2008      	movs	r0, #8
 8002982:	f7ff fd51 	bl	8002428 <SoftSw_PWM_Channels_UpdatePhase>
		SoftSw_PWM_Channels_UpdatePhase(TIM_CHANNEL_4, SOFTSW_CH4_PHASE);
 8002986:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800298a:	200c      	movs	r0, #12
 800298c:	f7ff fd4c 	bl	8002428 <SoftSw_PWM_Channels_UpdatePhase>
		SoftSw_PWM_Channels_UpdateDuty(0);
 8002990:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8002b1c <main_timer_function+0x2f8>
 8002994:	f7ff fd00 	bl	8002398 <SoftSw_PWM_Channels_UpdateDuty>
		SoftSw_PWM_Channels_OFF();
 8002998:	f7ff fc70 	bl	800227c <SoftSw_PWM_Channels_OFF>

		//Мне удобно так его проконфигурировать и потом выключить шим
		HardSw_PWM_Channels_UpdateFreq(HARDSW_FREQ);
 800299c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80029a0:	f7ff ff10 	bl	80027c4 <HardSw_PWM_Channels_UpdateFreq>
		HardSw_PWM_Channels_UpdatePhase(TIM_CHANNEL_2, HARDSW_CH2_PHASE);
 80029a4:	21b4      	movs	r1, #180	; 0xb4
 80029a6:	2004      	movs	r0, #4
 80029a8:	f7ff fe82 	bl	80026b0 <HardSw_PWM_Channels_UpdatePhase>
		HardSw_PWM_Channels_UpdateDuty(0);
 80029ac:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8002b1c <main_timer_function+0x2f8>
 80029b0:	f7ff fe3e 	bl	8002630 <HardSw_PWM_Channels_UpdateDuty>
		HardSw_PWM_Channels_OFF();
 80029b4:	f7ff fe12 	bl	80025dc <HardSw_PWM_Channels_OFF>

		if (init_err == 0) {
 80029b8:	4b57      	ldr	r3, [pc, #348]	; (8002b18 <main_timer_function+0x2f4>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <main_timer_function+0x1a4>
			State = Wait;
 80029c0:	4b4c      	ldr	r3, [pc, #304]	; (8002af4 <main_timer_function+0x2d0>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
			State = Error;
		}



		break;
 80029c6:	e1b7      	b.n	8002d38 <main_timer_function+0x514>
			State = Error;
 80029c8:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <main_timer_function+0x2d0>)
 80029ca:	2206      	movs	r2, #6
 80029cc:	601a      	str	r2, [r3, #0]
		break;
 80029ce:	e1b3      	b.n	8002d38 <main_timer_function+0x514>

	case Wait:

		if(ST_WAIT_EN){
			if(State != Old_State){
 80029d0:	4b48      	ldr	r3, [pc, #288]	; (8002af4 <main_timer_function+0x2d0>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b4a      	ldr	r3, [pc, #296]	; (8002b00 <main_timer_function+0x2dc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d008      	beq.n	80029ee <main_timer_function+0x1ca>
				time_tmp = millis();
 80029dc:	f000 fa31 	bl	8002e42 <millis>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4a48      	ldr	r2, [pc, #288]	; (8002b04 <main_timer_function+0x2e0>)
 80029e4:	6013      	str	r3, [r2, #0]
				Old_State = State;
 80029e6:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <main_timer_function+0x2d0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a45      	ldr	r2, [pc, #276]	; (8002b00 <main_timer_function+0x2dc>)
 80029ec:	6013      	str	r3, [r2, #0]
			}

			Button_Control(&Button_1, PreCharge);
 80029ee:	2102      	movs	r1, #2
 80029f0:	4845      	ldr	r0, [pc, #276]	; (8002b08 <main_timer_function+0x2e4>)
 80029f2:	f000 fa63 	bl	8002ebc <Button_Control>
			Button_Control(&PC_Button, PreCharge);
 80029f6:	2102      	movs	r1, #2
 80029f8:	4845      	ldr	r0, [pc, #276]	; (8002b10 <main_timer_function+0x2ec>)
 80029fa:	f000 fa5f 	bl	8002ebc <Button_Control>

		} else {
			State = PreCharge;
		}

		break;
 80029fe:	e19b      	b.n	8002d38 <main_timer_function+0x514>

	case PreCharge:

		if(ST_PRECHARGE_EN){
			if(State != Old_State){
 8002a00:	4b3c      	ldr	r3, [pc, #240]	; (8002af4 <main_timer_function+0x2d0>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <main_timer_function+0x2dc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d00e      	beq.n	8002a2a <main_timer_function+0x206>
				time_tmp = millis();
 8002a0c:	f000 fa19 	bl	8002e42 <millis>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4a3c      	ldr	r2, [pc, #240]	; (8002b04 <main_timer_function+0x2e0>)
 8002a14:	6013      	str	r3, [r2, #0]
				Old_State = State;
 8002a16:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <main_timer_function+0x2d0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a39      	ldr	r2, [pc, #228]	; (8002b00 <main_timer_function+0x2dc>)
 8002a1c:	6013      	str	r3, [r2, #0]
				DO_1_State = ON;
 8002a1e:	4b51      	ldr	r3, [pc, #324]	; (8002b64 <main_timer_function+0x340>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
				DO_2_State = OFF;
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <main_timer_function+0x344>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
			}

			Button_Control(&Button_1, Stop);
 8002a2a:	2105      	movs	r1, #5
 8002a2c:	4836      	ldr	r0, [pc, #216]	; (8002b08 <main_timer_function+0x2e4>)
 8002a2e:	f000 fa45 	bl	8002ebc <Button_Control>
			Button_Control(&PC_Button, Stop);
 8002a32:	2105      	movs	r1, #5
 8002a34:	4836      	ldr	r0, [pc, #216]	; (8002b10 <main_timer_function+0x2ec>)
 8002a36:	f000 fa41 	bl	8002ebc <Button_Control>

			if(millis() - time_tmp >= T_PRECHARGE){
 8002a3a:	f000 fa02 	bl	8002e42 <millis>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	4b30      	ldr	r3, [pc, #192]	; (8002b04 <main_timer_function+0x2e0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d907      	bls.n	8002a5e <main_timer_function+0x23a>
				DO_2_State = ON;
 8002a4e:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <main_timer_function+0x344>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
				time_tmp = millis();
 8002a54:	f000 f9f5 	bl	8002e42 <millis>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4a2a      	ldr	r2, [pc, #168]	; (8002b04 <main_timer_function+0x2e0>)
 8002a5c:	6013      	str	r3, [r2, #0]
			}

			if((millis() - time_tmp >= 500) && (DO_2_State == ON)){
 8002a5e:	f000 f9f0 	bl	8002e42 <millis>
 8002a62:	4602      	mov	r2, r0
 8002a64:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <main_timer_function+0x2e0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a6e:	f0c0 815c 	bcc.w	8002d2a <main_timer_function+0x506>
 8002a72:	4b3d      	ldr	r3, [pc, #244]	; (8002b68 <main_timer_function+0x344>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	f040 8157 	bne.w	8002d2a <main_timer_function+0x506>
				//DO_1_State = OFF; ВЫКЛЮЧАТЬ НЕ НУЖНО, Т.К. ПЕРЕДЕЛАЛИ СХЕМУ ДЛЯ ЗАРЯДА КОНДЕНСАТОРОВ
				State = Delay;
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <main_timer_function+0x2d0>)
 8002a7e:	2203      	movs	r2, #3
 8002a80:	601a      	str	r2, [r3, #0]

		} else {
			State = Delay;
		}

		break;
 8002a82:	e152      	b.n	8002d2a <main_timer_function+0x506>

	case Delay:

		if(ST_DELAY_EN){
			if(State != Old_State){
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <main_timer_function+0x2d0>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <main_timer_function+0x2dc>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d008      	beq.n	8002aa2 <main_timer_function+0x27e>
				time_tmp = millis();
 8002a90:	f000 f9d7 	bl	8002e42 <millis>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <main_timer_function+0x2e0>)
 8002a98:	6013      	str	r3, [r2, #0]
				Old_State = State;
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <main_timer_function+0x2d0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <main_timer_function+0x2dc>)
 8002aa0:	6013      	str	r3, [r2, #0]
			}

			Button_Control(&Button_1, Stop);
 8002aa2:	2105      	movs	r1, #5
 8002aa4:	4818      	ldr	r0, [pc, #96]	; (8002b08 <main_timer_function+0x2e4>)
 8002aa6:	f000 fa09 	bl	8002ebc <Button_Control>
			Button_Control(&PC_Button, Stop);
 8002aaa:	2105      	movs	r1, #5
 8002aac:	4818      	ldr	r0, [pc, #96]	; (8002b10 <main_timer_function+0x2ec>)
 8002aae:	f000 fa05 	bl	8002ebc <Button_Control>

			if(millis() - time_tmp >= T_DELAY){
 8002ab2:	f000 f9c6 	bl	8002e42 <millis>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <main_timer_function+0x2e0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac2:	f0c0 8134 	bcc.w	8002d2e <main_timer_function+0x50a>
				State = Work;
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <main_timer_function+0x2d0>)
 8002ac8:	2204      	movs	r2, #4
 8002aca:	601a      	str	r2, [r3, #0]
			}
		} else {
			State = Work;
		}

		break;
 8002acc:	e12f      	b.n	8002d2e <main_timer_function+0x50a>
 8002ace:	bf00      	nop
 8002ad0:	20000130 	.word	0x20000130
 8002ad4:	200000c0 	.word	0x200000c0
 8002ad8:	200001a4 	.word	0x200001a4
 8002adc:	20000098 	.word	0x20000098
 8002ae0:	200000c8 	.word	0x200000c8
 8002ae4:	20000090 	.word	0x20000090
 8002ae8:	20000082 	.word	0x20000082
 8002aec:	20000194 	.word	0x20000194
 8002af0:	20000430 	.word	0x20000430
 8002af4:	20000534 	.word	0x20000534
 8002af8:	200000a5 	.word	0x200000a5
 8002afc:	2000007c 	.word	0x2000007c
 8002b00:	200004c4 	.word	0x200004c4
 8002b04:	2000049c 	.word	0x2000049c
 8002b08:	200004b4 	.word	0x200004b4
 8002b0c:	200000a0 	.word	0x200000a0
 8002b10:	200004a4 	.word	0x200004a4
 8002b14:	2000007d 	.word	0x2000007d
 8002b18:	200004c8 	.word	0x200004c8
 8002b1c:	00000000 	.word	0x00000000
 8002b20:	44960000 	.word	0x44960000
 8002b24:	20000070 	.word	0x20000070
 8002b28:	200005ac 	.word	0x200005ac
 8002b2c:	3f4ccccd 	.word	0x3f4ccccd
 8002b30:	3ba3d70a 	.word	0x3ba3d70a
 8002b34:	3a03126f 	.word	0x3a03126f
 8002b38:	2000053c 	.word	0x2000053c
 8002b3c:	200005b4 	.word	0x200005b4
 8002b40:	20000548 	.word	0x20000548
 8002b44:	42200000 	.word	0x42200000
 8002b48:	447a0000 	.word	0x447a0000
 8002b4c:	467a0000 	.word	0x467a0000
 8002b50:	20000010 	.word	0x20000010
 8002b54:	20000594 	.word	0x20000594
 8002b58:	43280000 	.word	0x43280000
 8002b5c:	20000018 	.word	0x20000018
 8002b60:	2000057c 	.word	0x2000057c
 8002b64:	200001a0 	.word	0x200001a0
 8002b68:	2000008c 	.word	0x2000008c

	case Work:

		if(ST_WORK_EN){
			if(State != Old_State){
 8002b6c:	4b74      	ldr	r3, [pc, #464]	; (8002d40 <main_timer_function+0x51c>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b74      	ldr	r3, [pc, #464]	; (8002d44 <main_timer_function+0x520>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d017      	beq.n	8002ba8 <main_timer_function+0x384>
				time_tmp = millis();
 8002b78:	f000 f963 	bl	8002e42 <millis>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4a72      	ldr	r2, [pc, #456]	; (8002d48 <main_timer_function+0x524>)
 8002b80:	6013      	str	r3, [r2, #0]

				EN_PWM_State = ON;
 8002b82:	4b72      	ldr	r3, [pc, #456]	; (8002d4c <main_timer_function+0x528>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]

				//Включение шима
				if(SOFT_SW_EN){
					SoftSw_PWM_Channels_ON();
 8002b88:	f7ff fbcc 	bl	8002324 <SoftSw_PWM_Channels_ON>
					SoftSw_PWM_Channels_UpdateDuty(SOFTSW_DUTY);
 8002b8c:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8002d50 <main_timer_function+0x52c>
 8002b90:	f7ff fc02 	bl	8002398 <SoftSw_PWM_Channels_UpdateDuty>
				}

				if(HARD_SW_EN){
					HardSw_PWM_Channels_ON();
 8002b94:	f7ff fd10 	bl	80025b8 <HardSw_PWM_Channels_ON>
					HardSw_PWM_Channels_UpdateDuty(HARDSW_DUTY);
 8002b98:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8002d54 <main_timer_function+0x530>
 8002b9c:	f7ff fd48 	bl	8002630 <HardSw_PWM_Channels_UpdateDuty>
				}

				Old_State = State;
 8002ba0:	4b67      	ldr	r3, [pc, #412]	; (8002d40 <main_timer_function+0x51c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a67      	ldr	r2, [pc, #412]	; (8002d44 <main_timer_function+0x520>)
 8002ba6:	6013      	str	r3, [r2, #0]

				//Разомкнутая система
				//HardSw_PWM_Channels_UpdateDuty(HardSw_Duty);

				//Замкнутая система
				HardSw_PWM_Channels_UpdateDuty(Reg_U.Out);
 8002ba8:	4b6b      	ldr	r3, [pc, #428]	; (8002d58 <main_timer_function+0x534>)
 8002baa:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bae:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb2:	f7ff fd3d 	bl	8002630 <HardSw_PWM_Channels_UpdateDuty>

				if(millis() - time_tmp >= T_DELAY_WORK){
 8002bb6:	f000 f944 	bl	8002e42 <millis>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4b62      	ldr	r3, [pc, #392]	; (8002d48 <main_timer_function+0x524>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc6:	d339      	bcc.n	8002c3c <main_timer_function+0x418>

					if(autocomp_enable){
 8002bc8:	4b64      	ldr	r3, [pc, #400]	; (8002d5c <main_timer_function+0x538>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00f      	beq.n	8002bf0 <main_timer_function+0x3cc>
						if(targ_u != zad_u){
 8002bd0:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <main_timer_function+0x53c>)
 8002bd2:	ed93 7a00 	vldr	s14, [r3]
 8002bd6:	4b63      	ldr	r3, [pc, #396]	; (8002d64 <main_timer_function+0x540>)
 8002bd8:	edd3 7a00 	vldr	s15, [r3]
 8002bdc:	eeb4 7a67 	vcmp.f32	s14, s15
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	d013      	beq.n	8002c0e <main_timer_function+0x3ea>
							zad_u = targ_u;
 8002be6:	4b5e      	ldr	r3, [pc, #376]	; (8002d60 <main_timer_function+0x53c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a5e      	ldr	r2, [pc, #376]	; (8002d64 <main_timer_function+0x540>)
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e00e      	b.n	8002c0e <main_timer_function+0x3ea>
						}
					} else {
						if(zad_u_PC != zad_u){
 8002bf0:	4b5d      	ldr	r3, [pc, #372]	; (8002d68 <main_timer_function+0x544>)
 8002bf2:	ed93 7a00 	vldr	s14, [r3]
 8002bf6:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <main_timer_function+0x540>)
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c04:	d003      	beq.n	8002c0e <main_timer_function+0x3ea>
							zad_u = zad_u_PC;
 8002c06:	4b58      	ldr	r3, [pc, #352]	; (8002d68 <main_timer_function+0x544>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a56      	ldr	r2, [pc, #344]	; (8002d64 <main_timer_function+0x540>)
 8002c0c:	6013      	str	r3, [r2, #0]
						}
					}

					if(zad_u >= HV_MAX_VOLT){
 8002c0e:	4b55      	ldr	r3, [pc, #340]	; (8002d64 <main_timer_function+0x540>)
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002d6c <main_timer_function+0x548>
 8002c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c20:	db02      	blt.n	8002c28 <main_timer_function+0x404>
						zad_u = HV_MAX_VOLT;
 8002c22:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <main_timer_function+0x540>)
 8002c24:	4a52      	ldr	r2, [pc, #328]	; (8002d70 <main_timer_function+0x54c>)
 8002c26:	601a      	str	r2, [r3, #0]
					}

					//targ_u = DOWN_TARGET_VOLT*DOWN_TV_KOEF;

					targ_u = down_targ_volt*DOWN_TV_KOEF;
 8002c28:	4b52      	ldr	r3, [pc, #328]	; (8002d74 <main_timer_function+0x550>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	eeb0 7a0a 	vmov.f32	s14, #10	; 0x40500000  3.250
 8002c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c36:	4b4a      	ldr	r3, [pc, #296]	; (8002d60 <main_timer_function+0x53c>)
 8002c38:	edc3 7a00 	vstr	s15, [r3]

				}

			}

			Button_Control(&Button_1, Stop);
 8002c3c:	2105      	movs	r1, #5
 8002c3e:	484e      	ldr	r0, [pc, #312]	; (8002d78 <main_timer_function+0x554>)
 8002c40:	f000 f93c 	bl	8002ebc <Button_Control>
			Button_Control(&PC_Button, Stop);
 8002c44:	2105      	movs	r1, #5
 8002c46:	484d      	ldr	r0, [pc, #308]	; (8002d7c <main_timer_function+0x558>)
 8002c48:	f000 f938 	bl	8002ebc <Button_Control>
		} else {
			State = Stop;
		}


		break;
 8002c4c:	e074      	b.n	8002d38 <main_timer_function+0x514>

	case Stop:

		if(ST_STOP_EN){

			if(State != Old_State){
 8002c4e:	4b3c      	ldr	r3, [pc, #240]	; (8002d40 <main_timer_function+0x51c>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b3c      	ldr	r3, [pc, #240]	; (8002d44 <main_timer_function+0x520>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d027      	beq.n	8002caa <main_timer_function+0x486>
				time_tmp = millis();
 8002c5a:	f000 f8f2 	bl	8002e42 <millis>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4a39      	ldr	r2, [pc, #228]	; (8002d48 <main_timer_function+0x524>)
 8002c62:	6013      	str	r3, [r2, #0]

				EN_PWM_State = OFF;
 8002c64:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <main_timer_function+0x528>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
				//Отключение шима
				SoftSw_PWM_Channels_OFF();
 8002c6a:	f7ff fb07 	bl	800227c <SoftSw_PWM_Channels_OFF>
				SoftSw_PWM_Channels_UpdateDuty(0);
 8002c6e:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8002d54 <main_timer_function+0x530>
 8002c72:	f7ff fb91 	bl	8002398 <SoftSw_PWM_Channels_UpdateDuty>

				HardSw_PWM_Channels_OFF();
 8002c76:	f7ff fcb1 	bl	80025dc <HardSw_PWM_Channels_OFF>
				HardSw_PWM_Channels_UpdateDuty(0);
 8002c7a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8002d54 <main_timer_function+0x530>
 8002c7e:	f7ff fcd7 	bl	8002630 <HardSw_PWM_Channels_UpdateDuty>

				Ramp_Clear(&Ramp_Amp);
 8002c82:	483f      	ldr	r0, [pc, #252]	; (8002d80 <main_timer_function+0x55c>)
 8002c84:	f000 faae 	bl	80031e4 <Ramp_Clear>
				//zad_amp = 0;

				zad_u = 0;
 8002c88:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <main_timer_function+0x540>)
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
				Regulator_Clear(&Reg_U);
 8002c90:	4831      	ldr	r0, [pc, #196]	; (8002d58 <main_timer_function+0x534>)
 8002c92:	f000 fbde 	bl	8003452 <Regulator_Clear>


				DO_1_State = OFF;
 8002c96:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <main_timer_function+0x560>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
				DO_2_State = OFF;
 8002c9c:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <main_timer_function+0x564>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]

				Old_State = State;
 8002ca2:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <main_timer_function+0x51c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <main_timer_function+0x520>)
 8002ca8:	6013      	str	r3, [r2, #0]
			}

			if(Device_Error > 0){
 8002caa:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <main_timer_function+0x568>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <main_timer_function+0x496>
				State = Error;
 8002cb2:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <main_timer_function+0x51c>)
 8002cb4:	2206      	movs	r2, #6
 8002cb6:	601a      	str	r2, [r3, #0]

		} else {
			State = Wait;
		}

		break;
 8002cb8:	e03b      	b.n	8002d32 <main_timer_function+0x50e>
				if(millis() - time_tmp >= T_STOP){
 8002cba:	f000 f8c2 	bl	8002e42 <millis>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <main_timer_function+0x524>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cca:	d332      	bcc.n	8002d32 <main_timer_function+0x50e>
					State = Wait;
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <main_timer_function+0x51c>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
		break;
 8002cd2:	e02e      	b.n	8002d32 <main_timer_function+0x50e>

	case Error:

		if(ST_ERROR_EN){

			if(DO_1_State){
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <main_timer_function+0x560>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <main_timer_function+0x4be>
				DO_1_State = OFF;
 8002cdc:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <main_timer_function+0x560>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
			}

			if(DO_2_State){
 8002ce2:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <main_timer_function+0x564>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <main_timer_function+0x4cc>
				DO_2_State = OFF;
 8002cea:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <main_timer_function+0x564>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
			}

			if(EN_PWM_State){
 8002cf0:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <main_timer_function+0x528>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <main_timer_function+0x4da>
				EN_PWM_State = OFF;
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <main_timer_function+0x528>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
			}

			//На всякий случай ещё раз выключаем шим
			SoftSw_PWM_Channels_OFF();
 8002cfe:	f7ff fabd 	bl	800227c <SoftSw_PWM_Channels_OFF>
			SoftSw_PWM_Channels_UpdateDuty(0);
 8002d02:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8002d54 <main_timer_function+0x530>
 8002d06:	f7ff fb47 	bl	8002398 <SoftSw_PWM_Channels_UpdateDuty>

			HardSw_PWM_Channels_OFF();
 8002d0a:	f7ff fc67 	bl	80025dc <HardSw_PWM_Channels_OFF>
			HardSw_PWM_Channels_UpdateDuty(0);
 8002d0e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002d54 <main_timer_function+0x530>
 8002d12:	f7ff fc8d 	bl	8002630 <HardSw_PWM_Channels_UpdateDuty>

			if(Device_Error == 0){
 8002d16:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <main_timer_function+0x568>)
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10b      	bne.n	8002d36 <main_timer_function+0x512>
				State = Wait;
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <main_timer_function+0x51c>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

		} else {
			State = Wait;
		}

		break;
 8002d24:	e007      	b.n	8002d36 <main_timer_function+0x512>

	default:
		break;
 8002d26:	bf00      	nop
 8002d28:	e006      	b.n	8002d38 <main_timer_function+0x514>
		break;
 8002d2a:	bf00      	nop
 8002d2c:	e004      	b.n	8002d38 <main_timer_function+0x514>
		break;
 8002d2e:	bf00      	nop
 8002d30:	e002      	b.n	8002d38 <main_timer_function+0x514>
		break;
 8002d32:	bf00      	nop
 8002d34:	e000      	b.n	8002d38 <main_timer_function+0x514>
		break;
 8002d36:	bf00      	nop

	}

}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000534 	.word	0x20000534
 8002d44:	200004c4 	.word	0x200004c4
 8002d48:	2000049c 	.word	0x2000049c
 8002d4c:	2000009c 	.word	0x2000009c
 8002d50:	3eb33333 	.word	0x3eb33333
 8002d54:	00000000 	.word	0x00000000
 8002d58:	20000548 	.word	0x20000548
 8002d5c:	2000007c 	.word	0x2000007c
 8002d60:	20000074 	.word	0x20000074
 8002d64:	20000070 	.word	0x20000070
 8002d68:	20000078 	.word	0x20000078
 8002d6c:	44898000 	.word	0x44898000
 8002d70:	44898000 	.word	0x44898000
 8002d74:	20000014 	.word	0x20000014
 8002d78:	200004b4 	.word	0x200004b4
 8002d7c:	200004a4 	.word	0x200004a4
 8002d80:	200005ac 	.word	0x200005ac
 8002d84:	200001a0 	.word	0x200001a0
 8002d88:	2000008c 	.word	0x2000008c
 8002d8c:	20000430 	.word	0x20000430

08002d90 <TIM_NB_Init>:

//-----NON BLOKING TIMER--------------------------------------------------------------------------
void TIM_NB_Init(TIM_NB_TypeDef *timer, uint32_t delay, void (*funptr)) {
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]

	timer->delay = delay;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	609a      	str	r2, [r3, #8]
	timer->function = funptr;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	60da      	str	r2, [r3, #12]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <TIM_NB_Start>:

void TIM_NB_Start(TIM_NB_TypeDef *timer, uint8_t mode) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	70fb      	strb	r3, [r7, #3]

	if (timer->delay != 0) {
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <TIM_NB_Start+0x24>
		timer->counter = millis();
 8002dc8:	f000 f83b 	bl	8002e42 <millis>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	605a      	str	r2, [r3, #4]
		timer->state = mode;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	701a      	strb	r2, [r3, #0]
	}
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <TIM_NB_Check>:
	if (timer->state != STOPPED) {
		timer->state = STOPPED;
	}
}

void TIM_NB_Check(TIM_NB_TypeDef *timer) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

	if (timer->state != STOPPED) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d023      	beq.n	8002e38 <TIM_NB_Check+0x58>
		if (HAL_GetTick() - timer->counter >= timer->delay) {
 8002df0:	f001 fb9e 	bl	8004530 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	1ad2      	subs	r2, r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d319      	bcc.n	8002e38 <TIM_NB_Check+0x58>
			switch (timer->state) {
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d002      	beq.n	8002e12 <TIM_NB_Check+0x32>
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d00a      	beq.n	8002e26 <TIM_NB_Check+0x46>
				timer->function();
				break;
			}
		}
	}
}
 8002e10:	e013      	b.n	8002e3a <TIM_NB_Check+0x5a>
				timer->state = STOPPED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
				timer->counter = 0;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
				timer->function();
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	4798      	blx	r3
				break;
 8002e24:	e009      	b.n	8002e3a <TIM_NB_Check+0x5a>
				timer->counter = HAL_GetTick();
 8002e26:	f001 fb83 	bl	8004530 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	605a      	str	r2, [r3, #4]
				timer->function();
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4798      	blx	r3
				break;
 8002e36:	e000      	b.n	8002e3a <TIM_NB_Check+0x5a>
		}
 8002e38:	bf00      	nop
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <millis>:

uint32_t millis() {
 8002e42:	b580      	push	{r7, lr}
 8002e44:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002e46:	f001 fb73 	bl	8004530 <HAL_GetTick>
 8002e4a:	4603      	mov	r3, r0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <LED_Control>:
//-----NON BLOKING TIMER--------------------------------------------------------------------------

void LED_Control(LED_CMD_TypeDef Cmd, uint32_t Blink_Period, enum_state *LED_Name, uint32_t *LED_cnt) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	73fb      	strb	r3, [r7, #15]

	if (Cmd == LED_OFF) {
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <LED_Control+0x1e>
		*LED_Name = OFF;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
				*LED_Name = ON;
			}
		}
	}

}
 8002e6c:	e022      	b.n	8002eb4 <LED_Control+0x64>
	} else if (Cmd == LED_ON) {
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d103      	bne.n	8002e7c <LED_Control+0x2c>
		*LED_Name = ON;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
}
 8002e7a:	e01b      	b.n	8002eb4 <LED_Control+0x64>
	} else if (Cmd == LED_BLINK) {
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d118      	bne.n	8002eb4 <LED_Control+0x64>
		if (HAL_GetTick() - *LED_cnt >= Blink_Period) {
 8002e82:	f001 fb55 	bl	8004530 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d80f      	bhi.n	8002eb4 <LED_Control+0x64>
			*LED_cnt = HAL_GetTick();
 8002e94:	f001 fb4c 	bl	8004530 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	601a      	str	r2, [r3, #0]
			if (*LED_Name == ON) {
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d103      	bne.n	8002eae <LED_Control+0x5e>
				*LED_Name = OFF;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
}
 8002eac:	e002      	b.n	8002eb4 <LED_Control+0x64>
				*LED_Name = ON;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <Button_Control>:

void Button_Control(Button_TypeDef *Button, uint8_t Target_state){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]

	if((*Button->State == ON) && (Button->Old_State == OFF)){
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d114      	bne.n	8002efc <Button_Control+0x40>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	791b      	ldrb	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d110      	bne.n	8002efc <Button_Control+0x40>
		if(millis() - Button->cnt >= Button->delay){
 8002eda:	f7ff ffb2 	bl	8002e42 <millis>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	1ad2      	subs	r2, r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d314      	bcc.n	8002f18 <Button_Control+0x5c>
			Button->Old_State = ON;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	711a      	strb	r2, [r3, #4]
			State = Target_state;
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <Button_Control+0x64>)
 8002ef8:	6013      	str	r3, [r2, #0]
		if(millis() - Button->cnt >= Button->delay){
 8002efa:	e00d      	b.n	8002f18 <Button_Control+0x5c>
		}
	} else {
		if(*Button->State == OFF){
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <Button_Control+0x50>
			Button->Old_State = OFF;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	711a      	strb	r2, [r3, #4]
		}
		Button->cnt = millis();
 8002f0c:	f7ff ff99 	bl	8002e42 <millis>
 8002f10:	4602      	mov	r2, r0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	609a      	str	r2, [r3, #8]
	}

}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000534 	.word	0x20000534

08002f24 <Device_Indication_Process>:

void Device_Indication_Process(){
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0

	if (State == Work)
 8002f28:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <Device_Indication_Process+0x78>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d106      	bne.n	8002f3e <Device_Indication_Process+0x1a>
		LED_Control(LED_ON, 0, &LED_1_State, &LED_1_Cnt);
 8002f30:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <Device_Indication_Process+0x7c>)
 8002f32:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <Device_Indication_Process+0x80>)
 8002f34:	2100      	movs	r1, #0
 8002f36:	2001      	movs	r0, #1
 8002f38:	f7ff ff8a 	bl	8002e50 <LED_Control>
	else if (State == Error)
		LED_Control(LED_OFF, 0, &LED_1_State, &LED_1_Cnt);
	else
		LED_Control(LED_OFF, 0, &LED_1_State, &LED_1_Cnt);

}
 8002f3c:	e02b      	b.n	8002f96 <Device_Indication_Process+0x72>
	else if ((State == Delay) || (State == PreCharge))
 8002f3e:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <Device_Indication_Process+0x78>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d003      	beq.n	8002f4e <Device_Indication_Process+0x2a>
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <Device_Indication_Process+0x78>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d106      	bne.n	8002f5c <Device_Indication_Process+0x38>
		LED_Control(LED_BLINK, 100, &LED_1_State, &LED_1_Cnt);
 8002f4e:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <Device_Indication_Process+0x7c>)
 8002f50:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <Device_Indication_Process+0x80>)
 8002f52:	2164      	movs	r1, #100	; 0x64
 8002f54:	2002      	movs	r0, #2
 8002f56:	f7ff ff7b 	bl	8002e50 <LED_Control>
}
 8002f5a:	e01c      	b.n	8002f96 <Device_Indication_Process+0x72>
	else if (State == Wait)
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <Device_Indication_Process+0x78>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <Device_Indication_Process+0x50>
		LED_Control(LED_BLINK, 500, &LED_1_State, &LED_1_Cnt);
 8002f64:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <Device_Indication_Process+0x7c>)
 8002f66:	4a0f      	ldr	r2, [pc, #60]	; (8002fa4 <Device_Indication_Process+0x80>)
 8002f68:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002f6c:	2002      	movs	r0, #2
 8002f6e:	f7ff ff6f 	bl	8002e50 <LED_Control>
}
 8002f72:	e010      	b.n	8002f96 <Device_Indication_Process+0x72>
	else if (State == Error)
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <Device_Indication_Process+0x78>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d106      	bne.n	8002f8a <Device_Indication_Process+0x66>
		LED_Control(LED_OFF, 0, &LED_1_State, &LED_1_Cnt);
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <Device_Indication_Process+0x7c>)
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <Device_Indication_Process+0x80>)
 8002f80:	2100      	movs	r1, #0
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7ff ff64 	bl	8002e50 <LED_Control>
}
 8002f88:	e005      	b.n	8002f96 <Device_Indication_Process+0x72>
		LED_Control(LED_OFF, 0, &LED_1_State, &LED_1_Cnt);
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <Device_Indication_Process+0x7c>)
 8002f8c:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <Device_Indication_Process+0x80>)
 8002f8e:	2100      	movs	r1, #0
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7ff ff5d 	bl	8002e50 <LED_Control>
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000534 	.word	0x20000534
 8002fa0:	20000198 	.word	0x20000198
 8002fa4:	200000aa 	.word	0x200000aa

08002fa8 <ModbusRTU_Init_AO>:
	}

}

void ModbusRTU_Init_AO ()
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
	// Определение переменных AO
	for(uint8_t i = 0; i < ADR_MAX_AO; i++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	71fb      	strb	r3, [r7, #7]
 8002fb2:	e00a      	b.n	8002fca <ModbusRTU_Init_AO+0x22>
	{
		DATA_AO[i] = &DATA_AO_buf[i];
 8002fb4:	79fa      	ldrb	r2, [r7, #7]
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	0052      	lsls	r2, r2, #1
 8002fba:	4909      	ldr	r1, [pc, #36]	; (8002fe0 <ModbusRTU_Init_AO+0x38>)
 8002fbc:	440a      	add	r2, r1
 8002fbe:	4909      	ldr	r1, [pc, #36]	; (8002fe4 <ModbusRTU_Init_AO+0x3c>)
 8002fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0; i < ADR_MAX_AO; i++)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	71fb      	strb	r3, [r7, #7]
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	2b09      	cmp	r3, #9
 8002fce:	d9f1      	bls.n	8002fb4 <ModbusRTU_Init_AO+0xc>
	}
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000048 	.word	0x20000048
 8002fe4:	20000288 	.word	0x20000288

08002fe8 <ModbusRTU_Init_AI>:

void ModbusRTU_Init_AI ()
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
	// Определение переменных AI
	for(uint8_t i = 0; i < ADR_MAX_AI; i++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	71fb      	strb	r3, [r7, #7]
 8002ff2:	e00a      	b.n	800300a <ModbusRTU_Init_AI+0x22>
	{
		DATA_AI[i] = &DATA_AI_buf[i];
 8002ff4:	79fa      	ldrb	r2, [r7, #7]
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	0052      	lsls	r2, r2, #1
 8002ffa:	4909      	ldr	r1, [pc, #36]	; (8003020 <ModbusRTU_Init_AI+0x38>)
 8002ffc:	440a      	add	r2, r1
 8002ffe:	4909      	ldr	r1, [pc, #36]	; (8003024 <ModbusRTU_Init_AI+0x3c>)
 8003000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0; i < ADR_MAX_AI; i++)
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	3301      	adds	r3, #1
 8003008:	71fb      	strb	r3, [r7, #7]
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b09      	cmp	r3, #9
 800300e:	d9f1      	bls.n	8002ff4 <ModbusRTU_Init_AI+0xc>
	}
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	2000005c 	.word	0x2000005c
 8003024:	200002b8 	.word	0x200002b8

08003028 <ModbusRTU_update_reg>:

void ModbusRTU_update_reg()
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
	int16_t  tmp_int16 = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp_uint16 = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	80fb      	strh	r3, [r7, #6]

	// Read reg mdb
	// State machine for modbus
	switch (State)
 8003036:	4b49      	ldr	r3, [pc, #292]	; (800315c <ModbusRTU_update_reg+0x134>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b06      	cmp	r3, #6
 800303c:	d825      	bhi.n	800308a <ModbusRTU_update_reg+0x62>
 800303e:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <ModbusRTU_update_reg+0x1c>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003061 	.word	0x08003061
 8003048:	08003067 	.word	0x08003067
 800304c:	0800306d 	.word	0x0800306d
 8003050:	08003073 	.word	0x08003073
 8003054:	08003079 	.word	0x08003079
 8003058:	0800307f 	.word	0x0800307f
 800305c:	08003085 	.word	0x08003085
	{
	case Init:
		tmp_uint16 = 0b0000000000000001;
 8003060:	2301      	movs	r3, #1
 8003062:	80fb      	strh	r3, [r7, #6]
		break;
 8003064:	e012      	b.n	800308c <ModbusRTU_update_reg+0x64>
	case Wait:
		tmp_uint16 = 0b0000000000000010;
 8003066:	2302      	movs	r3, #2
 8003068:	80fb      	strh	r3, [r7, #6]
		break;
 800306a:	e00f      	b.n	800308c <ModbusRTU_update_reg+0x64>
	case PreCharge:
		tmp_uint16 = 0b0000000000000100;
 800306c:	2304      	movs	r3, #4
 800306e:	80fb      	strh	r3, [r7, #6]
		break;
 8003070:	e00c      	b.n	800308c <ModbusRTU_update_reg+0x64>
	case Delay:
		tmp_uint16 = 0b0000000000001000;
 8003072:	2308      	movs	r3, #8
 8003074:	80fb      	strh	r3, [r7, #6]
		break;
 8003076:	e009      	b.n	800308c <ModbusRTU_update_reg+0x64>
	case Work:
		tmp_uint16 = 0b0000000000010000;
 8003078:	2310      	movs	r3, #16
 800307a:	80fb      	strh	r3, [r7, #6]
		break;
 800307c:	e006      	b.n	800308c <ModbusRTU_update_reg+0x64>
	case Stop:
		tmp_uint16 = 0b0000000000100000;
 800307e:	2320      	movs	r3, #32
 8003080:	80fb      	strh	r3, [r7, #6]
		break;
 8003082:	e003      	b.n	800308c <ModbusRTU_update_reg+0x64>
	case Error:
		tmp_uint16 = 0b0000000001000000;
 8003084:	2340      	movs	r3, #64	; 0x40
 8003086:	80fb      	strh	r3, [r7, #6]
		break;
 8003088:	e000      	b.n	800308c <ModbusRTU_update_reg+0x64>
	default:
		break;
 800308a:	bf00      	nop
	}
	DATA_AI_buf[0] = tmp_uint16;
 800308c:	4a34      	ldr	r2, [pc, #208]	; (8003160 <ModbusRTU_update_reg+0x138>)
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	8013      	strh	r3, [r2, #0]

	// State dout for modbus
	if (DO_1_State)   { tmp_uint16 |=  0b0000000000000001; }
 8003092:	4b34      	ldr	r3, [pc, #208]	; (8003164 <ModbusRTU_update_reg+0x13c>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <ModbusRTU_update_reg+0x7c>
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	80fb      	strh	r3, [r7, #6]
 80030a2:	e003      	b.n	80030ac <ModbusRTU_update_reg+0x84>
	else              { tmp_uint16 &= ~0b0000000000000001; }
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	80fb      	strh	r3, [r7, #6]

	if (DO_2_State)   { tmp_uint16 |=  0b0000000000000010; }
 80030ac:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <ModbusRTU_update_reg+0x140>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <ModbusRTU_update_reg+0x96>
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	f043 0302 	orr.w	r3, r3, #2
 80030ba:	80fb      	strh	r3, [r7, #6]
 80030bc:	e003      	b.n	80030c6 <ModbusRTU_update_reg+0x9e>
	else              { tmp_uint16 &= ~0b0000000000000010; }
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	f023 0302 	bic.w	r3, r3, #2
 80030c4:	80fb      	strh	r3, [r7, #6]

	if (EN_PWM_State) { tmp_uint16 |=  0b0000000000000100; }
 80030c6:	4b29      	ldr	r3, [pc, #164]	; (800316c <ModbusRTU_update_reg+0x144>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d004      	beq.n	80030d8 <ModbusRTU_update_reg+0xb0>
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	80fb      	strh	r3, [r7, #6]
 80030d6:	e003      	b.n	80030e0 <ModbusRTU_update_reg+0xb8>
	else              { tmp_uint16 &= ~0b0000000000000100; }
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	f023 0304 	bic.w	r3, r3, #4
 80030de:	80fb      	strh	r3, [r7, #6]
	DATA_AI_buf[1] = tmp_uint16;
 80030e0:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <ModbusRTU_update_reg+0x138>)
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	8053      	strh	r3, [r2, #2]

	// Erorr
	DATA_AI_buf[2] = Device_Error;
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <ModbusRTU_update_reg+0x148>)
 80030e8:	881a      	ldrh	r2, [r3, #0]
 80030ea:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <ModbusRTU_update_reg+0x138>)
 80030ec:	809a      	strh	r2, [r3, #4]

	// U
	tmp_int16 = U_Instant;
 80030ee:	4b21      	ldr	r3, [pc, #132]	; (8003174 <ModbusRTU_update_reg+0x14c>)
 80030f0:	edd3 7a00 	vldr	s15, [r3]
 80030f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030f8:	ee17 3a90 	vmov	r3, s15
 80030fc:	80bb      	strh	r3, [r7, #4]
	DATA_AI_buf[3] = (uint16_t)tmp_int16;
 80030fe:	88ba      	ldrh	r2, [r7, #4]
 8003100:	4b17      	ldr	r3, [pc, #92]	; (8003160 <ModbusRTU_update_reg+0x138>)
 8003102:	80da      	strh	r2, [r3, #6]

	// I
	tmp_int16 = I_Instant;
 8003104:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <ModbusRTU_update_reg+0x150>)
 8003106:	edd3 7a00 	vldr	s15, [r3]
 800310a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800310e:	ee17 3a90 	vmov	r3, s15
 8003112:	80bb      	strh	r3, [r7, #4]
	DATA_AI_buf[4] = (uint16_t)tmp_int16;
 8003114:	88ba      	ldrh	r2, [r7, #4]
 8003116:	4b12      	ldr	r3, [pc, #72]	; (8003160 <ModbusRTU_update_reg+0x138>)
 8003118:	811a      	strh	r2, [r3, #8]

	// Reg_U.Out
	tmp_int16 = Reg_U.Out;
 800311a:	4b18      	ldr	r3, [pc, #96]	; (800317c <ModbusRTU_update_reg+0x154>)
 800311c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003124:	ee17 3a90 	vmov	r3, s15
 8003128:	80bb      	strh	r3, [r7, #4]
	DATA_AI_buf[5] = (uint16_t)tmp_int16;
 800312a:	88ba      	ldrh	r2, [r7, #4]
 800312c:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <ModbusRTU_update_reg+0x138>)
 800312e:	815a      	strh	r2, [r3, #10]
	PC_Start_flag = DATA_AO_buf[0];
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <ModbusRTU_update_reg+0x158>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <ModbusRTU_update_reg+0x15c>)
 8003138:	701a      	strb	r2, [r3, #0]


	// Write reg mdb
	if (DATA_AO_buf[0] == 1)
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <ModbusRTU_update_reg+0x158>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d103      	bne.n	800314a <ModbusRTU_update_reg+0x122>
	{
		PC_Start_flag = 1;
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <ModbusRTU_update_reg+0x15c>)
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
	else
	{
		PC_Start_flag = 0;
	}

	return;
 8003148:	e003      	b.n	8003152 <ModbusRTU_update_reg+0x12a>
		PC_Start_flag = 0;
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <ModbusRTU_update_reg+0x15c>)
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
	return;
 8003150:	bf00      	nop
}
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	20000534 	.word	0x20000534
 8003160:	2000005c 	.word	0x2000005c
 8003164:	200001a0 	.word	0x200001a0
 8003168:	2000008c 	.word	0x2000008c
 800316c:	2000009c 	.word	0x2000009c
 8003170:	20000430 	.word	0x20000430
 8003174:	20000088 	.word	0x20000088
 8003178:	200000b0 	.word	0x200000b0
 800317c:	20000548 	.word	0x20000548
 8003180:	20000048 	.word	0x20000048
 8003184:	2000007d 	.word	0x2000007d

08003188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800318c:	b672      	cpsid	i
}
 800318e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003190:	e7fe      	b.n	8003190 <Error_Handler+0x8>

08003192 <Ramp_Init>:
 * uplimit - верхний предел
 * downlimit - нижний предел
 * step - число, которое прибавляется/вычитается из in на каждом проходе
 * pass - сколько циклов таймера рампа пропускает
 * */
void Ramp_Init(Ramp_Struct *Ramp, float *in, float uplimit, float downlimit, float step, uint16_t pass) {
 8003192:	b480      	push	{r7}
 8003194:	b087      	sub	sp, #28
 8003196:	af00      	add	r7, sp, #0
 8003198:	6178      	str	r0, [r7, #20]
 800319a:	6139      	str	r1, [r7, #16]
 800319c:	ed87 0a03 	vstr	s0, [r7, #12]
 80031a0:	edc7 0a02 	vstr	s1, [r7, #8]
 80031a4:	ed87 1a01 	vstr	s2, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	807b      	strh	r3, [r7, #2]

	Ramp->In = in;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	60da      	str	r2, [r3, #12]
	Ramp->Counter = 0;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2200      	movs	r2, #0
 80031b6:	801a      	strh	r2, [r3, #0]
	Ramp->Pass = pass;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	805a      	strh	r2, [r3, #2]
	Ramp->DownLimit = downlimit;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	615a      	str	r2, [r3, #20]
	Ramp->Out = 0;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
	Ramp->Step = step;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	605a      	str	r2, [r3, #4]
	Ramp->UpLimit = uplimit;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	611a      	str	r2, [r3, #16]

}
 80031d8:	bf00      	nop
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <Ramp_Clear>:
/*
 * Функция очистки рампы
 * *Ramp - Указатель на структуру рампы подлежащей очистке
 * */
void Ramp_Clear(Ramp_Struct *Ramp) {
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

	Ramp->Counter = 0;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	801a      	strh	r2, [r3, #0]
	Ramp->Out = 0;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]

}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <Ramp_Process>:

/*
 * Функция работы рампы
 * *Ramp - Указатель на структуру рампы которая работает
 * */
void Ramp_Process(Ramp_Struct *Ramp) {
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]

	if (Ramp->Counter < Ramp->Pass) {
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	881a      	ldrh	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	885b      	ldrh	r3, [r3, #2]
 8003216:	429a      	cmp	r2, r3
 8003218:	d206      	bcs.n	8003228 <Ramp_Process+0x22>
		Ramp->Counter++;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	3301      	adds	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	801a      	strh	r2, [r3, #0]
		 }

		Ramp->Counter = 0;
	}

}
 8003226:	e0ce      	b.n	80033c6 <Ramp_Process+0x1c0>
		 if ((Ramp->Out < *Ramp->In) && (Ramp->Out >= 0)) {
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	ed93 7a02 	vldr	s14, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	edd3 7a00 	vldr	s15, [r3]
 8003236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323e:	d52a      	bpl.n	8003296 <Ramp_Process+0x90>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	edd3 7a02 	vldr	s15, [r3, #8]
 8003246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800324a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324e:	db22      	blt.n	8003296 <Ramp_Process+0x90>
			 if((Ramp->Out + Ramp->Step) < *Ramp->In){
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	ed93 7a02 	vldr	s14, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	edd3 7a01 	vldr	s15, [r3, #4]
 800325c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	d50b      	bpl.n	800328a <Ramp_Process+0x84>
				 Ramp->Out += Ramp->Step;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	ed93 7a02 	vldr	s14, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	edd3 7a01 	vldr	s15, [r3, #4]
 800327e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	edc3 7a02 	vstr	s15, [r3, #8]
			 if((Ramp->Out + Ramp->Step) < *Ramp->In){
 8003288:	e07b      	b.n	8003382 <Ramp_Process+0x17c>
				 Ramp->Out = *Ramp->In;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	609a      	str	r2, [r3, #8]
			 if((Ramp->Out + Ramp->Step) < *Ramp->In){
 8003294:	e075      	b.n	8003382 <Ramp_Process+0x17c>
		 } else if ((Ramp->Out > *Ramp->In) && (Ramp->Out > 0)) {
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	ed93 7a02 	vldr	s14, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ac:	dd13      	ble.n	80032d6 <Ramp_Process+0xd0>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80032b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032bc:	dd0b      	ble.n	80032d6 <Ramp_Process+0xd0>
		 Ramp->Out -= Ramp->Step;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80032ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	edc3 7a02 	vstr	s15, [r3, #8]
 80032d4:	e055      	b.n	8003382 <Ramp_Process+0x17c>
		 } else if ((Ramp->Out > *Ramp->In) && (Ramp->Out <= 0)) {
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	edd3 7a00 	vldr	s15, [r3]
 80032e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ec:	dd2a      	ble.n	8003344 <Ramp_Process+0x13e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80032f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fc:	d822      	bhi.n	8003344 <Ramp_Process+0x13e>
			 if((Ramp->Out + Ramp->Step) > *Ramp->In){
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	ed93 7a02 	vldr	s14, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	edd3 7a01 	vldr	s15, [r3, #4]
 800330a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	edd3 7a00 	vldr	s15, [r3]
 8003316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331e:	dd0b      	ble.n	8003338 <Ramp_Process+0x132>
			 				 Ramp->Out -= Ramp->Step;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	ed93 7a02 	vldr	s14, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	edd3 7a01 	vldr	s15, [r3, #4]
 800332c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	edc3 7a02 	vstr	s15, [r3, #8]
			 if((Ramp->Out + Ramp->Step) > *Ramp->In){
 8003336:	e024      	b.n	8003382 <Ramp_Process+0x17c>
			 				 Ramp->Out = *Ramp->In;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	609a      	str	r2, [r3, #8]
			 if((Ramp->Out + Ramp->Step) > *Ramp->In){
 8003342:	e01e      	b.n	8003382 <Ramp_Process+0x17c>
		 } else if ((Ramp->Out < *Ramp->In) && (Ramp->Out < 0)) {
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	ed93 7a02 	vldr	s14, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335a:	d512      	bpl.n	8003382 <Ramp_Process+0x17c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336a:	d50a      	bpl.n	8003382 <Ramp_Process+0x17c>
		 Ramp->Out += Ramp->Step;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	edd3 7a01 	vldr	s15, [r3, #4]
 8003378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	edc3 7a02 	vstr	s15, [r3, #8]
		 if (Ramp->Out >= Ramp->UpLimit){
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	ed93 7a02 	vldr	s14, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	edd3 7a04 	vldr	s15, [r3, #16]
 800338e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003396:	db04      	blt.n	80033a2 <Ramp_Process+0x19c>
		 Ramp->Out = Ramp->UpLimit;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	e00e      	b.n	80033c0 <Ramp_Process+0x1ba>
		 } else if (Ramp->Out <= Ramp->DownLimit){
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80033ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	d803      	bhi.n	80033c0 <Ramp_Process+0x1ba>
		 Ramp->Out = Ramp->DownLimit;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	609a      	str	r2, [r3, #8]
		Ramp->Counter = 0;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	801a      	strh	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <Regulator_Init>:

void Regulator_Init(PI_Reg_Struct *Reg, float *in, float *fb, float k_p, float k_i, float I_uplimit, float I_downlimit, float uplimit, float downlimit) {
 80033d2:	b480      	push	{r7}
 80033d4:	b08b      	sub	sp, #44	; 0x2c
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6278      	str	r0, [r7, #36]	; 0x24
 80033da:	6239      	str	r1, [r7, #32]
 80033dc:	61fa      	str	r2, [r7, #28]
 80033de:	ed87 0a06 	vstr	s0, [r7, #24]
 80033e2:	edc7 0a05 	vstr	s1, [r7, #20]
 80033e6:	ed87 1a04 	vstr	s2, [r7, #16]
 80033ea:	edc7 1a03 	vstr	s3, [r7, #12]
 80033ee:	ed87 2a02 	vstr	s4, [r7, #8]
 80033f2:	edc7 2a01 	vstr	s5, [r7, #4]

	Reg->Fb = fb;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	619a      	str	r2, [r3, #24]
	Reg->DownLimit = downlimit;
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24
	Reg->I = 0;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
	Reg->I_DownLimit = I_downlimit;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c
	Reg->I_UpLimit = I_uplimit;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	629a      	str	r2, [r3, #40]	; 0x28
	Reg->In = in;
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	615a      	str	r2, [r3, #20]
	Reg->Out = 0;
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	611a      	str	r2, [r3, #16]
	Reg->P = 0;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	605a      	str	r2, [r3, #4]
	Reg->UpLimit = uplimit;
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	621a      	str	r2, [r3, #32]
	Reg->d = 0;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	61da      	str	r2, [r3, #28]
	Reg->k_I = k_i;
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	609a      	str	r2, [r3, #8]
	Reg->k_P = k_p;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	60da      	str	r2, [r3, #12]

}
 8003446:	bf00      	nop
 8003448:	372c      	adds	r7, #44	; 0x2c
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <Regulator_Clear>:

void Regulator_Clear(PI_Reg_Struct *Reg) {
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]

	Reg->I = 0;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
	Reg->Out = 0;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	611a      	str	r2, [r3, #16]
	Reg->P = 0;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	605a      	str	r2, [r3, #4]
	Reg->d = 0;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	61da      	str	r2, [r3, #28]

}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <Regulator_Process>:

void Regulator_Process(PI_Reg_Struct *Reg) {
 8003488:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]

	Reg->d = *Reg->In - *Reg->Fb;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	ed93 7a00 	vldr	s14, [r3]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	edd3 7a00 	vldr	s15, [r3]
 80034a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	edc3 7a07 	vstr	s15, [r3, #28]

	Reg->I += TIMER_PERIOD * Reg->k_I * Reg->d;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fc ffed 	bl	8000490 <__aeabi_f2d>
 80034b6:	4604      	mov	r4, r0
 80034b8:	460d      	mov	r5, r1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fc ffe6 	bl	8000490 <__aeabi_f2d>
 80034c4:	a33e      	add	r3, pc, #248	; (adr r3, 80035c0 <Regulator_Process+0x138>)
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	f7fd f839 	bl	8000540 <__aeabi_dmul>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4690      	mov	r8, r2
 80034d4:	4699      	mov	r9, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fc ffd8 	bl	8000490 <__aeabi_f2d>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4640      	mov	r0, r8
 80034e6:	4649      	mov	r1, r9
 80034e8:	f7fd f82a 	bl	8000540 <__aeabi_dmul>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4620      	mov	r0, r4
 80034f2:	4629      	mov	r1, r5
 80034f4:	f7fc fe6e 	bl	80001d4 <__adddf3>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4610      	mov	r0, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	f7fd fa30 	bl	8000964 <__aeabi_d2f>
 8003504:	4602      	mov	r2, r0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	601a      	str	r2, [r3, #0]
	if (Reg->I < Reg->I_DownLimit)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	ed93 7a00 	vldr	s14, [r3]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800351a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351e:	d504      	bpl.n	800352a <Regulator_Process+0xa2>
		Reg->I = Reg->I_DownLimit;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e00e      	b.n	8003548 <Regulator_Process+0xc0>
	else if (Reg->I > Reg->I_UpLimit)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	ed93 7a00 	vldr	s14, [r3]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003536:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800353a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353e:	dd03      	ble.n	8003548 <Regulator_Process+0xc0>
		Reg->I = Reg->I_UpLimit;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	601a      	str	r2, [r3, #0]

	Reg->P = Reg->k_P * Reg->d;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	ed93 7a03 	vldr	s14, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	edd3 7a07 	vldr	s15, [r3, #28]
 8003554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	edc3 7a01 	vstr	s15, [r3, #4]

	Reg->Out = Reg->P + Reg->I;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	ed93 7a01 	vldr	s14, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	edd3 7a00 	vldr	s15, [r3]
 800356a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	edc3 7a04 	vstr	s15, [r3, #16]
	if (Reg->Out < Reg->DownLimit)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	ed93 7a04 	vldr	s14, [r3, #16]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003588:	d504      	bpl.n	8003594 <Regulator_Process+0x10c>
		Reg->Out = Reg->DownLimit;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	611a      	str	r2, [r3, #16]
	else if (Reg->Out > Reg->UpLimit)
		Reg->Out = Reg->UpLimit;

}
 8003592:	e00f      	b.n	80035b4 <Regulator_Process+0x12c>
	else if (Reg->Out > Reg->UpLimit)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	ed93 7a04 	vldr	s14, [r3, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	edd3 7a08 	vldr	s15, [r3, #32]
 80035a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	dc00      	bgt.n	80035ac <Regulator_Process+0x124>
}
 80035aa:	e003      	b.n	80035b4 <Regulator_Process+0x12c>
		Reg->Out = Reg->UpLimit;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	611a      	str	r2, [r3, #16]
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035be:	bf00      	nop
 80035c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80035c4:	3f10624d 	.word	0x3f10624d

080035c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	607b      	str	r3, [r7, #4]
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <HAL_MspInit+0x4c>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <HAL_MspInit+0x4c>)
 80035d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035dc:	6453      	str	r3, [r2, #68]	; 0x44
 80035de:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <HAL_MspInit+0x4c>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e6:	607b      	str	r3, [r7, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_MspInit+0x4c>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	4a08      	ldr	r2, [pc, #32]	; (8003614 <HAL_MspInit+0x4c>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6413      	str	r3, [r2, #64]	; 0x40
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_MspInit+0x4c>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800

08003618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800361c:	e7fe      	b.n	800361c <NMI_Handler+0x4>

0800361e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003622:	e7fe      	b.n	8003622 <HardFault_Handler+0x4>

08003624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003628:	e7fe      	b.n	8003628 <MemManage_Handler+0x4>

0800362a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800362e:	e7fe      	b.n	800362e <BusFault_Handler+0x4>

08003630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003634:	e7fe      	b.n	8003634 <UsageFault_Handler+0x4>

08003636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003652:	b480      	push	{r7}
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003664:	f000 ff50 	bl	8004508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}

0800366c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003672:	f003 f806 	bl	8006682 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	2000069c 	.word	0x2000069c

08003680 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim1,TIM_IT_CC2)){
 8003684:	4b41      	ldr	r3, [pc, #260]	; (800378c <TIM1_CC_IRQHandler+0x10c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b04      	cmp	r3, #4
 8003690:	d123      	bne.n	80036da <TIM1_CC_IRQHandler+0x5a>
		__HAL_TIM_DISABLE(&htim2);
 8003692:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <TIM1_CC_IRQHandler+0x110>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a1a      	ldr	r2, [r3, #32]
 8003698:	f241 1311 	movw	r3, #4369	; 0x1111
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <TIM1_CC_IRQHandler+0x42>
 80036a2:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <TIM1_CC_IRQHandler+0x110>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a1a      	ldr	r2, [r3, #32]
 80036a8:	f240 4344 	movw	r3, #1092	; 0x444
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d107      	bne.n	80036c2 <TIM1_CC_IRQHandler+0x42>
 80036b2:	4b37      	ldr	r3, [pc, #220]	; (8003790 <TIM1_CC_IRQHandler+0x110>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b35      	ldr	r3, [pc, #212]	; (8003790 <TIM1_CC_IRQHandler+0x110>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
		TIM2->CNT = 0;
 80036c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036c6:	2200      	movs	r2, #0
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE(&htim2);
 80036ca:	4b31      	ldr	r3, [pc, #196]	; (8003790 <TIM1_CC_IRQHandler+0x110>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <TIM1_CC_IRQHandler+0x110>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
	}

	if(__HAL_TIM_GET_FLAG(&htim1,TIM_IT_CC3)){
 80036da:	4b2c      	ldr	r3, [pc, #176]	; (800378c <TIM1_CC_IRQHandler+0x10c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d122      	bne.n	800372e <TIM1_CC_IRQHandler+0xae>
		__HAL_TIM_DISABLE(&htim3);
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <TIM1_CC_IRQHandler+0x114>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6a1a      	ldr	r2, [r3, #32]
 80036ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10f      	bne.n	8003718 <TIM1_CC_IRQHandler+0x98>
 80036f8:	4b26      	ldr	r3, [pc, #152]	; (8003794 <TIM1_CC_IRQHandler+0x114>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a1a      	ldr	r2, [r3, #32]
 80036fe:	f240 4344 	movw	r3, #1092	; 0x444
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d107      	bne.n	8003718 <TIM1_CC_IRQHandler+0x98>
 8003708:	4b22      	ldr	r3, [pc, #136]	; (8003794 <TIM1_CC_IRQHandler+0x114>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <TIM1_CC_IRQHandler+0x114>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
		TIM3->CNT = 0;
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <TIM1_CC_IRQHandler+0x118>)
 800371a:	2200      	movs	r2, #0
 800371c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE(&htim3);
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <TIM1_CC_IRQHandler+0x114>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <TIM1_CC_IRQHandler+0x114>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
	}

	if(__HAL_TIM_GET_FLAG(&htim1,TIM_IT_CC4)){
 800372e:	4b17      	ldr	r3, [pc, #92]	; (800378c <TIM1_CC_IRQHandler+0x10c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b10      	cmp	r3, #16
 800373a:	d122      	bne.n	8003782 <TIM1_CC_IRQHandler+0x102>
		__HAL_TIM_DISABLE(&htim9);
 800373c:	4b17      	ldr	r3, [pc, #92]	; (800379c <TIM1_CC_IRQHandler+0x11c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6a1a      	ldr	r2, [r3, #32]
 8003742:	f241 1311 	movw	r3, #4369	; 0x1111
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10f      	bne.n	800376c <TIM1_CC_IRQHandler+0xec>
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <TIM1_CC_IRQHandler+0x11c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6a1a      	ldr	r2, [r3, #32]
 8003752:	f240 4344 	movw	r3, #1092	; 0x444
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d107      	bne.n	800376c <TIM1_CC_IRQHandler+0xec>
 800375c:	4b0f      	ldr	r3, [pc, #60]	; (800379c <TIM1_CC_IRQHandler+0x11c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <TIM1_CC_IRQHandler+0x11c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
		TIM9->CNT = 0;
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <TIM1_CC_IRQHandler+0x120>)
 800376e:	2200      	movs	r2, #0
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE(&htim9);
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <TIM1_CC_IRQHandler+0x11c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <TIM1_CC_IRQHandler+0x11c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003782:	4802      	ldr	r0, [pc, #8]	; (800378c <TIM1_CC_IRQHandler+0x10c>)
 8003784:	f002 ff7d 	bl	8006682 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003788:	bf00      	nop
 800378a:	bd80      	pop	{r7, pc}
 800378c:	2000069c 	.word	0x2000069c
 8003790:	2000072c 	.word	0x2000072c
 8003794:	20000654 	.word	0x20000654
 8003798:	40000400 	.word	0x40000400
 800379c:	200006e4 	.word	0x200006e4
 80037a0:	40014000 	.word	0x40014000

080037a4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80037a8:	4802      	ldr	r0, [pc, #8]	; (80037b4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80037aa:	f002 ff6a 	bl	8006682 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	200005c4 	.word	0x200005c4

080037b8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim8,TIM_IT_CC2)){
 80037bc:	4b17      	ldr	r3, [pc, #92]	; (800381c <TIM8_CC_IRQHandler+0x64>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d122      	bne.n	8003810 <TIM8_CC_IRQHandler+0x58>
		__HAL_TIM_DISABLE(&htim12);
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <TIM8_CC_IRQHandler+0x68>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <TIM8_CC_IRQHandler+0x42>
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <TIM8_CC_IRQHandler+0x68>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	f240 4344 	movw	r3, #1092	; 0x444
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d107      	bne.n	80037fa <TIM8_CC_IRQHandler+0x42>
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <TIM8_CC_IRQHandler+0x68>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <TIM8_CC_IRQHandler+0x68>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
		TIM12->CNT = 0;
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <TIM8_CC_IRQHandler+0x6c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE(&htim12);
 8003800:	4b07      	ldr	r3, [pc, #28]	; (8003820 <TIM8_CC_IRQHandler+0x68>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <TIM8_CC_IRQHandler+0x68>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003810:	4802      	ldr	r0, [pc, #8]	; (800381c <TIM8_CC_IRQHandler+0x64>)
 8003812:	f002 ff36 	bl	8006682 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200005c4 	.word	0x200005c4
 8003820:	20000774 	.word	0x20000774
 8003824:	40001800 	.word	0x40001800

08003828 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	ModbusRTU_Handler();
 800382c:	f7fd fd80 	bl	8001330 <ModbusRTU_Handler>
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003830:	4802      	ldr	r0, [pc, #8]	; (800383c <UART5_IRQHandler+0x14>)
 8003832:	f004 f875 	bl	8007920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200007bc 	.word	0x200007bc

08003840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <SystemInit+0x28>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	4a07      	ldr	r2, [pc, #28]	; (8003868 <SystemInit+0x28>)
 800384c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <SystemInit+0x28>)
 8003856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800385a:	609a      	str	r2, [r3, #8]
#endif
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b096      	sub	sp, #88	; 0x58
 8003870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003872:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	605a      	str	r2, [r3, #4]
 800387c:	609a      	str	r2, [r3, #8]
 800387e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003880:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800388a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	609a      	str	r2, [r3, #8]
 8003896:	60da      	str	r2, [r3, #12]
 8003898:	611a      	str	r2, [r3, #16]
 800389a:	615a      	str	r2, [r3, #20]
 800389c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	2220      	movs	r2, #32
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f004 fec7 	bl	8008638 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038aa:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <MX_TIM1_Init+0x138>)
 80038ac:	4a3e      	ldr	r2, [pc, #248]	; (80039a8 <MX_TIM1_Init+0x13c>)
 80038ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 80038b0:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <MX_TIM1_Init+0x138>)
 80038b2:	2203      	movs	r2, #3
 80038b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b6:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <MX_TIM1_Init+0x138>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400-1;
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <MX_TIM1_Init+0x138>)
 80038be:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80038c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c4:	4b37      	ldr	r3, [pc, #220]	; (80039a4 <MX_TIM1_Init+0x138>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80038ca:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <MX_TIM1_Init+0x138>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038d0:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <MX_TIM1_Init+0x138>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80038d6:	4833      	ldr	r0, [pc, #204]	; (80039a4 <MX_TIM1_Init+0x138>)
 80038d8:	f002 fc30 	bl	800613c <HAL_TIM_Base_Init>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80038e2:	f7ff fc51 	bl	8003188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80038ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038f0:	4619      	mov	r1, r3
 80038f2:	482c      	ldr	r0, [pc, #176]	; (80039a4 <MX_TIM1_Init+0x138>)
 80038f4:	f003 f8ec 	bl	8006ad0 <HAL_TIM_ConfigClockSource>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80038fe:	f7ff fc43 	bl	8003188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003902:	4828      	ldr	r0, [pc, #160]	; (80039a4 <MX_TIM1_Init+0x138>)
 8003904:	f002 fe64 	bl	80065d0 <HAL_TIM_PWM_Init>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800390e:	f7ff fc3b 	bl	8003188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003912:	2310      	movs	r3, #16
 8003914:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003916:	2300      	movs	r3, #0
 8003918:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800391a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800391e:	4619      	mov	r1, r3
 8003920:	4820      	ldr	r0, [pc, #128]	; (80039a4 <MX_TIM1_Init+0x138>)
 8003922:	f003 fda7 	bl	8007474 <HAL_TIMEx_MasterConfigSynchronization>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800392c:	f7ff fc2c 	bl	8003188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003930:	2360      	movs	r3, #96	; 0x60
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003938:	2300      	movs	r3, #0
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800393c:	2300      	movs	r3, #0
 800393e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003940:	2300      	movs	r3, #0
 8003942:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003944:	2300      	movs	r3, #0
 8003946:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003948:	2300      	movs	r3, #0
 800394a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800394c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003950:	2200      	movs	r2, #0
 8003952:	4619      	mov	r1, r3
 8003954:	4813      	ldr	r0, [pc, #76]	; (80039a4 <MX_TIM1_Init+0x138>)
 8003956:	f002 fff9 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003960:	f7ff fc12 	bl	8003188 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003964:	2300      	movs	r3, #0
 8003966:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800397c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800397e:	2300      	movs	r3, #0
 8003980:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003982:	1d3b      	adds	r3, r7, #4
 8003984:	4619      	mov	r1, r3
 8003986:	4807      	ldr	r0, [pc, #28]	; (80039a4 <MX_TIM1_Init+0x138>)
 8003988:	f003 fdf0 	bl	800756c <HAL_TIMEx_ConfigBreakDeadTime>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003992:	f7ff fbf9 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003996:	4803      	ldr	r0, [pc, #12]	; (80039a4 <MX_TIM1_Init+0x138>)
 8003998:	f000 fba4 	bl	80040e4 <HAL_TIM_MspPostInit>

}
 800399c:	bf00      	nop
 800399e:	3758      	adds	r7, #88	; 0x58
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	2000069c 	.word	0x2000069c
 80039a8:	40010000 	.word	0x40010000

080039ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08e      	sub	sp, #56	; 0x38
 80039b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c0:	f107 0320 	add.w	r3, r7, #32
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	611a      	str	r2, [r3, #16]
 80039d8:	615a      	str	r2, [r3, #20]
 80039da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039dc:	4b2d      	ldr	r3, [pc, #180]	; (8003a94 <MX_TIM2_Init+0xe8>)
 80039de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 80039e4:	4b2b      	ldr	r3, [pc, #172]	; (8003a94 <MX_TIM2_Init+0xe8>)
 80039e6:	2203      	movs	r2, #3
 80039e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ea:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <MX_TIM2_Init+0xe8>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 80039f0:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <MX_TIM2_Init+0xe8>)
 80039f2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80039f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039f8:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <MX_TIM2_Init+0xe8>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039fe:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <MX_TIM2_Init+0xe8>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a04:	4823      	ldr	r0, [pc, #140]	; (8003a94 <MX_TIM2_Init+0xe8>)
 8003a06:	f002 fb99 	bl	800613c <HAL_TIM_Base_Init>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003a10:	f7ff fbba 	bl	8003188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a1e:	4619      	mov	r1, r3
 8003a20:	481c      	ldr	r0, [pc, #112]	; (8003a94 <MX_TIM2_Init+0xe8>)
 8003a22:	f003 f855 	bl	8006ad0 <HAL_TIM_ConfigClockSource>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003a2c:	f7ff fbac 	bl	8003188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a30:	4818      	ldr	r0, [pc, #96]	; (8003a94 <MX_TIM2_Init+0xe8>)
 8003a32:	f002 fdcd 	bl	80065d0 <HAL_TIM_PWM_Init>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003a3c:	f7ff fba4 	bl	8003188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a40:	2300      	movs	r3, #0
 8003a42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a48:	f107 0320 	add.w	r3, r7, #32
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4811      	ldr	r0, [pc, #68]	; (8003a94 <MX_TIM2_Init+0xe8>)
 8003a50:	f003 fd10 	bl	8007474 <HAL_TIMEx_MasterConfigSynchronization>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003a5a:	f7ff fb95 	bl	8003188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a5e:	2360      	movs	r3, #96	; 0x60
 8003a60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	2200      	movs	r2, #0
 8003a72:	4619      	mov	r1, r3
 8003a74:	4807      	ldr	r0, [pc, #28]	; (8003a94 <MX_TIM2_Init+0xe8>)
 8003a76:	f002 ff69 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003a80:	f7ff fb82 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003a84:	4803      	ldr	r0, [pc, #12]	; (8003a94 <MX_TIM2_Init+0xe8>)
 8003a86:	f000 fb2d 	bl	80040e4 <HAL_TIM_MspPostInit>

}
 8003a8a:	bf00      	nop
 8003a8c:	3738      	adds	r7, #56	; 0x38
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	2000072c 	.word	0x2000072c

08003a98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08e      	sub	sp, #56	; 0x38
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
 8003aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aac:	f107 0320 	add.w	r3, r7, #32
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]
 8003ac4:	615a      	str	r2, [r3, #20]
 8003ac6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ac8:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <MX_TIM3_Init+0xe4>)
 8003aca:	4a2d      	ldr	r2, [pc, #180]	; (8003b80 <MX_TIM3_Init+0xe8>)
 8003acc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8003ace:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <MX_TIM3_Init+0xe4>)
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad4:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <MX_TIM3_Init+0xe4>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 8003ada:	4b28      	ldr	r3, [pc, #160]	; (8003b7c <MX_TIM3_Init+0xe4>)
 8003adc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003ae0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae2:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <MX_TIM3_Init+0xe4>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae8:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <MX_TIM3_Init+0xe4>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003aee:	4823      	ldr	r0, [pc, #140]	; (8003b7c <MX_TIM3_Init+0xe4>)
 8003af0:	f002 fb24 	bl	800613c <HAL_TIM_Base_Init>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003afa:	f7ff fb45 	bl	8003188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b08:	4619      	mov	r1, r3
 8003b0a:	481c      	ldr	r0, [pc, #112]	; (8003b7c <MX_TIM3_Init+0xe4>)
 8003b0c:	f002 ffe0 	bl	8006ad0 <HAL_TIM_ConfigClockSource>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003b16:	f7ff fb37 	bl	8003188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b1a:	4818      	ldr	r0, [pc, #96]	; (8003b7c <MX_TIM3_Init+0xe4>)
 8003b1c:	f002 fd58 	bl	80065d0 <HAL_TIM_PWM_Init>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003b26:	f7ff fb2f 	bl	8003188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b32:	f107 0320 	add.w	r3, r7, #32
 8003b36:	4619      	mov	r1, r3
 8003b38:	4810      	ldr	r0, [pc, #64]	; (8003b7c <MX_TIM3_Init+0xe4>)
 8003b3a:	f003 fc9b 	bl	8007474 <HAL_TIMEx_MasterConfigSynchronization>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003b44:	f7ff fb20 	bl	8003188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b48:	2360      	movs	r3, #96	; 0x60
 8003b4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b58:	1d3b      	adds	r3, r7, #4
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4807      	ldr	r0, [pc, #28]	; (8003b7c <MX_TIM3_Init+0xe4>)
 8003b60:	f002 fef4 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003b6a:	f7ff fb0d 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b6e:	4803      	ldr	r0, [pc, #12]	; (8003b7c <MX_TIM3_Init+0xe4>)
 8003b70:	f000 fab8 	bl	80040e4 <HAL_TIM_MspPostInit>

}
 8003b74:	bf00      	nop
 8003b76:	3738      	adds	r7, #56	; 0x38
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20000654 	.word	0x20000654
 8003b80:	40000400 	.word	0x40000400

08003b84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b092      	sub	sp, #72	; 0x48
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	609a      	str	r2, [r3, #8]
 8003b96:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ba8:	f107 031c 	add.w	r3, r7, #28
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	611a      	str	r2, [r3, #16]
 8003bc0:	615a      	str	r2, [r3, #20]
 8003bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003bc4:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <MX_TIM4_Init+0x10c>)
 8003bc6:	4a33      	ldr	r2, [pc, #204]	; (8003c94 <MX_TIM4_Init+0x110>)
 8003bc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4-1;
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <MX_TIM4_Init+0x10c>)
 8003bcc:	2203      	movs	r2, #3
 8003bce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bd0:	4b2f      	ldr	r3, [pc, #188]	; (8003c90 <MX_TIM4_Init+0x10c>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400-1;
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <MX_TIM4_Init+0x10c>)
 8003bd8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003bdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bde:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <MX_TIM4_Init+0x10c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003be4:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <MX_TIM4_Init+0x10c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003bea:	4829      	ldr	r0, [pc, #164]	; (8003c90 <MX_TIM4_Init+0x10c>)
 8003bec:	f002 faa6 	bl	800613c <HAL_TIM_Base_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003bf6:	f7ff fac7 	bl	8003188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c04:	4619      	mov	r1, r3
 8003c06:	4822      	ldr	r0, [pc, #136]	; (8003c90 <MX_TIM4_Init+0x10c>)
 8003c08:	f002 ff62 	bl	8006ad0 <HAL_TIM_ConfigClockSource>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003c12:	f7ff fab9 	bl	8003188 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003c16:	481e      	ldr	r0, [pc, #120]	; (8003c90 <MX_TIM4_Init+0x10c>)
 8003c18:	f002 fbb8 	bl	800638c <HAL_TIM_OC_Init>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8003c22:	f7ff fab1 	bl	8003188 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8003c26:	2305      	movs	r3, #5
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8003c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c32:	4619      	mov	r1, r3
 8003c34:	4816      	ldr	r0, [pc, #88]	; (8003c90 <MX_TIM4_Init+0x10c>)
 8003c36:	f003 f812 	bl	8006c5e <HAL_TIM_SlaveConfigSynchro>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8003c40:	f7ff faa2 	bl	8003188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c4c:	f107 031c 	add.w	r3, r7, #28
 8003c50:	4619      	mov	r1, r3
 8003c52:	480f      	ldr	r0, [pc, #60]	; (8003c90 <MX_TIM4_Init+0x10c>)
 8003c54:	f003 fc0e 	bl	8007474 <HAL_TIMEx_MasterConfigSynchronization>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8003c5e:	f7ff fa93 	bl	8003188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003c62:	2330      	movs	r3, #48	; 0x30
 8003c64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c72:	463b      	mov	r3, r7
 8003c74:	220c      	movs	r2, #12
 8003c76:	4619      	mov	r1, r3
 8003c78:	4805      	ldr	r0, [pc, #20]	; (8003c90 <MX_TIM4_Init+0x10c>)
 8003c7a:	f002 fe0b 	bl	8006894 <HAL_TIM_OC_ConfigChannel>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8003c84:	f7ff fa80 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003c88:	bf00      	nop
 8003c8a:	3748      	adds	r7, #72	; 0x48
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	2000060c 	.word	0x2000060c
 8003c94:	40000800 	.word	0x40000800

08003c98 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b096      	sub	sp, #88	; 0x58
 8003c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	60da      	str	r2, [r3, #12]
 8003cc4:	611a      	str	r2, [r3, #16]
 8003cc6:	615a      	str	r2, [r3, #20]
 8003cc8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003cca:	1d3b      	adds	r3, r7, #4
 8003ccc:	2220      	movs	r2, #32
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 fcb1 	bl	8008638 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003cd6:	4b3e      	ldr	r3, [pc, #248]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003cd8:	4a3e      	ldr	r2, [pc, #248]	; (8003dd4 <MX_TIM8_Init+0x13c>)
 8003cda:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4-1;
 8003cdc:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003cde:	2203      	movs	r2, #3
 8003ce0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ce2:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4200-1;
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003cea:	f241 0267 	movw	r2, #4199	; 0x1067
 8003cee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cf0:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003cf6:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cfc:	4b34      	ldr	r3, [pc, #208]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003d02:	4833      	ldr	r0, [pc, #204]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003d04:	f002 fa1a 	bl	800613c <HAL_TIM_Base_Init>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003d0e:	f7ff fa3b 	bl	8003188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003d18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	482c      	ldr	r0, [pc, #176]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003d20:	f002 fed6 	bl	8006ad0 <HAL_TIM_ConfigClockSource>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003d2a:	f7ff fa2d 	bl	8003188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003d2e:	4828      	ldr	r0, [pc, #160]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003d30:	f002 fc4e 	bl	80065d0 <HAL_TIM_PWM_Init>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003d3a:	f7ff fa25 	bl	8003188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003d46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4820      	ldr	r0, [pc, #128]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003d4e:	f003 fb91 	bl	8007474 <HAL_TIMEx_MasterConfigSynchronization>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003d58:	f7ff fa16 	bl	8003188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d5c:	2360      	movs	r3, #96	; 0x60
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d64:	2300      	movs	r3, #0
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d70:	2300      	movs	r3, #0
 8003d72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d74:	2300      	movs	r3, #0
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4813      	ldr	r0, [pc, #76]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003d82:	f002 fde3 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003d8c:	f7ff f9fc 	bl	8003188 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003da8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4807      	ldr	r0, [pc, #28]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003db4:	f003 fbda 	bl	800756c <HAL_TIMEx_ConfigBreakDeadTime>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8003dbe:	f7ff f9e3 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003dc2:	4803      	ldr	r0, [pc, #12]	; (8003dd0 <MX_TIM8_Init+0x138>)
 8003dc4:	f000 f98e 	bl	80040e4 <HAL_TIM_MspPostInit>

}
 8003dc8:	bf00      	nop
 8003dca:	3758      	adds	r7, #88	; 0x58
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	200005c4 	.word	0x200005c4
 8003dd4:	40010400 	.word	0x40010400

08003dd8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08c      	sub	sp, #48	; 0x30
 8003ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dde:	f107 0320 	add.w	r3, r7, #32
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dec:	1d3b      	adds	r3, r7, #4
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	611a      	str	r2, [r3, #16]
 8003dfa:	615a      	str	r2, [r3, #20]
 8003dfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003dfe:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <MX_TIM9_Init+0xbc>)
 8003e00:	4a25      	ldr	r2, [pc, #148]	; (8003e98 <MX_TIM9_Init+0xc0>)
 8003e02:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 4-1;
 8003e04:	4b23      	ldr	r3, [pc, #140]	; (8003e94 <MX_TIM9_Init+0xbc>)
 8003e06:	2203      	movs	r2, #3
 8003e08:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e0a:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <MX_TIM9_Init+0xbc>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 8400-1;
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <MX_TIM9_Init+0xbc>)
 8003e12:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003e16:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e18:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <MX_TIM9_Init+0xbc>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <MX_TIM9_Init+0xbc>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003e24:	481b      	ldr	r0, [pc, #108]	; (8003e94 <MX_TIM9_Init+0xbc>)
 8003e26:	f002 f989 	bl	800613c <HAL_TIM_Base_Init>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8003e30:	f7ff f9aa 	bl	8003188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e38:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003e3a:	f107 0320 	add.w	r3, r7, #32
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4814      	ldr	r0, [pc, #80]	; (8003e94 <MX_TIM9_Init+0xbc>)
 8003e42:	f002 fe45 	bl	8006ad0 <HAL_TIM_ConfigClockSource>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8003e4c:	f7ff f99c 	bl	8003188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003e50:	4810      	ldr	r0, [pc, #64]	; (8003e94 <MX_TIM9_Init+0xbc>)
 8003e52:	f002 fbbd 	bl	80065d0 <HAL_TIM_PWM_Init>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8003e5c:	f7ff f994 	bl	8003188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e60:	2360      	movs	r3, #96	; 0x60
 8003e62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e70:	1d3b      	adds	r3, r7, #4
 8003e72:	2200      	movs	r2, #0
 8003e74:	4619      	mov	r1, r3
 8003e76:	4807      	ldr	r0, [pc, #28]	; (8003e94 <MX_TIM9_Init+0xbc>)
 8003e78:	f002 fd68 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8003e82:	f7ff f981 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003e86:	4803      	ldr	r0, [pc, #12]	; (8003e94 <MX_TIM9_Init+0xbc>)
 8003e88:	f000 f92c 	bl	80040e4 <HAL_TIM_MspPostInit>

}
 8003e8c:	bf00      	nop
 8003e8e:	3730      	adds	r7, #48	; 0x30
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	200006e4 	.word	0x200006e4
 8003e98:	40014000 	.word	0x40014000

08003e9c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	; 0x30
 8003ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ea2:	f107 0320 	add.w	r3, r7, #32
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	611a      	str	r2, [r3, #16]
 8003ebe:	615a      	str	r2, [r3, #20]
 8003ec0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003ec2:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <MX_TIM12_Init+0xbc>)
 8003ec4:	4a25      	ldr	r2, [pc, #148]	; (8003f5c <MX_TIM12_Init+0xc0>)
 8003ec6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 4-1;
 8003ec8:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <MX_TIM12_Init+0xbc>)
 8003eca:	2203      	movs	r2, #3
 8003ecc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ece:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <MX_TIM12_Init+0xbc>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4200-1;
 8003ed4:	4b20      	ldr	r3, [pc, #128]	; (8003f58 <MX_TIM12_Init+0xbc>)
 8003ed6:	f241 0267 	movw	r2, #4199	; 0x1067
 8003eda:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003edc:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <MX_TIM12_Init+0xbc>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ee2:	4b1d      	ldr	r3, [pc, #116]	; (8003f58 <MX_TIM12_Init+0xbc>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003ee8:	481b      	ldr	r0, [pc, #108]	; (8003f58 <MX_TIM12_Init+0xbc>)
 8003eea:	f002 f927 	bl	800613c <HAL_TIM_Base_Init>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8003ef4:	f7ff f948 	bl	8003188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003efc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003efe:	f107 0320 	add.w	r3, r7, #32
 8003f02:	4619      	mov	r1, r3
 8003f04:	4814      	ldr	r0, [pc, #80]	; (8003f58 <MX_TIM12_Init+0xbc>)
 8003f06:	f002 fde3 	bl	8006ad0 <HAL_TIM_ConfigClockSource>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8003f10:	f7ff f93a 	bl	8003188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003f14:	4810      	ldr	r0, [pc, #64]	; (8003f58 <MX_TIM12_Init+0xbc>)
 8003f16:	f002 fb5b 	bl	80065d0 <HAL_TIM_PWM_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8003f20:	f7ff f932 	bl	8003188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f24:	2360      	movs	r3, #96	; 0x60
 8003f26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f34:	1d3b      	adds	r3, r7, #4
 8003f36:	2200      	movs	r2, #0
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4807      	ldr	r0, [pc, #28]	; (8003f58 <MX_TIM12_Init+0xbc>)
 8003f3c:	f002 fd06 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8003f46:	f7ff f91f 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003f4a:	4803      	ldr	r0, [pc, #12]	; (8003f58 <MX_TIM12_Init+0xbc>)
 8003f4c:	f000 f8ca 	bl	80040e4 <HAL_TIM_MspPostInit>

}
 8003f50:	bf00      	nop
 8003f52:	3730      	adds	r7, #48	; 0x30
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000774 	.word	0x20000774
 8003f5c:	40001800 	.word	0x40001800

08003f60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	; 0x28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a56      	ldr	r2, [pc, #344]	; (80040c8 <HAL_TIM_Base_MspInit+0x168>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d11e      	bne.n	8003fb0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
 8003f76:	4b55      	ldr	r3, [pc, #340]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	4a54      	ldr	r2, [pc, #336]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	6453      	str	r3, [r2, #68]	; 0x44
 8003f82:	4b52      	ldr	r3, [pc, #328]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2101      	movs	r1, #1
 8003f92:	2019      	movs	r0, #25
 8003f94:	f000 ffe1 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003f98:	2019      	movs	r0, #25
 8003f9a:	f000 fffa 	bl	8004f92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	201b      	movs	r0, #27
 8003fa4:	f000 ffd9 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003fa8:	201b      	movs	r0, #27
 8003faa:	f000 fff2 	bl	8004f92 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003fae:	e086      	b.n	80040be <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	623b      	str	r3, [r7, #32]
 8003fbe:	4b43      	ldr	r3, [pc, #268]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	4a42      	ldr	r2, [pc, #264]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fca:	4b40      	ldr	r3, [pc, #256]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	623b      	str	r3, [r7, #32]
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
}
 8003fd6:	e072      	b.n	80040be <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM3)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a3c      	ldr	r2, [pc, #240]	; (80040d0 <HAL_TIM_Base_MspInit+0x170>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d10e      	bne.n	8004000 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	4b39      	ldr	r3, [pc, #228]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	4a38      	ldr	r2, [pc, #224]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff2:	4b36      	ldr	r3, [pc, #216]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
}
 8003ffe:	e05e      	b.n	80040be <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM4)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a33      	ldr	r2, [pc, #204]	; (80040d4 <HAL_TIM_Base_MspInit+0x174>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d10e      	bne.n	8004028 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	4a2e      	ldr	r2, [pc, #184]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	6413      	str	r3, [r2, #64]	; 0x40
 800401a:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	69bb      	ldr	r3, [r7, #24]
}
 8004026:	e04a      	b.n	80040be <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM8)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <HAL_TIM_Base_MspInit+0x178>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d11e      	bne.n	8004070 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	4b25      	ldr	r3, [pc, #148]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	4a24      	ldr	r2, [pc, #144]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 800403c:	f043 0302 	orr.w	r3, r3, #2
 8004040:	6453      	str	r3, [r2, #68]	; 0x44
 8004042:	4b22      	ldr	r3, [pc, #136]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800404e:	2200      	movs	r2, #0
 8004050:	2101      	movs	r1, #1
 8004052:	202c      	movs	r0, #44	; 0x2c
 8004054:	f000 ff81 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004058:	202c      	movs	r0, #44	; 0x2c
 800405a:	f000 ff9a 	bl	8004f92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800405e:	2200      	movs	r2, #0
 8004060:	2100      	movs	r1, #0
 8004062:	202e      	movs	r0, #46	; 0x2e
 8004064:	f000 ff79 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004068:	202e      	movs	r0, #46	; 0x2e
 800406a:	f000 ff92 	bl	8004f92 <HAL_NVIC_EnableIRQ>
}
 800406e:	e026      	b.n	80040be <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM9)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_TIM_Base_MspInit+0x17c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10e      	bne.n	8004098 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	4b13      	ldr	r3, [pc, #76]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	4a12      	ldr	r2, [pc, #72]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 8004084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004088:	6453      	str	r3, [r2, #68]	; 0x44
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]
}
 8004096:	e012      	b.n	80040be <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM12)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <HAL_TIM_Base_MspInit+0x180>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10d      	bne.n	80040be <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	4a08      	ldr	r2, [pc, #32]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 80040ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b0:	6413      	str	r3, [r2, #64]	; 0x40
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_TIM_Base_MspInit+0x16c>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
}
 80040be:	bf00      	nop
 80040c0:	3728      	adds	r7, #40	; 0x28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40010400 	.word	0x40010400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40001800 	.word	0x40001800

080040e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08e      	sub	sp, #56	; 0x38
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a6d      	ldr	r2, [pc, #436]	; (80042b8 <HAL_TIM_MspPostInit+0x1d4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d11f      	bne.n	8004146 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	623b      	str	r3, [r7, #32]
 800410a:	4b6c      	ldr	r3, [pc, #432]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	4a6b      	ldr	r2, [pc, #428]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	6313      	str	r3, [r2, #48]	; 0x30
 8004116:	4b69      	ldr	r3, [pc, #420]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	623b      	str	r3, [r7, #32]
 8004120:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004128:	2302      	movs	r3, #2
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412c:	2300      	movs	r3, #0
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004130:	2300      	movs	r3, #0
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004134:	2301      	movs	r3, #1
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800413c:	4619      	mov	r1, r3
 800413e:	4860      	ldr	r0, [pc, #384]	; (80042c0 <HAL_TIM_MspPostInit+0x1dc>)
 8004140:	f001 f9ba 	bl	80054b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004144:	e0b4      	b.n	80042b0 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM2)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414e:	d11f      	bne.n	8004190 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004150:	2300      	movs	r3, #0
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	4b59      	ldr	r3, [pc, #356]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	4a58      	ldr	r2, [pc, #352]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	6313      	str	r3, [r2, #48]	; 0x30
 8004160:	4b56      	ldr	r3, [pc, #344]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800416c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004172:	2302      	movs	r3, #2
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004176:	2300      	movs	r3, #0
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417a:	2300      	movs	r3, #0
 800417c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800417e:	2301      	movs	r3, #1
 8004180:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004186:	4619      	mov	r1, r3
 8004188:	484d      	ldr	r0, [pc, #308]	; (80042c0 <HAL_TIM_MspPostInit+0x1dc>)
 800418a:	f001 f995 	bl	80054b8 <HAL_GPIO_Init>
}
 800418e:	e08f      	b.n	80042b0 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM3)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a4b      	ldr	r2, [pc, #300]	; (80042c4 <HAL_TIM_MspPostInit+0x1e0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d11e      	bne.n	80041d8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	4b47      	ldr	r3, [pc, #284]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	4a46      	ldr	r2, [pc, #280]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6313      	str	r3, [r2, #48]	; 0x30
 80041aa:	4b44      	ldr	r3, [pc, #272]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041b6:	2340      	movs	r3, #64	; 0x40
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ba:	2302      	movs	r3, #2
 80041bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c2:	2300      	movs	r3, #0
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041c6:	2302      	movs	r3, #2
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ce:	4619      	mov	r1, r3
 80041d0:	483b      	ldr	r0, [pc, #236]	; (80042c0 <HAL_TIM_MspPostInit+0x1dc>)
 80041d2:	f001 f971 	bl	80054b8 <HAL_GPIO_Init>
}
 80041d6:	e06b      	b.n	80042b0 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM8)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a3a      	ldr	r2, [pc, #232]	; (80042c8 <HAL_TIM_MspPostInit+0x1e4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d11e      	bne.n	8004220 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	4b35      	ldr	r3, [pc, #212]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	4a34      	ldr	r2, [pc, #208]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 80041ec:	f043 0304 	orr.w	r3, r3, #4
 80041f0:	6313      	str	r3, [r2, #48]	; 0x30
 80041f2:	4b32      	ldr	r3, [pc, #200]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041fe:	2340      	movs	r3, #64	; 0x40
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004202:	2302      	movs	r3, #2
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2300      	movs	r3, #0
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420a:	2300      	movs	r3, #0
 800420c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800420e:	2303      	movs	r3, #3
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004216:	4619      	mov	r1, r3
 8004218:	482c      	ldr	r0, [pc, #176]	; (80042cc <HAL_TIM_MspPostInit+0x1e8>)
 800421a:	f001 f94d 	bl	80054b8 <HAL_GPIO_Init>
}
 800421e:	e047      	b.n	80042b0 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM9)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2a      	ldr	r2, [pc, #168]	; (80042d0 <HAL_TIM_MspPostInit+0x1ec>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d11e      	bne.n	8004268 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	4b23      	ldr	r3, [pc, #140]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	4a22      	ldr	r2, [pc, #136]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6313      	str	r3, [r2, #48]	; 0x30
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004246:	2304      	movs	r3, #4
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424a:	2302      	movs	r3, #2
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424e:	2300      	movs	r3, #0
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004252:	2300      	movs	r3, #0
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004256:	2303      	movs	r3, #3
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800425a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800425e:	4619      	mov	r1, r3
 8004260:	4817      	ldr	r0, [pc, #92]	; (80042c0 <HAL_TIM_MspPostInit+0x1dc>)
 8004262:	f001 f929 	bl	80054b8 <HAL_GPIO_Init>
}
 8004266:	e023      	b.n	80042b0 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM12)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <HAL_TIM_MspPostInit+0x1f0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d11e      	bne.n	80042b0 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	4a10      	ldr	r2, [pc, #64]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 800427c:	f043 0302 	orr.w	r3, r3, #2
 8004280:	6313      	str	r3, [r2, #48]	; 0x30
 8004282:	4b0e      	ldr	r3, [pc, #56]	; (80042bc <HAL_TIM_MspPostInit+0x1d8>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800428e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004294:	2302      	movs	r3, #2
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004298:	2300      	movs	r3, #0
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800429c:	2300      	movs	r3, #0
 800429e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80042a0:	2309      	movs	r3, #9
 80042a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042a8:	4619      	mov	r1, r3
 80042aa:	480b      	ldr	r0, [pc, #44]	; (80042d8 <HAL_TIM_MspPostInit+0x1f4>)
 80042ac:	f001 f904 	bl	80054b8 <HAL_GPIO_Init>
}
 80042b0:	bf00      	nop
 80042b2:	3738      	adds	r7, #56	; 0x38
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40020000 	.word	0x40020000
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40010400 	.word	0x40010400
 80042cc:	40020800 	.word	0x40020800
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40001800 	.word	0x40001800
 80042d8:	40020400 	.word	0x40020400

080042dc <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <MX_UART5_Init+0x4c>)
 80042e2:	4a12      	ldr	r2, [pc, #72]	; (800432c <MX_UART5_Init+0x50>)
 80042e4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <MX_UART5_Init+0x4c>)
 80042e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042ec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80042ee:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <MX_UART5_Init+0x4c>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <MX_UART5_Init+0x4c>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <MX_UART5_Init+0x4c>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004300:	4b09      	ldr	r3, [pc, #36]	; (8004328 <MX_UART5_Init+0x4c>)
 8004302:	220c      	movs	r2, #12
 8004304:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004306:	4b08      	ldr	r3, [pc, #32]	; (8004328 <MX_UART5_Init+0x4c>)
 8004308:	2200      	movs	r2, #0
 800430a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <MX_UART5_Init+0x4c>)
 800430e:	2200      	movs	r2, #0
 8004310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004312:	4805      	ldr	r0, [pc, #20]	; (8004328 <MX_UART5_Init+0x4c>)
 8004314:	f003 f990 	bl	8007638 <HAL_UART_Init>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800431e:	f7fe ff33 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	200007bc 	.word	0x200007bc
 800432c:	40005000 	.word	0x40005000

08004330 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004338:	f107 0314 	add.w	r3, r7, #20
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2c      	ldr	r2, [pc, #176]	; (8004400 <HAL_UART_MspInit+0xd0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d152      	bne.n	80043f8 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	4b2b      	ldr	r3, [pc, #172]	; (8004404 <HAL_UART_MspInit+0xd4>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	4a2a      	ldr	r2, [pc, #168]	; (8004404 <HAL_UART_MspInit+0xd4>)
 800435c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004360:	6413      	str	r3, [r2, #64]	; 0x40
 8004362:	4b28      	ldr	r3, [pc, #160]	; (8004404 <HAL_UART_MspInit+0xd4>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_UART_MspInit+0xd4>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	4a23      	ldr	r2, [pc, #140]	; (8004404 <HAL_UART_MspInit+0xd4>)
 8004378:	f043 0304 	orr.w	r3, r3, #4
 800437c:	6313      	str	r3, [r2, #48]	; 0x30
 800437e:	4b21      	ldr	r3, [pc, #132]	; (8004404 <HAL_UART_MspInit+0xd4>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800438a:	2300      	movs	r3, #0
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <HAL_UART_MspInit+0xd4>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <HAL_UART_MspInit+0xd4>)
 8004394:	f043 0308 	orr.w	r3, r3, #8
 8004398:	6313      	str	r3, [r2, #48]	; 0x30
 800439a:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <HAL_UART_MspInit+0xd4>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80043a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ac:	2302      	movs	r3, #2
 80043ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b4:	2303      	movs	r3, #3
 80043b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80043b8:	2308      	movs	r3, #8
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043bc:	f107 0314 	add.w	r3, r7, #20
 80043c0:	4619      	mov	r1, r3
 80043c2:	4811      	ldr	r0, [pc, #68]	; (8004408 <HAL_UART_MspInit+0xd8>)
 80043c4:	f001 f878 	bl	80054b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043c8:	2304      	movs	r3, #4
 80043ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043cc:	2302      	movs	r3, #2
 80043ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d4:	2303      	movs	r3, #3
 80043d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80043d8:	2308      	movs	r3, #8
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043dc:	f107 0314 	add.w	r3, r7, #20
 80043e0:	4619      	mov	r1, r3
 80043e2:	480a      	ldr	r0, [pc, #40]	; (800440c <HAL_UART_MspInit+0xdc>)
 80043e4:	f001 f868 	bl	80054b8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80043e8:	2200      	movs	r2, #0
 80043ea:	2100      	movs	r1, #0
 80043ec:	2035      	movs	r0, #53	; 0x35
 80043ee:	f000 fdb4 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80043f2:	2035      	movs	r0, #53	; 0x35
 80043f4:	f000 fdcd 	bl	8004f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80043f8:	bf00      	nop
 80043fa:	3728      	adds	r7, #40	; 0x28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40005000 	.word	0x40005000
 8004404:	40023800 	.word	0x40023800
 8004408:	40020800 	.word	0x40020800
 800440c:	40020c00 	.word	0x40020c00

08004410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004448 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004414:	480d      	ldr	r0, [pc, #52]	; (800444c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004416:	490e      	ldr	r1, [pc, #56]	; (8004450 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004418:	4a0e      	ldr	r2, [pc, #56]	; (8004454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800441a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800441c:	e002      	b.n	8004424 <LoopCopyDataInit>

0800441e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800441e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004422:	3304      	adds	r3, #4

08004424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004428:	d3f9      	bcc.n	800441e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800442a:	4a0b      	ldr	r2, [pc, #44]	; (8004458 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800442c:	4c0b      	ldr	r4, [pc, #44]	; (800445c <LoopFillZerobss+0x26>)
  movs r3, #0
 800442e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004430:	e001      	b.n	8004436 <LoopFillZerobss>

08004432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004434:	3204      	adds	r2, #4

08004436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004438:	d3fb      	bcc.n	8004432 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800443a:	f7ff fa01 	bl	8003840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800443e:	f004 f8d7 	bl	80085f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004442:	f7fd fe5f 	bl	8002104 <main>
  bx  lr    
 8004446:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800444c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004450:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8004454:	08008890 	.word	0x08008890
  ldr r2, =_sbss
 8004458:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800445c:	20000804 	.word	0x20000804

08004460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004460:	e7fe      	b.n	8004460 <ADC_IRQHandler>
	...

08004464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004468:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <HAL_Init+0x40>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0d      	ldr	r2, [pc, #52]	; (80044a4 <HAL_Init+0x40>)
 800446e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_Init+0x40>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a0a      	ldr	r2, [pc, #40]	; (80044a4 <HAL_Init+0x40>)
 800447a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800447e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004480:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <HAL_Init+0x40>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a07      	ldr	r2, [pc, #28]	; (80044a4 <HAL_Init+0x40>)
 8004486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800448c:	2003      	movs	r0, #3
 800448e:	f000 fd59 	bl	8004f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004492:	2005      	movs	r0, #5
 8004494:	f000 f808 	bl	80044a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004498:	f7ff f896 	bl	80035c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023c00 	.word	0x40023c00

080044a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044b0:	4b12      	ldr	r3, [pc, #72]	; (80044fc <HAL_InitTick+0x54>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_InitTick+0x58>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	4619      	mov	r1, r3
 80044ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044be:	fbb3 f3f1 	udiv	r3, r3, r1
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fd71 	bl	8004fae <HAL_SYSTICK_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e00e      	b.n	80044f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b0f      	cmp	r3, #15
 80044da:	d80a      	bhi.n	80044f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044dc:	2200      	movs	r2, #0
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295
 80044e4:	f000 fd39 	bl	8004f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044e8:	4a06      	ldr	r2, [pc, #24]	; (8004504 <HAL_InitTick+0x5c>)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e000      	b.n	80044f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	2000001c 	.word	0x2000001c
 8004500:	20000024 	.word	0x20000024
 8004504:	20000020 	.word	0x20000020

08004508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_IncTick+0x20>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_IncTick+0x24>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4413      	add	r3, r2
 8004518:	4a04      	ldr	r2, [pc, #16]	; (800452c <HAL_IncTick+0x24>)
 800451a:	6013      	str	r3, [r2, #0]
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000024 	.word	0x20000024
 800452c:	20000800 	.word	0x20000800

08004530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  return uwTick;
 8004534:	4b03      	ldr	r3, [pc, #12]	; (8004544 <HAL_GetTick+0x14>)
 8004536:	681b      	ldr	r3, [r3, #0]
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000800 	.word	0x20000800

08004548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004550:	f7ff ffee 	bl	8004530 <HAL_GetTick>
 8004554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004560:	d005      	beq.n	800456e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004562:	4b0a      	ldr	r3, [pc, #40]	; (800458c <HAL_Delay+0x44>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800456e:	bf00      	nop
 8004570:	f7ff ffde 	bl	8004530 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	429a      	cmp	r2, r3
 800457e:	d8f7      	bhi.n	8004570 <HAL_Delay+0x28>
  {
  }
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000024 	.word	0x20000024

08004590 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e033      	b.n	800460e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fd fc1c 	bl	8001dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d118      	bne.n	8004600 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045d6:	f023 0302 	bic.w	r3, r3, #2
 80045da:	f043 0202 	orr.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f958 	bl	8004898 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	f043 0201 	orr.w	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40
 80045fe:	e001      	b.n	8004604 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x1c>
 800466c:	2302      	movs	r3, #2
 800466e:	e105      	b.n	800487c <HAL_ADC_ConfigChannel+0x228>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b09      	cmp	r3, #9
 800467e:	d925      	bls.n	80046cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68d9      	ldr	r1, [r3, #12]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	3b1e      	subs	r3, #30
 8004696:	2207      	movs	r2, #7
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43da      	mvns	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	400a      	ands	r2, r1
 80046a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68d9      	ldr	r1, [r3, #12]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	4618      	mov	r0, r3
 80046b8:	4603      	mov	r3, r0
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4403      	add	r3, r0
 80046be:	3b1e      	subs	r3, #30
 80046c0:	409a      	lsls	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	e022      	b.n	8004712 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6919      	ldr	r1, [r3, #16]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	4613      	mov	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	2207      	movs	r2, #7
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43da      	mvns	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	400a      	ands	r2, r1
 80046ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6919      	ldr	r1, [r3, #16]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	4618      	mov	r0, r3
 8004702:	4603      	mov	r3, r0
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	4403      	add	r3, r0
 8004708:	409a      	lsls	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d824      	bhi.n	8004764 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	3b05      	subs	r3, #5
 800472c:	221f      	movs	r2, #31
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	400a      	ands	r2, r1
 800473a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	4618      	mov	r0, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	3b05      	subs	r3, #5
 8004756:	fa00 f203 	lsl.w	r2, r0, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	635a      	str	r2, [r3, #52]	; 0x34
 8004762:	e04c      	b.n	80047fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b0c      	cmp	r3, #12
 800476a:	d824      	bhi.n	80047b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	3b23      	subs	r3, #35	; 0x23
 800477e:	221f      	movs	r2, #31
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43da      	mvns	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	400a      	ands	r2, r1
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	4618      	mov	r0, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	3b23      	subs	r3, #35	; 0x23
 80047a8:	fa00 f203 	lsl.w	r2, r0, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
 80047b4:	e023      	b.n	80047fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	3b41      	subs	r3, #65	; 0x41
 80047c8:	221f      	movs	r2, #31
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43da      	mvns	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	400a      	ands	r2, r1
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	4618      	mov	r0, r3
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	3b41      	subs	r3, #65	; 0x41
 80047f2:	fa00 f203 	lsl.w	r2, r0, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047fe:	4b22      	ldr	r3, [pc, #136]	; (8004888 <HAL_ADC_ConfigChannel+0x234>)
 8004800:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a21      	ldr	r2, [pc, #132]	; (800488c <HAL_ADC_ConfigChannel+0x238>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d109      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x1cc>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b12      	cmp	r3, #18
 8004812:	d105      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a19      	ldr	r2, [pc, #100]	; (800488c <HAL_ADC_ConfigChannel+0x238>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d123      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x21e>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b10      	cmp	r3, #16
 8004830:	d003      	beq.n	800483a <HAL_ADC_ConfigChannel+0x1e6>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b11      	cmp	r3, #17
 8004838:	d11b      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b10      	cmp	r3, #16
 800484c:	d111      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <HAL_ADC_ConfigChannel+0x23c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <HAL_ADC_ConfigChannel+0x240>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	0c9a      	lsrs	r2, r3, #18
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004864:	e002      	b.n	800486c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	3b01      	subs	r3, #1
 800486a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f9      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40012300 	.word	0x40012300
 800488c:	40012000 	.word	0x40012000
 8004890:	2000001c 	.word	0x2000001c
 8004894:	431bde83 	.word	0x431bde83

08004898 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048a0:	4b79      	ldr	r3, [pc, #484]	; (8004a88 <ADC_Init+0x1f0>)
 80048a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6859      	ldr	r1, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	021a      	lsls	r2, r3, #8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80048f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6859      	ldr	r1, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6899      	ldr	r1, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	4a58      	ldr	r2, [pc, #352]	; (8004a8c <ADC_Init+0x1f4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d022      	beq.n	8004976 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800493e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6899      	ldr	r1, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6899      	ldr	r1, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	e00f      	b.n	8004996 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004994:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0202 	bic.w	r2, r2, #2
 80049a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6899      	ldr	r1, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	7e1b      	ldrb	r3, [r3, #24]
 80049b0:	005a      	lsls	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01b      	beq.n	80049fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80049e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6859      	ldr	r1, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	3b01      	subs	r3, #1
 80049f0:	035a      	lsls	r2, r3, #13
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	e007      	b.n	8004a0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	051a      	lsls	r2, r3, #20
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6899      	ldr	r1, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a4e:	025a      	lsls	r2, r3, #9
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6899      	ldr	r1, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	029a      	lsls	r2, r3, #10
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	609a      	str	r2, [r3, #8]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	40012300 	.word	0x40012300
 8004a8c:	0f000001 	.word	0x0f000001

08004a90 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored. 
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e0ab      	b.n	8004c06 <HAL_ADCEx_MultiModeStart_DMA+0x176>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d018      	beq.n	8004af6 <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	609a      	str	r2, [r3, #8]
    
    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ad4:	4b4e      	ldr	r3, [pc, #312]	; (8004c10 <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a4e      	ldr	r2, [pc, #312]	; (8004c14 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0c9a      	lsrs	r2, r3, #18
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4413      	add	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ae8:	e002      	b.n	8004af0 <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f9      	bne.n	8004aea <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d173      	bne.n	8004bec <HAL_ADCEx_MultiModeStart_DMA+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_ADCEx_MultiModeStart_DMA+0xa6>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b42:	d106      	bne.n	8004b52 <HAL_ADCEx_MultiModeStart_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b48:	f023 0206 	bic.w	r2, r3, #6
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	645a      	str	r2, [r3, #68]	; 0x44
 8004b50:	e002      	b.n	8004b58 <HAL_ADCEx_MultiModeStart_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	4a2c      	ldr	r2, [pc, #176]	; (8004c18 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8004b66:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	4a2b      	ldr	r2, [pc, #172]	; (8004c1c <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	4a2a      	ldr	r2, [pc, #168]	; (8004c20 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8004b76:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0202 	mvn.w	r2, #2
 8004b80:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b90:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b92:	4b24      	ldr	r3, [pc, #144]	; (8004c24 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8004b94:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d006      	beq.n	8004bae <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	e005      	b.n	8004bba <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	605a      	str	r2, [r3, #4]
    }
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f000 faac 	bl	8005124 <HAL_DMA_Start_IT>
    
    /* if no external trigger present enable software conversion of regular channels */
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d114      	bne.n	8004c04 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004be8:	609a      	str	r2, [r3, #8]
 8004bea:	e00b      	b.n	8004c04 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	f043 0210 	orr.w	r2, r3, #16
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	f043 0201 	orr.w	r2, r3, #1
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	2000001c 	.word	0x2000001c
 8004c14:	431bde83 	.word	0x431bde83
 8004c18:	08004cb5 	.word	0x08004cb5
 8004c1c:	08004d5b 	.word	0x08004d5b
 8004c20:	08004d77 	.word	0x08004d77
 8004c24:	40012300 	.word	0x40012300

08004c28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e031      	b.n	8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c48:	4b19      	ldr	r3, [pc, #100]	; (8004cb0 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f023 021f 	bic.w	r2, r3, #31
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	40012300 	.word	0x40012300

08004cb4 <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d13c      	bne.n	8004d48 <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d12b      	bne.n	8004d40 <ADC_MultiModeDMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d127      	bne.n	8004d40 <ADC_MultiModeDMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <ADC_MultiModeDMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d119      	bne.n	8004d40 <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0220 	bic.w	r2, r2, #32
 8004d1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	f043 0201 	orr.w	r2, r3, #1
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff fc68 	bl	8004616 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004d46:	e004      	b.n	8004d52 <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	4798      	blx	r3
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7ff fc5e 	bl	800462a <HAL_ADC_ConvHalfCpltCallback>
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	60fb      	str	r3, [r7, #12]
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2240      	movs	r2, #64	; 0x40
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	f043 0204 	orr.w	r2, r3, #4
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc); 
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff fc51 	bl	800463e <HAL_ADC_ErrorCallback>
}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004db4:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <__NVIC_SetPriorityGrouping+0x44>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dd6:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	60d3      	str	r3, [r2, #12]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	e000ed00 	.word	0xe000ed00

08004dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <__NVIC_GetPriorityGrouping+0x18>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	0a1b      	lsrs	r3, r3, #8
 8004df6:	f003 0307 	and.w	r3, r3, #7
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	db0b      	blt.n	8004e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	f003 021f 	and.w	r2, r3, #31
 8004e20:	4907      	ldr	r1, [pc, #28]	; (8004e40 <__NVIC_EnableIRQ+0x38>)
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	2001      	movs	r0, #1
 8004e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000e100 	.word	0xe000e100

08004e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	db0a      	blt.n	8004e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	490c      	ldr	r1, [pc, #48]	; (8004e90 <__NVIC_SetPriority+0x4c>)
 8004e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e62:	0112      	lsls	r2, r2, #4
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	440b      	add	r3, r1
 8004e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e6c:	e00a      	b.n	8004e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	4908      	ldr	r1, [pc, #32]	; (8004e94 <__NVIC_SetPriority+0x50>)
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	3b04      	subs	r3, #4
 8004e7c:	0112      	lsls	r2, r2, #4
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	440b      	add	r3, r1
 8004e82:	761a      	strb	r2, [r3, #24]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	e000e100 	.word	0xe000e100
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f1c3 0307 	rsb	r3, r3, #7
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	bf28      	it	cs
 8004eb6:	2304      	movcs	r3, #4
 8004eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d902      	bls.n	8004ec8 <NVIC_EncodePriority+0x30>
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3b03      	subs	r3, #3
 8004ec6:	e000      	b.n	8004eca <NVIC_EncodePriority+0x32>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	401a      	ands	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eea:	43d9      	mvns	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef0:	4313      	orrs	r3, r2
         );
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3724      	adds	r7, #36	; 0x24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f10:	d301      	bcc.n	8004f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f12:	2301      	movs	r3, #1
 8004f14:	e00f      	b.n	8004f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f16:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <SysTick_Config+0x40>)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f1e:	210f      	movs	r1, #15
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	f7ff ff8e 	bl	8004e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <SysTick_Config+0x40>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <SysTick_Config+0x40>)
 8004f30:	2207      	movs	r2, #7
 8004f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	e000e010 	.word	0xe000e010

08004f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff29 	bl	8004da4 <__NVIC_SetPriorityGrouping>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b086      	sub	sp, #24
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	4603      	mov	r3, r0
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f6c:	f7ff ff3e 	bl	8004dec <__NVIC_GetPriorityGrouping>
 8004f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	6978      	ldr	r0, [r7, #20]
 8004f78:	f7ff ff8e 	bl	8004e98 <NVIC_EncodePriority>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff ff5d 	bl	8004e44 <__NVIC_SetPriority>
}
 8004f8a:	bf00      	nop
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	4603      	mov	r3, r0
 8004f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff ff31 	bl	8004e08 <__NVIC_EnableIRQ>
}
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff ffa2 	bl	8004f00 <SysTick_Config>
 8004fbc:	4603      	mov	r3, r0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004fd4:	f7ff faac 	bl	8004530 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e099      	b.n	8005118 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005004:	e00f      	b.n	8005026 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005006:	f7ff fa93 	bl	8004530 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b05      	cmp	r3, #5
 8005012:	d908      	bls.n	8005026 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2203      	movs	r2, #3
 800501e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e078      	b.n	8005118 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e8      	bne.n	8005006 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4b38      	ldr	r3, [pc, #224]	; (8005120 <HAL_DMA_Init+0x158>)
 8005040:	4013      	ands	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005052:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800505e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	2b04      	cmp	r3, #4
 800507e:	d107      	bne.n	8005090 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	4313      	orrs	r3, r2
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0307 	bic.w	r3, r3, #7
 80050a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d117      	bne.n	80050ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00e      	beq.n	80050ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f977 	bl	80053c0 <DMA_CheckFifoParam>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2240      	movs	r2, #64	; 0x40
 80050dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80050e6:	2301      	movs	r3, #1
 80050e8:	e016      	b.n	8005118 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f92e 	bl	8005354 <DMA_CalcBaseAndBitshift>
 80050f8:	4603      	mov	r3, r0
 80050fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005100:	223f      	movs	r2, #63	; 0x3f
 8005102:	409a      	lsls	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	f010803f 	.word	0xf010803f

08005124 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_DMA_Start_IT+0x26>
 8005146:	2302      	movs	r3, #2
 8005148:	e040      	b.n	80051cc <HAL_DMA_Start_IT+0xa8>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b01      	cmp	r3, #1
 800515c:	d12f      	bne.n	80051be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f8c0 	bl	80052f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517c:	223f      	movs	r2, #63	; 0x3f
 800517e:	409a      	lsls	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0216 	orr.w	r2, r2, #22
 8005192:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0208 	orr.w	r2, r2, #8
 80051aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e005      	b.n	80051ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051c6:	2302      	movs	r3, #2
 80051c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80051e2:	f7ff f9a5 	bl	8004530 <HAL_GetTick>
 80051e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d008      	beq.n	8005206 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2280      	movs	r2, #128	; 0x80
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e052      	b.n	80052ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0216 	bic.w	r2, r2, #22
 8005214:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695a      	ldr	r2, [r3, #20]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005224:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <HAL_DMA_Abort+0x62>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	2b00      	cmp	r3, #0
 8005234:	d007      	beq.n	8005246 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0208 	bic.w	r2, r2, #8
 8005244:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0201 	bic.w	r2, r2, #1
 8005254:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005256:	e013      	b.n	8005280 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005258:	f7ff f96a 	bl	8004530 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b05      	cmp	r3, #5
 8005264:	d90c      	bls.n	8005280 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2203      	movs	r2, #3
 8005270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e015      	b.n	80052ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e4      	bne.n	8005258 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005292:	223f      	movs	r2, #63	; 0x3f
 8005294:	409a      	lsls	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d004      	beq.n	80052d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2280      	movs	r2, #128	; 0x80
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e00c      	b.n	80052ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2205      	movs	r2, #5
 80052d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005314:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d108      	bne.n	8005338 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005336:	e007      	b.n	8005348 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	60da      	str	r2, [r3, #12]
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	3b10      	subs	r3, #16
 8005364:	4a14      	ldr	r2, [pc, #80]	; (80053b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800536e:	4a13      	ldr	r2, [pc, #76]	; (80053bc <DMA_CalcBaseAndBitshift+0x68>)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b03      	cmp	r3, #3
 8005380:	d909      	bls.n	8005396 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800538a:	f023 0303 	bic.w	r3, r3, #3
 800538e:	1d1a      	adds	r2, r3, #4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	659a      	str	r2, [r3, #88]	; 0x58
 8005394:	e007      	b.n	80053a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	aaaaaaab 	.word	0xaaaaaaab
 80053bc:	08008878 	.word	0x08008878

080053c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11f      	bne.n	800541a <DMA_CheckFifoParam+0x5a>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d856      	bhi.n	800548e <DMA_CheckFifoParam+0xce>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <DMA_CheckFifoParam+0x28>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	080053f9 	.word	0x080053f9
 80053ec:	0800540b 	.word	0x0800540b
 80053f0:	080053f9 	.word	0x080053f9
 80053f4:	0800548f 	.word	0x0800548f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d046      	beq.n	8005492 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005408:	e043      	b.n	8005492 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005412:	d140      	bne.n	8005496 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005418:	e03d      	b.n	8005496 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005422:	d121      	bne.n	8005468 <DMA_CheckFifoParam+0xa8>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d837      	bhi.n	800549a <DMA_CheckFifoParam+0xda>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <DMA_CheckFifoParam+0x70>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005441 	.word	0x08005441
 8005434:	08005447 	.word	0x08005447
 8005438:	08005441 	.word	0x08005441
 800543c:	08005459 	.word	0x08005459
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
      break;
 8005444:	e030      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d025      	beq.n	800549e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005456:	e022      	b.n	800549e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005460:	d11f      	bne.n	80054a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005466:	e01c      	b.n	80054a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d903      	bls.n	8005476 <DMA_CheckFifoParam+0xb6>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d003      	beq.n	800547c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005474:	e018      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	73fb      	strb	r3, [r7, #15]
      break;
 800547a:	e015      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00e      	beq.n	80054a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
      break;
 800548c:	e00b      	b.n	80054a6 <DMA_CheckFifoParam+0xe6>
      break;
 800548e:	bf00      	nop
 8005490:	e00a      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005492:	bf00      	nop
 8005494:	e008      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005496:	bf00      	nop
 8005498:	e006      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 800549a:	bf00      	nop
 800549c:	e004      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 800549e:	bf00      	nop
 80054a0:	e002      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80054a2:	bf00      	nop
 80054a4:	e000      	b.n	80054a8 <DMA_CheckFifoParam+0xe8>
      break;
 80054a6:	bf00      	nop
    }
  } 
  
  return status; 
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop

080054b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b089      	sub	sp, #36	; 0x24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e16b      	b.n	80057ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054d4:	2201      	movs	r2, #1
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4013      	ands	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	f040 815a 	bne.w	80057a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d005      	beq.n	800550a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005506:	2b02      	cmp	r3, #2
 8005508:	d130      	bne.n	800556c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	2203      	movs	r2, #3
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4013      	ands	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005540:	2201      	movs	r2, #1
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	43db      	mvns	r3, r3
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4013      	ands	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f003 0201 	and.w	r2, r3, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	2b03      	cmp	r3, #3
 8005576:	d017      	beq.n	80055a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	2203      	movs	r2, #3
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4313      	orrs	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d123      	bne.n	80055fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	08da      	lsrs	r2, r3, #3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3208      	adds	r2, #8
 80055bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	220f      	movs	r2, #15
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	08da      	lsrs	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3208      	adds	r2, #8
 80055f6:	69b9      	ldr	r1, [r7, #24]
 80055f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	2203      	movs	r2, #3
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 0203 	and.w	r2, r3, #3
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80b4 	beq.w	80057a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	4b60      	ldr	r3, [pc, #384]	; (80057c4 <HAL_GPIO_Init+0x30c>)
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	4a5f      	ldr	r2, [pc, #380]	; (80057c4 <HAL_GPIO_Init+0x30c>)
 8005648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800564c:	6453      	str	r3, [r2, #68]	; 0x44
 800564e:	4b5d      	ldr	r3, [pc, #372]	; (80057c4 <HAL_GPIO_Init+0x30c>)
 8005650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800565a:	4a5b      	ldr	r2, [pc, #364]	; (80057c8 <HAL_GPIO_Init+0x310>)
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	089b      	lsrs	r3, r3, #2
 8005660:	3302      	adds	r3, #2
 8005662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	220f      	movs	r2, #15
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	43db      	mvns	r3, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4013      	ands	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a52      	ldr	r2, [pc, #328]	; (80057cc <HAL_GPIO_Init+0x314>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d02b      	beq.n	80056de <HAL_GPIO_Init+0x226>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a51      	ldr	r2, [pc, #324]	; (80057d0 <HAL_GPIO_Init+0x318>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d025      	beq.n	80056da <HAL_GPIO_Init+0x222>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a50      	ldr	r2, [pc, #320]	; (80057d4 <HAL_GPIO_Init+0x31c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d01f      	beq.n	80056d6 <HAL_GPIO_Init+0x21e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a4f      	ldr	r2, [pc, #316]	; (80057d8 <HAL_GPIO_Init+0x320>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d019      	beq.n	80056d2 <HAL_GPIO_Init+0x21a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a4e      	ldr	r2, [pc, #312]	; (80057dc <HAL_GPIO_Init+0x324>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <HAL_GPIO_Init+0x216>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a4d      	ldr	r2, [pc, #308]	; (80057e0 <HAL_GPIO_Init+0x328>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00d      	beq.n	80056ca <HAL_GPIO_Init+0x212>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a4c      	ldr	r2, [pc, #304]	; (80057e4 <HAL_GPIO_Init+0x32c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d007      	beq.n	80056c6 <HAL_GPIO_Init+0x20e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a4b      	ldr	r2, [pc, #300]	; (80057e8 <HAL_GPIO_Init+0x330>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d101      	bne.n	80056c2 <HAL_GPIO_Init+0x20a>
 80056be:	2307      	movs	r3, #7
 80056c0:	e00e      	b.n	80056e0 <HAL_GPIO_Init+0x228>
 80056c2:	2308      	movs	r3, #8
 80056c4:	e00c      	b.n	80056e0 <HAL_GPIO_Init+0x228>
 80056c6:	2306      	movs	r3, #6
 80056c8:	e00a      	b.n	80056e0 <HAL_GPIO_Init+0x228>
 80056ca:	2305      	movs	r3, #5
 80056cc:	e008      	b.n	80056e0 <HAL_GPIO_Init+0x228>
 80056ce:	2304      	movs	r3, #4
 80056d0:	e006      	b.n	80056e0 <HAL_GPIO_Init+0x228>
 80056d2:	2303      	movs	r3, #3
 80056d4:	e004      	b.n	80056e0 <HAL_GPIO_Init+0x228>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e002      	b.n	80056e0 <HAL_GPIO_Init+0x228>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <HAL_GPIO_Init+0x228>
 80056de:	2300      	movs	r3, #0
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	f002 0203 	and.w	r2, r2, #3
 80056e6:	0092      	lsls	r2, r2, #2
 80056e8:	4093      	lsls	r3, r2
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056f0:	4935      	ldr	r1, [pc, #212]	; (80057c8 <HAL_GPIO_Init+0x310>)
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	089b      	lsrs	r3, r3, #2
 80056f6:	3302      	adds	r3, #2
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056fe:	4b3b      	ldr	r3, [pc, #236]	; (80057ec <HAL_GPIO_Init+0x334>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	43db      	mvns	r3, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4013      	ands	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005722:	4a32      	ldr	r2, [pc, #200]	; (80057ec <HAL_GPIO_Init+0x334>)
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005728:	4b30      	ldr	r3, [pc, #192]	; (80057ec <HAL_GPIO_Init+0x334>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	43db      	mvns	r3, r3
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	4013      	ands	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800574c:	4a27      	ldr	r2, [pc, #156]	; (80057ec <HAL_GPIO_Init+0x334>)
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005752:	4b26      	ldr	r3, [pc, #152]	; (80057ec <HAL_GPIO_Init+0x334>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	43db      	mvns	r3, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005776:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <HAL_GPIO_Init+0x334>)
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800577c:	4b1b      	ldr	r3, [pc, #108]	; (80057ec <HAL_GPIO_Init+0x334>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	43db      	mvns	r3, r3
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	4013      	ands	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057a0:	4a12      	ldr	r2, [pc, #72]	; (80057ec <HAL_GPIO_Init+0x334>)
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	3301      	adds	r3, #1
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	2b0f      	cmp	r3, #15
 80057b0:	f67f ae90 	bls.w	80054d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	3724      	adds	r7, #36	; 0x24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40023800 	.word	0x40023800
 80057c8:	40013800 	.word	0x40013800
 80057cc:	40020000 	.word	0x40020000
 80057d0:	40020400 	.word	0x40020400
 80057d4:	40020800 	.word	0x40020800
 80057d8:	40020c00 	.word	0x40020c00
 80057dc:	40021000 	.word	0x40021000
 80057e0:	40021400 	.word	0x40021400
 80057e4:	40021800 	.word	0x40021800
 80057e8:	40021c00 	.word	0x40021c00
 80057ec:	40013c00 	.word	0x40013c00

080057f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	887b      	ldrh	r3, [r7, #2]
 8005802:	4013      	ands	r3, r2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005808:	2301      	movs	r3, #1
 800580a:	73fb      	strb	r3, [r7, #15]
 800580c:	e001      	b.n	8005812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800580e:	2300      	movs	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005812:	7bfb      	ldrb	r3, [r7, #15]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	807b      	strh	r3, [r7, #2]
 800582c:	4613      	mov	r3, r2
 800582e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005830:	787b      	ldrb	r3, [r7, #1]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005836:	887a      	ldrh	r2, [r7, #2]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800583c:	e003      	b.n	8005846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800583e:	887b      	ldrh	r3, [r7, #2]
 8005840:	041a      	lsls	r2, r3, #16
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	619a      	str	r2, [r3, #24]
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e264      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d075      	beq.n	800595e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005872:	4ba3      	ldr	r3, [pc, #652]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 030c 	and.w	r3, r3, #12
 800587a:	2b04      	cmp	r3, #4
 800587c:	d00c      	beq.n	8005898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800587e:	4ba0      	ldr	r3, [pc, #640]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005886:	2b08      	cmp	r3, #8
 8005888:	d112      	bne.n	80058b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800588a:	4b9d      	ldr	r3, [pc, #628]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005896:	d10b      	bne.n	80058b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005898:	4b99      	ldr	r3, [pc, #612]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d05b      	beq.n	800595c <HAL_RCC_OscConfig+0x108>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d157      	bne.n	800595c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e23f      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b8:	d106      	bne.n	80058c8 <HAL_RCC_OscConfig+0x74>
 80058ba:	4b91      	ldr	r3, [pc, #580]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a90      	ldr	r2, [pc, #576]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	e01d      	b.n	8005904 <HAL_RCC_OscConfig+0xb0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058d0:	d10c      	bne.n	80058ec <HAL_RCC_OscConfig+0x98>
 80058d2:	4b8b      	ldr	r3, [pc, #556]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a8a      	ldr	r2, [pc, #552]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80058d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	4b88      	ldr	r3, [pc, #544]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a87      	ldr	r2, [pc, #540]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e00b      	b.n	8005904 <HAL_RCC_OscConfig+0xb0>
 80058ec:	4b84      	ldr	r3, [pc, #528]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a83      	ldr	r2, [pc, #524]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80058f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	4b81      	ldr	r3, [pc, #516]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a80      	ldr	r2, [pc, #512]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80058fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d013      	beq.n	8005934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800590c:	f7fe fe10 	bl	8004530 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005914:	f7fe fe0c 	bl	8004530 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b64      	cmp	r3, #100	; 0x64
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e204      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005926:	4b76      	ldr	r3, [pc, #472]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCC_OscConfig+0xc0>
 8005932:	e014      	b.n	800595e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005934:	f7fe fdfc 	bl	8004530 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800593c:	f7fe fdf8 	bl	8004530 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b64      	cmp	r3, #100	; 0x64
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e1f0      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800594e:	4b6c      	ldr	r3, [pc, #432]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f0      	bne.n	800593c <HAL_RCC_OscConfig+0xe8>
 800595a:	e000      	b.n	800595e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800595c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d063      	beq.n	8005a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800596a:	4b65      	ldr	r3, [pc, #404]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 030c 	and.w	r3, r3, #12
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005976:	4b62      	ldr	r3, [pc, #392]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800597e:	2b08      	cmp	r3, #8
 8005980:	d11c      	bne.n	80059bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005982:	4b5f      	ldr	r3, [pc, #380]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d116      	bne.n	80059bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800598e:	4b5c      	ldr	r3, [pc, #368]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <HAL_RCC_OscConfig+0x152>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d001      	beq.n	80059a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e1c4      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a6:	4b56      	ldr	r3, [pc, #344]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	4952      	ldr	r1, [pc, #328]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ba:	e03a      	b.n	8005a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d020      	beq.n	8005a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059c4:	4b4f      	ldr	r3, [pc, #316]	; (8005b04 <HAL_RCC_OscConfig+0x2b0>)
 80059c6:	2201      	movs	r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ca:	f7fe fdb1 	bl	8004530 <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d0:	e008      	b.n	80059e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059d2:	f7fe fdad 	bl	8004530 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d901      	bls.n	80059e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e1a5      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e4:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0f0      	beq.n	80059d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f0:	4b43      	ldr	r3, [pc, #268]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	4940      	ldr	r1, [pc, #256]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	600b      	str	r3, [r1, #0]
 8005a04:	e015      	b.n	8005a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a06:	4b3f      	ldr	r3, [pc, #252]	; (8005b04 <HAL_RCC_OscConfig+0x2b0>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fe fd90 	bl	8004530 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a14:	f7fe fd8c 	bl	8004530 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e184      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a26:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d030      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d016      	beq.n	8005a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a46:	4b30      	ldr	r3, [pc, #192]	; (8005b08 <HAL_RCC_OscConfig+0x2b4>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4c:	f7fe fd70 	bl	8004530 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a54:	f7fe fd6c 	bl	8004530 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e164      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a66:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0f0      	beq.n	8005a54 <HAL_RCC_OscConfig+0x200>
 8005a72:	e015      	b.n	8005aa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a74:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <HAL_RCC_OscConfig+0x2b4>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7a:	f7fe fd59 	bl	8004530 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a82:	f7fe fd55 	bl	8004530 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e14d      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a94:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f0      	bne.n	8005a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 80a0 	beq.w	8005bee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab2:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10f      	bne.n	8005ade <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	4a0e      	ldr	r2, [pc, #56]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005acc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <HAL_RCC_OscConfig+0x2ac>)
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad6:	60bb      	str	r3, [r7, #8]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ada:	2301      	movs	r3, #1
 8005adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ade:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <HAL_RCC_OscConfig+0x2b8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d121      	bne.n	8005b2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aea:	4b08      	ldr	r3, [pc, #32]	; (8005b0c <HAL_RCC_OscConfig+0x2b8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a07      	ldr	r2, [pc, #28]	; (8005b0c <HAL_RCC_OscConfig+0x2b8>)
 8005af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005af6:	f7fe fd1b 	bl	8004530 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005afc:	e011      	b.n	8005b22 <HAL_RCC_OscConfig+0x2ce>
 8005afe:	bf00      	nop
 8005b00:	40023800 	.word	0x40023800
 8005b04:	42470000 	.word	0x42470000
 8005b08:	42470e80 	.word	0x42470e80
 8005b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b10:	f7fe fd0e 	bl	8004530 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e106      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b22:	4b85      	ldr	r3, [pc, #532]	; (8005d38 <HAL_RCC_OscConfig+0x4e4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d106      	bne.n	8005b44 <HAL_RCC_OscConfig+0x2f0>
 8005b36:	4b81      	ldr	r3, [pc, #516]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	4a80      	ldr	r2, [pc, #512]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	6713      	str	r3, [r2, #112]	; 0x70
 8005b42:	e01c      	b.n	8005b7e <HAL_RCC_OscConfig+0x32a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	2b05      	cmp	r3, #5
 8005b4a:	d10c      	bne.n	8005b66 <HAL_RCC_OscConfig+0x312>
 8005b4c:	4b7b      	ldr	r3, [pc, #492]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b50:	4a7a      	ldr	r2, [pc, #488]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005b52:	f043 0304 	orr.w	r3, r3, #4
 8005b56:	6713      	str	r3, [r2, #112]	; 0x70
 8005b58:	4b78      	ldr	r3, [pc, #480]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	4a77      	ldr	r2, [pc, #476]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005b5e:	f043 0301 	orr.w	r3, r3, #1
 8005b62:	6713      	str	r3, [r2, #112]	; 0x70
 8005b64:	e00b      	b.n	8005b7e <HAL_RCC_OscConfig+0x32a>
 8005b66:	4b75      	ldr	r3, [pc, #468]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6a:	4a74      	ldr	r2, [pc, #464]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005b6c:	f023 0301 	bic.w	r3, r3, #1
 8005b70:	6713      	str	r3, [r2, #112]	; 0x70
 8005b72:	4b72      	ldr	r3, [pc, #456]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b76:	4a71      	ldr	r2, [pc, #452]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005b78:	f023 0304 	bic.w	r3, r3, #4
 8005b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d015      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b86:	f7fe fcd3 	bl	8004530 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8c:	e00a      	b.n	8005ba4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8e:	f7fe fccf 	bl	8004530 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e0c5      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba4:	4b65      	ldr	r3, [pc, #404]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0ee      	beq.n	8005b8e <HAL_RCC_OscConfig+0x33a>
 8005bb0:	e014      	b.n	8005bdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb2:	f7fe fcbd 	bl	8004530 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bb8:	e00a      	b.n	8005bd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bba:	f7fe fcb9 	bl	8004530 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e0af      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bd0:	4b5a      	ldr	r3, [pc, #360]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1ee      	bne.n	8005bba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d105      	bne.n	8005bee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be2:	4b56      	ldr	r3, [pc, #344]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	4a55      	ldr	r2, [pc, #340]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 809b 	beq.w	8005d2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bf8:	4b50      	ldr	r3, [pc, #320]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 030c 	and.w	r3, r3, #12
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d05c      	beq.n	8005cbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d141      	bne.n	8005c90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0c:	4b4c      	ldr	r3, [pc, #304]	; (8005d40 <HAL_RCC_OscConfig+0x4ec>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c12:	f7fe fc8d 	bl	8004530 <HAL_GetTick>
 8005c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c18:	e008      	b.n	8005c2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c1a:	f7fe fc89 	bl	8004530 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e081      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2c:	4b43      	ldr	r3, [pc, #268]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f0      	bne.n	8005c1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	019b      	lsls	r3, r3, #6
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	3b01      	subs	r3, #1
 8005c52:	041b      	lsls	r3, r3, #16
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	061b      	lsls	r3, r3, #24
 8005c5c:	4937      	ldr	r1, [pc, #220]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c62:	4b37      	ldr	r3, [pc, #220]	; (8005d40 <HAL_RCC_OscConfig+0x4ec>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c68:	f7fe fc62 	bl	8004530 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c70:	f7fe fc5e 	bl	8004530 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e056      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c82:	4b2e      	ldr	r3, [pc, #184]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0f0      	beq.n	8005c70 <HAL_RCC_OscConfig+0x41c>
 8005c8e:	e04e      	b.n	8005d2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c90:	4b2b      	ldr	r3, [pc, #172]	; (8005d40 <HAL_RCC_OscConfig+0x4ec>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c96:	f7fe fc4b 	bl	8004530 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c9e:	f7fe fc47 	bl	8004530 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e03f      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb0:	4b22      	ldr	r3, [pc, #136]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f0      	bne.n	8005c9e <HAL_RCC_OscConfig+0x44a>
 8005cbc:	e037      	b.n	8005d2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e032      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cca:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <HAL_RCC_OscConfig+0x4e8>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d028      	beq.n	8005d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d121      	bne.n	8005d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d11a      	bne.n	8005d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d111      	bne.n	8005d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	085b      	lsrs	r3, r3, #1
 8005d12:	3b01      	subs	r3, #1
 8005d14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d107      	bne.n	8005d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d001      	beq.n	8005d2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40007000 	.word	0x40007000
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	42470060 	.word	0x42470060

08005d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e0cc      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d58:	4b68      	ldr	r3, [pc, #416]	; (8005efc <HAL_RCC_ClockConfig+0x1b8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d90c      	bls.n	8005d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d66:	4b65      	ldr	r3, [pc, #404]	; (8005efc <HAL_RCC_ClockConfig+0x1b8>)
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6e:	4b63      	ldr	r3, [pc, #396]	; (8005efc <HAL_RCC_ClockConfig+0x1b8>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d001      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0b8      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d020      	beq.n	8005dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d98:	4b59      	ldr	r3, [pc, #356]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	4a58      	ldr	r2, [pc, #352]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005db0:	4b53      	ldr	r3, [pc, #332]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4a52      	ldr	r2, [pc, #328]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dbc:	4b50      	ldr	r3, [pc, #320]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	494d      	ldr	r1, [pc, #308]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d044      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d107      	bne.n	8005df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de2:	4b47      	ldr	r3, [pc, #284]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d119      	bne.n	8005e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e07f      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d003      	beq.n	8005e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d107      	bne.n	8005e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e02:	4b3f      	ldr	r3, [pc, #252]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e06f      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e12:	4b3b      	ldr	r3, [pc, #236]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e067      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e22:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f023 0203 	bic.w	r2, r3, #3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	4934      	ldr	r1, [pc, #208]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e34:	f7fe fb7c 	bl	8004530 <HAL_GetTick>
 8005e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3a:	e00a      	b.n	8005e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e3c:	f7fe fb78 	bl	8004530 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e04f      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e52:	4b2b      	ldr	r3, [pc, #172]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 020c 	and.w	r2, r3, #12
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d1eb      	bne.n	8005e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e64:	4b25      	ldr	r3, [pc, #148]	; (8005efc <HAL_RCC_ClockConfig+0x1b8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d20c      	bcs.n	8005e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e72:	4b22      	ldr	r3, [pc, #136]	; (8005efc <HAL_RCC_ClockConfig+0x1b8>)
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7a:	4b20      	ldr	r3, [pc, #128]	; (8005efc <HAL_RCC_ClockConfig+0x1b8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d001      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e032      	b.n	8005ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d008      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e98:	4b19      	ldr	r3, [pc, #100]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4916      	ldr	r1, [pc, #88]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d009      	beq.n	8005eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eb6:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	490e      	ldr	r1, [pc, #56]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eca:	f000 f821 	bl	8005f10 <HAL_RCC_GetSysClockFreq>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	091b      	lsrs	r3, r3, #4
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	490a      	ldr	r1, [pc, #40]	; (8005f04 <HAL_RCC_ClockConfig+0x1c0>)
 8005edc:	5ccb      	ldrb	r3, [r1, r3]
 8005ede:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee2:	4a09      	ldr	r2, [pc, #36]	; (8005f08 <HAL_RCC_ClockConfig+0x1c4>)
 8005ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ee6:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fe fadc 	bl	80044a8 <HAL_InitTick>

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	40023c00 	.word	0x40023c00
 8005f00:	40023800 	.word	0x40023800
 8005f04:	08008860 	.word	0x08008860
 8005f08:	2000001c 	.word	0x2000001c
 8005f0c:	20000020 	.word	0x20000020

08005f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	2300      	movs	r3, #0
 8005f22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f28:	4b67      	ldr	r3, [pc, #412]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 030c 	and.w	r3, r3, #12
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d00d      	beq.n	8005f50 <HAL_RCC_GetSysClockFreq+0x40>
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	f200 80bd 	bhi.w	80060b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <HAL_RCC_GetSysClockFreq+0x34>
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d003      	beq.n	8005f4a <HAL_RCC_GetSysClockFreq+0x3a>
 8005f42:	e0b7      	b.n	80060b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f44:	4b61      	ldr	r3, [pc, #388]	; (80060cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f46:	60bb      	str	r3, [r7, #8]
       break;
 8005f48:	e0b7      	b.n	80060ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f4a:	4b61      	ldr	r3, [pc, #388]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005f4c:	60bb      	str	r3, [r7, #8]
      break;
 8005f4e:	e0b4      	b.n	80060ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f50:	4b5d      	ldr	r3, [pc, #372]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f5a:	4b5b      	ldr	r3, [pc, #364]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d04d      	beq.n	8006002 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f66:	4b58      	ldr	r3, [pc, #352]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	099b      	lsrs	r3, r3, #6
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f76:	f04f 0100 	mov.w	r1, #0
 8005f7a:	ea02 0800 	and.w	r8, r2, r0
 8005f7e:	ea03 0901 	and.w	r9, r3, r1
 8005f82:	4640      	mov	r0, r8
 8005f84:	4649      	mov	r1, r9
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	014b      	lsls	r3, r1, #5
 8005f90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f94:	0142      	lsls	r2, r0, #5
 8005f96:	4610      	mov	r0, r2
 8005f98:	4619      	mov	r1, r3
 8005f9a:	ebb0 0008 	subs.w	r0, r0, r8
 8005f9e:	eb61 0109 	sbc.w	r1, r1, r9
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	f04f 0300 	mov.w	r3, #0
 8005faa:	018b      	lsls	r3, r1, #6
 8005fac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005fb0:	0182      	lsls	r2, r0, #6
 8005fb2:	1a12      	subs	r2, r2, r0
 8005fb4:	eb63 0301 	sbc.w	r3, r3, r1
 8005fb8:	f04f 0000 	mov.w	r0, #0
 8005fbc:	f04f 0100 	mov.w	r1, #0
 8005fc0:	00d9      	lsls	r1, r3, #3
 8005fc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fc6:	00d0      	lsls	r0, r2, #3
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	eb12 0208 	adds.w	r2, r2, r8
 8005fd0:	eb43 0309 	adc.w	r3, r3, r9
 8005fd4:	f04f 0000 	mov.w	r0, #0
 8005fd8:	f04f 0100 	mov.w	r1, #0
 8005fdc:	0259      	lsls	r1, r3, #9
 8005fde:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005fe2:	0250      	lsls	r0, r2, #9
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4610      	mov	r0, r2
 8005fea:	4619      	mov	r1, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f04f 0300 	mov.w	r3, #0
 8005ff4:	f7fa fd06 	bl	8000a04 <__aeabi_uldivmod>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	e04a      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006002:	4b31      	ldr	r3, [pc, #196]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	099b      	lsrs	r3, r3, #6
 8006008:	461a      	mov	r2, r3
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006012:	f04f 0100 	mov.w	r1, #0
 8006016:	ea02 0400 	and.w	r4, r2, r0
 800601a:	ea03 0501 	and.w	r5, r3, r1
 800601e:	4620      	mov	r0, r4
 8006020:	4629      	mov	r1, r5
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	014b      	lsls	r3, r1, #5
 800602c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006030:	0142      	lsls	r2, r0, #5
 8006032:	4610      	mov	r0, r2
 8006034:	4619      	mov	r1, r3
 8006036:	1b00      	subs	r0, r0, r4
 8006038:	eb61 0105 	sbc.w	r1, r1, r5
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	018b      	lsls	r3, r1, #6
 8006046:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800604a:	0182      	lsls	r2, r0, #6
 800604c:	1a12      	subs	r2, r2, r0
 800604e:	eb63 0301 	sbc.w	r3, r3, r1
 8006052:	f04f 0000 	mov.w	r0, #0
 8006056:	f04f 0100 	mov.w	r1, #0
 800605a:	00d9      	lsls	r1, r3, #3
 800605c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006060:	00d0      	lsls	r0, r2, #3
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	1912      	adds	r2, r2, r4
 8006068:	eb45 0303 	adc.w	r3, r5, r3
 800606c:	f04f 0000 	mov.w	r0, #0
 8006070:	f04f 0100 	mov.w	r1, #0
 8006074:	0299      	lsls	r1, r3, #10
 8006076:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800607a:	0290      	lsls	r0, r2, #10
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4610      	mov	r0, r2
 8006082:	4619      	mov	r1, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	461a      	mov	r2, r3
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	f7fa fcba 	bl	8000a04 <__aeabi_uldivmod>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	4613      	mov	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	0c1b      	lsrs	r3, r3, #16
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	3301      	adds	r3, #1
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	60bb      	str	r3, [r7, #8]
      break;
 80060b2:	e002      	b.n	80060ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060b4:	4b05      	ldr	r3, [pc, #20]	; (80060cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80060b6:	60bb      	str	r3, [r7, #8]
      break;
 80060b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060ba:	68bb      	ldr	r3, [r7, #8]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80060c6:	bf00      	nop
 80060c8:	40023800 	.word	0x40023800
 80060cc:	00f42400 	.word	0x00f42400
 80060d0:	007a1200 	.word	0x007a1200

080060d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060d8:	4b03      	ldr	r3, [pc, #12]	; (80060e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80060da:	681b      	ldr	r3, [r3, #0]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	2000001c 	.word	0x2000001c

080060ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060f0:	f7ff fff0 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 80060f4:	4602      	mov	r2, r0
 80060f6:	4b05      	ldr	r3, [pc, #20]	; (800610c <HAL_RCC_GetPCLK1Freq+0x20>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	0a9b      	lsrs	r3, r3, #10
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	4903      	ldr	r1, [pc, #12]	; (8006110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006102:	5ccb      	ldrb	r3, [r1, r3]
 8006104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	bd80      	pop	{r7, pc}
 800610c:	40023800 	.word	0x40023800
 8006110:	08008870 	.word	0x08008870

08006114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006118:	f7ff ffdc 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 800611c:	4602      	mov	r2, r0
 800611e:	4b05      	ldr	r3, [pc, #20]	; (8006134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	0b5b      	lsrs	r3, r3, #13
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	4903      	ldr	r1, [pc, #12]	; (8006138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800612a:	5ccb      	ldrb	r3, [r1, r3]
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006130:	4618      	mov	r0, r3
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40023800 	.word	0x40023800
 8006138:	08008870 	.word	0x08008870

0800613c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e041      	b.n	80061d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fd fefc 	bl	8003f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3304      	adds	r3, #4
 8006178:	4619      	mov	r1, r3
 800617a:	4610      	mov	r0, r2
 800617c:	f000 fdda 	bl	8006d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d001      	beq.n	80061f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e046      	b.n	8006282 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a23      	ldr	r2, [pc, #140]	; (8006290 <HAL_TIM_Base_Start+0xb4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d022      	beq.n	800624c <HAL_TIM_Base_Start+0x70>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620e:	d01d      	beq.n	800624c <HAL_TIM_Base_Start+0x70>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1f      	ldr	r2, [pc, #124]	; (8006294 <HAL_TIM_Base_Start+0xb8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_TIM_Base_Start+0x70>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <HAL_TIM_Base_Start+0xbc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <HAL_TIM_Base_Start+0x70>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1c      	ldr	r2, [pc, #112]	; (800629c <HAL_TIM_Base_Start+0xc0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_TIM_Base_Start+0x70>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <HAL_TIM_Base_Start+0xc4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_TIM_Base_Start+0x70>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <HAL_TIM_Base_Start+0xc8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_TIM_Base_Start+0x70>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <HAL_TIM_Base_Start+0xcc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d111      	bne.n	8006270 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b06      	cmp	r3, #6
 800625c:	d010      	beq.n	8006280 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0201 	orr.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626e:	e007      	b.n	8006280 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40010000 	.word	0x40010000
 8006294:	40000400 	.word	0x40000400
 8006298:	40000800 	.word	0x40000800
 800629c:	40000c00 	.word	0x40000c00
 80062a0:	40010400 	.word	0x40010400
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40001800 	.word	0x40001800

080062ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d001      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e04e      	b.n	8006362 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a23      	ldr	r2, [pc, #140]	; (8006370 <HAL_TIM_Base_Start_IT+0xc4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d022      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ee:	d01d      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <HAL_TIM_Base_Start_IT+0xc8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d018      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1e      	ldr	r2, [pc, #120]	; (8006378 <HAL_TIM_Base_Start_IT+0xcc>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d013      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a1c      	ldr	r2, [pc, #112]	; (800637c <HAL_TIM_Base_Start_IT+0xd0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00e      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1b      	ldr	r2, [pc, #108]	; (8006380 <HAL_TIM_Base_Start_IT+0xd4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d009      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a19      	ldr	r2, [pc, #100]	; (8006384 <HAL_TIM_Base_Start_IT+0xd8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x80>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a18      	ldr	r2, [pc, #96]	; (8006388 <HAL_TIM_Base_Start_IT+0xdc>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d111      	bne.n	8006350 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b06      	cmp	r3, #6
 800633c:	d010      	beq.n	8006360 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0201 	orr.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634e:	e007      	b.n	8006360 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	40010000 	.word	0x40010000
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800
 800637c:	40000c00 	.word	0x40000c00
 8006380:	40010400 	.word	0x40010400
 8006384:	40014000 	.word	0x40014000
 8006388:	40001800 	.word	0x40001800

0800638c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e041      	b.n	8006422 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f839 	bl	800642a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4619      	mov	r1, r3
 80063ca:	4610      	mov	r0, r2
 80063cc:	f000 fcb2 	bl	8006d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d109      	bne.n	8006464 <HAL_TIM_OC_Start+0x24>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b01      	cmp	r3, #1
 800645a:	bf14      	ite	ne
 800645c:	2301      	movne	r3, #1
 800645e:	2300      	moveq	r3, #0
 8006460:	b2db      	uxtb	r3, r3
 8006462:	e022      	b.n	80064aa <HAL_TIM_OC_Start+0x6a>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b04      	cmp	r3, #4
 8006468:	d109      	bne.n	800647e <HAL_TIM_OC_Start+0x3e>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b01      	cmp	r3, #1
 8006474:	bf14      	ite	ne
 8006476:	2301      	movne	r3, #1
 8006478:	2300      	moveq	r3, #0
 800647a:	b2db      	uxtb	r3, r3
 800647c:	e015      	b.n	80064aa <HAL_TIM_OC_Start+0x6a>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b08      	cmp	r3, #8
 8006482:	d109      	bne.n	8006498 <HAL_TIM_OC_Start+0x58>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b01      	cmp	r3, #1
 800648e:	bf14      	ite	ne
 8006490:	2301      	movne	r3, #1
 8006492:	2300      	moveq	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	e008      	b.n	80064aa <HAL_TIM_OC_Start+0x6a>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e07c      	b.n	80065ac <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <HAL_TIM_OC_Start+0x82>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c0:	e013      	b.n	80064ea <HAL_TIM_OC_Start+0xaa>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d104      	bne.n	80064d2 <HAL_TIM_OC_Start+0x92>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d0:	e00b      	b.n	80064ea <HAL_TIM_OC_Start+0xaa>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d104      	bne.n	80064e2 <HAL_TIM_OC_Start+0xa2>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e0:	e003      	b.n	80064ea <HAL_TIM_OC_Start+0xaa>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2201      	movs	r2, #1
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 ff99 	bl	800742a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a2d      	ldr	r2, [pc, #180]	; (80065b4 <HAL_TIM_OC_Start+0x174>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d004      	beq.n	800650c <HAL_TIM_OC_Start+0xcc>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2c      	ldr	r2, [pc, #176]	; (80065b8 <HAL_TIM_OC_Start+0x178>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d101      	bne.n	8006510 <HAL_TIM_OC_Start+0xd0>
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <HAL_TIM_OC_Start+0xd2>
 8006510:	2300      	movs	r3, #0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d007      	beq.n	8006526 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006524:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a22      	ldr	r2, [pc, #136]	; (80065b4 <HAL_TIM_OC_Start+0x174>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d022      	beq.n	8006576 <HAL_TIM_OC_Start+0x136>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006538:	d01d      	beq.n	8006576 <HAL_TIM_OC_Start+0x136>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1f      	ldr	r2, [pc, #124]	; (80065bc <HAL_TIM_OC_Start+0x17c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d018      	beq.n	8006576 <HAL_TIM_OC_Start+0x136>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1d      	ldr	r2, [pc, #116]	; (80065c0 <HAL_TIM_OC_Start+0x180>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <HAL_TIM_OC_Start+0x136>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1c      	ldr	r2, [pc, #112]	; (80065c4 <HAL_TIM_OC_Start+0x184>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00e      	beq.n	8006576 <HAL_TIM_OC_Start+0x136>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a16      	ldr	r2, [pc, #88]	; (80065b8 <HAL_TIM_OC_Start+0x178>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d009      	beq.n	8006576 <HAL_TIM_OC_Start+0x136>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <HAL_TIM_OC_Start+0x188>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d004      	beq.n	8006576 <HAL_TIM_OC_Start+0x136>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a16      	ldr	r2, [pc, #88]	; (80065cc <HAL_TIM_OC_Start+0x18c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d111      	bne.n	800659a <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b06      	cmp	r3, #6
 8006586:	d010      	beq.n	80065aa <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0201 	orr.w	r2, r2, #1
 8006596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006598:	e007      	b.n	80065aa <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f042 0201 	orr.w	r2, r2, #1
 80065a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40010400 	.word	0x40010400
 80065bc:	40000400 	.word	0x40000400
 80065c0:	40000800 	.word	0x40000800
 80065c4:	40000c00 	.word	0x40000c00
 80065c8:	40014000 	.word	0x40014000
 80065cc:	40001800 	.word	0x40001800

080065d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e041      	b.n	8006666 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d106      	bne.n	80065fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f839 	bl	800666e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3304      	adds	r3, #4
 800660c:	4619      	mov	r1, r3
 800660e:	4610      	mov	r0, r2
 8006610:	f000 fb90 	bl	8006d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b02      	cmp	r3, #2
 8006696:	d122      	bne.n	80066de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d11b      	bne.n	80066de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f06f 0202 	mvn.w	r2, #2
 80066ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	f003 0303 	and.w	r3, r3, #3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fb16 	bl	8006cf6 <HAL_TIM_IC_CaptureCallback>
 80066ca:	e005      	b.n	80066d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fb08 	bl	8006ce2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fb19 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d122      	bne.n	8006732 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d11b      	bne.n	8006732 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f06f 0204 	mvn.w	r2, #4
 8006702:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 faec 	bl	8006cf6 <HAL_TIM_IC_CaptureCallback>
 800671e:	e005      	b.n	800672c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fade 	bl	8006ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 faef 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b08      	cmp	r3, #8
 800673e:	d122      	bne.n	8006786 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b08      	cmp	r3, #8
 800674c:	d11b      	bne.n	8006786 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f06f 0208 	mvn.w	r2, #8
 8006756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2204      	movs	r2, #4
 800675c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fac2 	bl	8006cf6 <HAL_TIM_IC_CaptureCallback>
 8006772:	e005      	b.n	8006780 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fab4 	bl	8006ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fac5 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f003 0310 	and.w	r3, r3, #16
 8006790:	2b10      	cmp	r3, #16
 8006792:	d122      	bne.n	80067da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f003 0310 	and.w	r3, r3, #16
 800679e:	2b10      	cmp	r3, #16
 80067a0:	d11b      	bne.n	80067da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f06f 0210 	mvn.w	r2, #16
 80067aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2208      	movs	r2, #8
 80067b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fa98 	bl	8006cf6 <HAL_TIM_IC_CaptureCallback>
 80067c6:	e005      	b.n	80067d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fa8a 	bl	8006ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa9b 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d10e      	bne.n	8006806 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d107      	bne.n	8006806 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f06f 0201 	mvn.w	r2, #1
 80067fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7fb fd1d 	bl	8002240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	2b80      	cmp	r3, #128	; 0x80
 8006812:	d10e      	bne.n	8006832 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	2b80      	cmp	r3, #128	; 0x80
 8006820:	d107      	bne.n	8006832 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800682a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fef9 	bl	8007624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683c:	2b40      	cmp	r3, #64	; 0x40
 800683e:	d10e      	bne.n	800685e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d107      	bne.n	800685e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fa60 	bl	8006d1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b20      	cmp	r3, #32
 800686a:	d10e      	bne.n	800688a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b20      	cmp	r3, #32
 8006878:	d107      	bne.n	800688a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f06f 0220 	mvn.w	r2, #32
 8006882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fec3 	bl	8007610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e048      	b.n	8006944 <HAL_TIM_OC_ConfigChannel+0xb0>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b0c      	cmp	r3, #12
 80068be:	d839      	bhi.n	8006934 <HAL_TIM_OC_ConfigChannel+0xa0>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068fd 	.word	0x080068fd
 80068cc:	08006935 	.word	0x08006935
 80068d0:	08006935 	.word	0x08006935
 80068d4:	08006935 	.word	0x08006935
 80068d8:	0800690b 	.word	0x0800690b
 80068dc:	08006935 	.word	0x08006935
 80068e0:	08006935 	.word	0x08006935
 80068e4:	08006935 	.word	0x08006935
 80068e8:	08006919 	.word	0x08006919
 80068ec:	08006935 	.word	0x08006935
 80068f0:	08006935 	.word	0x08006935
 80068f4:	08006935 	.word	0x08006935
 80068f8:	08006927 	.word	0x08006927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fab6 	bl	8006e74 <TIM_OC1_SetConfig>
      break;
 8006908:	e017      	b.n	800693a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fb1f 	bl	8006f54 <TIM_OC2_SetConfig>
      break;
 8006916:	e010      	b.n	800693a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fb8e 	bl	8007040 <TIM_OC3_SetConfig>
      break;
 8006924:	e009      	b.n	800693a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fbfb 	bl	8007128 <TIM_OC4_SetConfig>
      break;
 8006932:	e002      	b.n	800693a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	75fb      	strb	r3, [r7, #23]
      break;
 8006938:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006942:	7dfb      	ldrb	r3, [r7, #23]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006966:	2302      	movs	r3, #2
 8006968:	e0ae      	b.n	8006ac8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b0c      	cmp	r3, #12
 8006976:	f200 809f 	bhi.w	8006ab8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	080069b5 	.word	0x080069b5
 8006984:	08006ab9 	.word	0x08006ab9
 8006988:	08006ab9 	.word	0x08006ab9
 800698c:	08006ab9 	.word	0x08006ab9
 8006990:	080069f5 	.word	0x080069f5
 8006994:	08006ab9 	.word	0x08006ab9
 8006998:	08006ab9 	.word	0x08006ab9
 800699c:	08006ab9 	.word	0x08006ab9
 80069a0:	08006a37 	.word	0x08006a37
 80069a4:	08006ab9 	.word	0x08006ab9
 80069a8:	08006ab9 	.word	0x08006ab9
 80069ac:	08006ab9 	.word	0x08006ab9
 80069b0:	08006a77 	.word	0x08006a77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fa5a 	bl	8006e74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699a      	ldr	r2, [r3, #24]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0208 	orr.w	r2, r2, #8
 80069ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0204 	bic.w	r2, r2, #4
 80069de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6999      	ldr	r1, [r3, #24]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	691a      	ldr	r2, [r3, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	619a      	str	r2, [r3, #24]
      break;
 80069f2:	e064      	b.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 faaa 	bl	8006f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6999      	ldr	r1, [r3, #24]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	021a      	lsls	r2, r3, #8
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	619a      	str	r2, [r3, #24]
      break;
 8006a34:	e043      	b.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 faff 	bl	8007040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0208 	orr.w	r2, r2, #8
 8006a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69da      	ldr	r2, [r3, #28]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0204 	bic.w	r2, r2, #4
 8006a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69d9      	ldr	r1, [r3, #28]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	61da      	str	r2, [r3, #28]
      break;
 8006a74:	e023      	b.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 fb53 	bl	8007128 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69d9      	ldr	r1, [r3, #28]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	021a      	lsls	r2, r3, #8
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	61da      	str	r2, [r3, #28]
      break;
 8006ab6:	e002      	b.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	75fb      	strb	r3, [r7, #23]
      break;
 8006abc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_TIM_ConfigClockSource+0x1c>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e0b4      	b.n	8006c56 <HAL_TIM_ConfigClockSource+0x186>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b24:	d03e      	beq.n	8006ba4 <HAL_TIM_ConfigClockSource+0xd4>
 8006b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b2a:	f200 8087 	bhi.w	8006c3c <HAL_TIM_ConfigClockSource+0x16c>
 8006b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b32:	f000 8086 	beq.w	8006c42 <HAL_TIM_ConfigClockSource+0x172>
 8006b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3a:	d87f      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x16c>
 8006b3c:	2b70      	cmp	r3, #112	; 0x70
 8006b3e:	d01a      	beq.n	8006b76 <HAL_TIM_ConfigClockSource+0xa6>
 8006b40:	2b70      	cmp	r3, #112	; 0x70
 8006b42:	d87b      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x16c>
 8006b44:	2b60      	cmp	r3, #96	; 0x60
 8006b46:	d050      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x11a>
 8006b48:	2b60      	cmp	r3, #96	; 0x60
 8006b4a:	d877      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x16c>
 8006b4c:	2b50      	cmp	r3, #80	; 0x50
 8006b4e:	d03c      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0xfa>
 8006b50:	2b50      	cmp	r3, #80	; 0x50
 8006b52:	d873      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x16c>
 8006b54:	2b40      	cmp	r3, #64	; 0x40
 8006b56:	d058      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0x13a>
 8006b58:	2b40      	cmp	r3, #64	; 0x40
 8006b5a:	d86f      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x16c>
 8006b5c:	2b30      	cmp	r3, #48	; 0x30
 8006b5e:	d064      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x15a>
 8006b60:	2b30      	cmp	r3, #48	; 0x30
 8006b62:	d86b      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x16c>
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d060      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x15a>
 8006b68:	2b20      	cmp	r3, #32
 8006b6a:	d867      	bhi.n	8006c3c <HAL_TIM_ConfigClockSource+0x16c>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d05c      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x15a>
 8006b70:	2b10      	cmp	r3, #16
 8006b72:	d05a      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x15a>
 8006b74:	e062      	b.n	8006c3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	6899      	ldr	r1, [r3, #8]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f000 fc30 	bl	80073ea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	609a      	str	r2, [r3, #8]
      break;
 8006ba2:	e04f      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6818      	ldr	r0, [r3, #0]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	6899      	ldr	r1, [r3, #8]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f000 fc19 	bl	80073ea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bc6:	609a      	str	r2, [r3, #8]
      break;
 8006bc8:	e03c      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6859      	ldr	r1, [r3, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f000 fb8d 	bl	80072f6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2150      	movs	r1, #80	; 0x50
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fbe6 	bl	80073b4 <TIM_ITRx_SetConfig>
      break;
 8006be8:	e02c      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6859      	ldr	r1, [r3, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f000 fbac 	bl	8007354 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2160      	movs	r1, #96	; 0x60
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fbd6 	bl	80073b4 <TIM_ITRx_SetConfig>
      break;
 8006c08:	e01c      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6859      	ldr	r1, [r3, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f000 fb6d 	bl	80072f6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2140      	movs	r1, #64	; 0x40
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fbc6 	bl	80073b4 <TIM_ITRx_SetConfig>
      break;
 8006c28:	e00c      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4619      	mov	r1, r3
 8006c34:	4610      	mov	r0, r2
 8006c36:	f000 fbbd 	bl	80073b4 <TIM_ITRx_SetConfig>
      break;
 8006c3a:	e003      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c40:	e000      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e031      	b.n	8006cda <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2202      	movs	r2, #2
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 faa3 	bl	80071d4 <TIM_SlaveTimer_SetConfig>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d009      	beq.n	8006ca8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e018      	b.n	8006cda <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68da      	ldr	r2, [r3, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006cc6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
	...

08006d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a40      	ldr	r2, [pc, #256]	; (8006e48 <TIM_Base_SetConfig+0x114>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d013      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d52:	d00f      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a3d      	ldr	r2, [pc, #244]	; (8006e4c <TIM_Base_SetConfig+0x118>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00b      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a3c      	ldr	r2, [pc, #240]	; (8006e50 <TIM_Base_SetConfig+0x11c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d007      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a3b      	ldr	r2, [pc, #236]	; (8006e54 <TIM_Base_SetConfig+0x120>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d003      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a3a      	ldr	r2, [pc, #232]	; (8006e58 <TIM_Base_SetConfig+0x124>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d108      	bne.n	8006d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a2f      	ldr	r2, [pc, #188]	; (8006e48 <TIM_Base_SetConfig+0x114>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d02b      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d94:	d027      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a2c      	ldr	r2, [pc, #176]	; (8006e4c <TIM_Base_SetConfig+0x118>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d023      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a2b      	ldr	r2, [pc, #172]	; (8006e50 <TIM_Base_SetConfig+0x11c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d01f      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2a      	ldr	r2, [pc, #168]	; (8006e54 <TIM_Base_SetConfig+0x120>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d01b      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a29      	ldr	r2, [pc, #164]	; (8006e58 <TIM_Base_SetConfig+0x124>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d017      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a28      	ldr	r2, [pc, #160]	; (8006e5c <TIM_Base_SetConfig+0x128>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d013      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a27      	ldr	r2, [pc, #156]	; (8006e60 <TIM_Base_SetConfig+0x12c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00f      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a26      	ldr	r2, [pc, #152]	; (8006e64 <TIM_Base_SetConfig+0x130>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00b      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a25      	ldr	r2, [pc, #148]	; (8006e68 <TIM_Base_SetConfig+0x134>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d007      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a24      	ldr	r2, [pc, #144]	; (8006e6c <TIM_Base_SetConfig+0x138>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d003      	beq.n	8006de6 <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a23      	ldr	r2, [pc, #140]	; (8006e70 <TIM_Base_SetConfig+0x13c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d108      	bne.n	8006df8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a0a      	ldr	r2, [pc, #40]	; (8006e48 <TIM_Base_SetConfig+0x114>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d003      	beq.n	8006e2c <TIM_Base_SetConfig+0xf8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a0c      	ldr	r2, [pc, #48]	; (8006e58 <TIM_Base_SetConfig+0x124>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d103      	bne.n	8006e34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	615a      	str	r2, [r3, #20]
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	40010000 	.word	0x40010000
 8006e4c:	40000400 	.word	0x40000400
 8006e50:	40000800 	.word	0x40000800
 8006e54:	40000c00 	.word	0x40000c00
 8006e58:	40010400 	.word	0x40010400
 8006e5c:	40014000 	.word	0x40014000
 8006e60:	40014400 	.word	0x40014400
 8006e64:	40014800 	.word	0x40014800
 8006e68:	40001800 	.word	0x40001800
 8006e6c:	40001c00 	.word	0x40001c00
 8006e70:	40002000 	.word	0x40002000

08006e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f023 0201 	bic.w	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0303 	bic.w	r3, r3, #3
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f023 0302 	bic.w	r3, r3, #2
 8006ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a20      	ldr	r2, [pc, #128]	; (8006f4c <TIM_OC1_SetConfig+0xd8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC1_SetConfig+0x64>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a1f      	ldr	r2, [pc, #124]	; (8006f50 <TIM_OC1_SetConfig+0xdc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d10c      	bne.n	8006ef2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f023 0308 	bic.w	r3, r3, #8
 8006ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f023 0304 	bic.w	r3, r3, #4
 8006ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a15      	ldr	r2, [pc, #84]	; (8006f4c <TIM_OC1_SetConfig+0xd8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d003      	beq.n	8006f02 <TIM_OC1_SetConfig+0x8e>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a14      	ldr	r2, [pc, #80]	; (8006f50 <TIM_OC1_SetConfig+0xdc>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d111      	bne.n	8006f26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	621a      	str	r2, [r3, #32]
}
 8006f40:	bf00      	nop
 8006f42:	371c      	adds	r7, #28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40010400 	.word	0x40010400

08006f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	f023 0210 	bic.w	r2, r3, #16
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f023 0320 	bic.w	r3, r3, #32
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a22      	ldr	r2, [pc, #136]	; (8007038 <TIM_OC2_SetConfig+0xe4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d003      	beq.n	8006fbc <TIM_OC2_SetConfig+0x68>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a21      	ldr	r2, [pc, #132]	; (800703c <TIM_OC2_SetConfig+0xe8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d10d      	bne.n	8006fd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a17      	ldr	r2, [pc, #92]	; (8007038 <TIM_OC2_SetConfig+0xe4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_OC2_SetConfig+0x94>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a16      	ldr	r2, [pc, #88]	; (800703c <TIM_OC2_SetConfig+0xe8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d113      	bne.n	8007010 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4313      	orrs	r3, r2
 8007002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	621a      	str	r2, [r3, #32]
}
 800702a:	bf00      	nop
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40010000 	.word	0x40010000
 800703c:	40010400 	.word	0x40010400

08007040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0303 	bic.w	r3, r3, #3
 8007076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a21      	ldr	r2, [pc, #132]	; (8007120 <TIM_OC3_SetConfig+0xe0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d003      	beq.n	80070a6 <TIM_OC3_SetConfig+0x66>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a20      	ldr	r2, [pc, #128]	; (8007124 <TIM_OC3_SetConfig+0xe4>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d10d      	bne.n	80070c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	021b      	lsls	r3, r3, #8
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a16      	ldr	r2, [pc, #88]	; (8007120 <TIM_OC3_SetConfig+0xe0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d003      	beq.n	80070d2 <TIM_OC3_SetConfig+0x92>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a15      	ldr	r2, [pc, #84]	; (8007124 <TIM_OC3_SetConfig+0xe4>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d113      	bne.n	80070fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	621a      	str	r2, [r3, #32]
}
 8007114:	bf00      	nop
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	40010000 	.word	0x40010000
 8007124:	40010400 	.word	0x40010400

08007128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800715e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	021b      	lsls	r3, r3, #8
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4313      	orrs	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	031b      	lsls	r3, r3, #12
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	4313      	orrs	r3, r2
 800717e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a12      	ldr	r2, [pc, #72]	; (80071cc <TIM_OC4_SetConfig+0xa4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d003      	beq.n	8007190 <TIM_OC4_SetConfig+0x68>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a11      	ldr	r2, [pc, #68]	; (80071d0 <TIM_OC4_SetConfig+0xa8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d109      	bne.n	80071a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007196:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	019b      	lsls	r3, r3, #6
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	621a      	str	r2, [r3, #32]
}
 80071be:	bf00      	nop
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40010000 	.word	0x40010000
 80071d0:	40010400 	.word	0x40010400

080071d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f023 0307 	bic.w	r3, r3, #7
 8007202:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2b70      	cmp	r3, #112	; 0x70
 800721c:	d01a      	beq.n	8007254 <TIM_SlaveTimer_SetConfig+0x80>
 800721e:	2b70      	cmp	r3, #112	; 0x70
 8007220:	d860      	bhi.n	80072e4 <TIM_SlaveTimer_SetConfig+0x110>
 8007222:	2b60      	cmp	r3, #96	; 0x60
 8007224:	d054      	beq.n	80072d0 <TIM_SlaveTimer_SetConfig+0xfc>
 8007226:	2b60      	cmp	r3, #96	; 0x60
 8007228:	d85c      	bhi.n	80072e4 <TIM_SlaveTimer_SetConfig+0x110>
 800722a:	2b50      	cmp	r3, #80	; 0x50
 800722c:	d046      	beq.n	80072bc <TIM_SlaveTimer_SetConfig+0xe8>
 800722e:	2b50      	cmp	r3, #80	; 0x50
 8007230:	d858      	bhi.n	80072e4 <TIM_SlaveTimer_SetConfig+0x110>
 8007232:	2b40      	cmp	r3, #64	; 0x40
 8007234:	d019      	beq.n	800726a <TIM_SlaveTimer_SetConfig+0x96>
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d854      	bhi.n	80072e4 <TIM_SlaveTimer_SetConfig+0x110>
 800723a:	2b30      	cmp	r3, #48	; 0x30
 800723c:	d055      	beq.n	80072ea <TIM_SlaveTimer_SetConfig+0x116>
 800723e:	2b30      	cmp	r3, #48	; 0x30
 8007240:	d850      	bhi.n	80072e4 <TIM_SlaveTimer_SetConfig+0x110>
 8007242:	2b20      	cmp	r3, #32
 8007244:	d051      	beq.n	80072ea <TIM_SlaveTimer_SetConfig+0x116>
 8007246:	2b20      	cmp	r3, #32
 8007248:	d84c      	bhi.n	80072e4 <TIM_SlaveTimer_SetConfig+0x110>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d04d      	beq.n	80072ea <TIM_SlaveTimer_SetConfig+0x116>
 800724e:	2b10      	cmp	r3, #16
 8007250:	d04b      	beq.n	80072ea <TIM_SlaveTimer_SetConfig+0x116>
 8007252:	e047      	b.n	80072e4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	68d9      	ldr	r1, [r3, #12]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	f000 f8c1 	bl	80073ea <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007268:	e040      	b.n	80072ec <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b05      	cmp	r3, #5
 8007270:	d101      	bne.n	8007276 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e03b      	b.n	80072ee <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6a1a      	ldr	r2, [r3, #32]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0201 	bic.w	r2, r2, #1
 800728c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800729c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	621a      	str	r2, [r3, #32]
      break;
 80072ba:	e017      	b.n	80072ec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	6899      	ldr	r1, [r3, #8]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	461a      	mov	r2, r3
 80072ca:	f000 f814 	bl	80072f6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80072ce:	e00d      	b.n	80072ec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6818      	ldr	r0, [r3, #0]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	6899      	ldr	r1, [r3, #8]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	461a      	mov	r2, r3
 80072de:	f000 f839 	bl	8007354 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80072e2:	e003      	b.n	80072ec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	75fb      	strb	r3, [r7, #23]
      break;
 80072e8:	e000      	b.n	80072ec <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80072ea:	bf00      	nop
  }

  return status;
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b087      	sub	sp, #28
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	60b9      	str	r1, [r7, #8]
 8007300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	f023 0201 	bic.w	r2, r3, #1
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f023 030a 	bic.w	r3, r3, #10
 8007332:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	621a      	str	r2, [r3, #32]
}
 8007348:	bf00      	nop
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	f023 0210 	bic.w	r2, r3, #16
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800737e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	031b      	lsls	r3, r3, #12
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	011b      	lsls	r3, r3, #4
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	621a      	str	r2, [r3, #32]
}
 80073a8:	bf00      	nop
 80073aa:	371c      	adds	r7, #28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f043 0307 	orr.w	r3, r3, #7
 80073d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	609a      	str	r2, [r3, #8]
}
 80073de:	bf00      	nop
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b087      	sub	sp, #28
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	607a      	str	r2, [r7, #4]
 80073f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007404:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	021a      	lsls	r2, r3, #8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	431a      	orrs	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4313      	orrs	r3, r2
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	609a      	str	r2, [r3, #8]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800742a:	b480      	push	{r7}
 800742c:	b087      	sub	sp, #28
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2201      	movs	r2, #1
 800743e:	fa02 f303 	lsl.w	r3, r2, r3
 8007442:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6a1a      	ldr	r2, [r3, #32]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	43db      	mvns	r3, r3
 800744c:	401a      	ands	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6a1a      	ldr	r2, [r3, #32]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	fa01 f303 	lsl.w	r3, r1, r3
 8007462:	431a      	orrs	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	621a      	str	r2, [r3, #32]
}
 8007468:	bf00      	nop
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007484:	2b01      	cmp	r3, #1
 8007486:	d101      	bne.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007488:	2302      	movs	r3, #2
 800748a:	e05a      	b.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a21      	ldr	r2, [pc, #132]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d022      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d8:	d01d      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a1d      	ldr	r2, [pc, #116]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d018      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a1b      	ldr	r2, [pc, #108]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d013      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a1a      	ldr	r2, [pc, #104]	; (800755c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00e      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a18      	ldr	r2, [pc, #96]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d009      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a17      	ldr	r2, [pc, #92]	; (8007564 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d004      	beq.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a15      	ldr	r2, [pc, #84]	; (8007568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d10c      	bne.n	8007530 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800751c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	4313      	orrs	r3, r2
 8007526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	40010000 	.word	0x40010000
 8007554:	40000400 	.word	0x40000400
 8007558:	40000800 	.word	0x40000800
 800755c:	40000c00 	.word	0x40000c00
 8007560:	40010400 	.word	0x40010400
 8007564:	40014000 	.word	0x40014000
 8007568:	40001800 	.word	0x40001800

0800756c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007584:	2302      	movs	r3, #2
 8007586:	e03d      	b.n	8007604 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e03f      	b.n	80076ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d106      	bne.n	8007664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7fc fe66 	bl	8004330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2224      	movs	r2, #36	; 0x24
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800767a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fdef 	bl	8008260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	695a      	ldr	r2, [r3, #20]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b085      	sub	sp, #20
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	4613      	mov	r3, r2
 80076de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	d130      	bne.n	800774e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <HAL_UART_Transmit_IT+0x26>
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e029      	b.n	8007750 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <HAL_UART_Transmit_IT+0x38>
 8007706:	2302      	movs	r3, #2
 8007708:	e022      	b.n	8007750 <HAL_UART_Transmit_IT+0x7e>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	88fa      	ldrh	r2, [r7, #6]
 800771c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	88fa      	ldrh	r2, [r7, #6]
 8007722:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2221      	movs	r2, #33	; 0x21
 800772e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68da      	ldr	r2, [r3, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007748:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	e000      	b.n	8007750 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800774e:	2302      	movs	r3, #2
  }
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	4613      	mov	r3, r2
 8007768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b20      	cmp	r3, #32
 8007774:	d11d      	bne.n	80077b2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <HAL_UART_Receive_IT+0x26>
 800777c:	88fb      	ldrh	r3, [r7, #6]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e016      	b.n	80077b4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800778c:	2b01      	cmp	r3, #1
 800778e:	d101      	bne.n	8007794 <HAL_UART_Receive_IT+0x38>
 8007790:	2302      	movs	r3, #2
 8007792:	e00f      	b.n	80077b4 <HAL_UART_Receive_IT+0x58>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077a2:	88fb      	ldrh	r3, [r7, #6]
 80077a4:	461a      	mov	r2, r3
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 fb69 	bl	8007e80 <UART_Start_Receive_IT>
 80077ae:	4603      	mov	r3, r0
 80077b0:	e000      	b.n	80077b4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80077b2:	2302      	movs	r3, #2
  }
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b09a      	sub	sp, #104	; 0x68
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	330c      	adds	r3, #12
 80077ca:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ce:	e853 3f00 	ldrex	r3, [r3]
 80077d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80077d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077da:	667b      	str	r3, [r7, #100]	; 0x64
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	330c      	adds	r3, #12
 80077e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80077e4:	657a      	str	r2, [r7, #84]	; 0x54
 80077e6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80077ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077ec:	e841 2300 	strex	r3, r2, [r1]
 80077f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1e5      	bne.n	80077c4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3314      	adds	r3, #20
 80077fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	f023 0301 	bic.w	r3, r3, #1
 800780e:	663b      	str	r3, [r7, #96]	; 0x60
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3314      	adds	r3, #20
 8007816:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007818:	643a      	str	r2, [r7, #64]	; 0x40
 800781a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800781e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007820:	e841 2300 	strex	r3, r2, [r1]
 8007824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e5      	bne.n	80077f8 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007830:	2b01      	cmp	r3, #1
 8007832:	d119      	bne.n	8007868 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	61fb      	str	r3, [r7, #28]
   return(result);
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f023 0310 	bic.w	r3, r3, #16
 800784a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	330c      	adds	r3, #12
 8007852:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007854:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800785a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800785c:	e841 2300 	strex	r3, r2, [r1]
 8007860:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e5      	bne.n	8007834 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007872:	2b40      	cmp	r3, #64	; 0x40
 8007874:	d13f      	bne.n	80078f6 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3314      	adds	r3, #20
 800787c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	60bb      	str	r3, [r7, #8]
   return(result);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800788c:	65bb      	str	r3, [r7, #88]	; 0x58
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3314      	adds	r3, #20
 8007894:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007896:	61ba      	str	r2, [r7, #24]
 8007898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6979      	ldr	r1, [r7, #20]
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	613b      	str	r3, [r7, #16]
   return(result);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e5      	bne.n	8007876 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d013      	beq.n	80078da <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	4a19      	ldr	r2, [pc, #100]	; (800791c <HAL_UART_AbortReceive_IT+0x160>)
 80078b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fd fcf8 	bl	80052b4 <HAL_DMA_Abort_IT>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d022      	beq.n	8007910 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078d4:	4610      	mov	r0, r2
 80078d6:	4798      	blx	r3
 80078d8:	e01a      	b.n	8007910 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2220      	movs	r2, #32
 80078e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 faa4 	bl	8007e3c <HAL_UART_AbortReceiveCpltCallback>
 80078f4:	e00c      	b.n	8007910 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fa96 	bl	8007e3c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3768      	adds	r7, #104	; 0x68
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	08007feb 	.word	0x08007feb

08007920 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b0ba      	sub	sp, #232	; 0xe8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007946:	2300      	movs	r3, #0
 8007948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800794c:	2300      	movs	r3, #0
 800794e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800795e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10f      	bne.n	8007986 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d009      	beq.n	8007986 <HAL_UART_IRQHandler+0x66>
 8007972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fbb3 	bl	80080ea <UART_Receive_IT>
      return;
 8007984:	e256      	b.n	8007e34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 80de 	beq.w	8007b4c <HAL_UART_IRQHandler+0x22c>
 8007990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d106      	bne.n	80079aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 80d1 	beq.w	8007b4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00b      	beq.n	80079ce <HAL_UART_IRQHandler+0xae>
 80079b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	f043 0201 	orr.w	r2, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00b      	beq.n	80079f2 <HAL_UART_IRQHandler+0xd2>
 80079da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d005      	beq.n	80079f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	f043 0202 	orr.w	r2, r3, #2
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00b      	beq.n	8007a16 <HAL_UART_IRQHandler+0xf6>
 80079fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0e:	f043 0204 	orr.w	r2, r3, #4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d011      	beq.n	8007a46 <HAL_UART_IRQHandler+0x126>
 8007a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d105      	bne.n	8007a3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	f043 0208 	orr.w	r2, r3, #8
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 81ed 	beq.w	8007e2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d008      	beq.n	8007a6e <HAL_UART_IRQHandler+0x14e>
 8007a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fb3e 	bl	80080ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a78:	2b40      	cmp	r3, #64	; 0x40
 8007a7a:	bf0c      	ite	eq
 8007a7c:	2301      	moveq	r3, #1
 8007a7e:	2300      	movne	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	f003 0308 	and.w	r3, r3, #8
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d103      	bne.n	8007a9a <HAL_UART_IRQHandler+0x17a>
 8007a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d04f      	beq.n	8007b3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa2e 	bl	8007efc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aaa:	2b40      	cmp	r3, #64	; 0x40
 8007aac:	d141      	bne.n	8007b32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3314      	adds	r3, #20
 8007ab4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3314      	adds	r3, #20
 8007ad6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ada:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ae6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1d9      	bne.n	8007aae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d013      	beq.n	8007b2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	4a7d      	ldr	r2, [pc, #500]	; (8007cfc <HAL_UART_IRQHandler+0x3dc>)
 8007b08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fd fbd0 	bl	80052b4 <HAL_DMA_Abort_IT>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d016      	beq.n	8007b48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b28:	e00e      	b.n	8007b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7fa f81c 	bl	8001b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b30:	e00a      	b.n	8007b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7fa f818 	bl	8001b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b38:	e006      	b.n	8007b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7fa f814 	bl	8001b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b46:	e170      	b.n	8007e2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b48:	bf00      	nop
    return;
 8007b4a:	e16e      	b.n	8007e2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	f040 814a 	bne.w	8007dea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5a:	f003 0310 	and.w	r3, r3, #16
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8143 	beq.w	8007dea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 813c 	beq.w	8007dea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b72:	2300      	movs	r3, #0
 8007b74:	60bb      	str	r3, [r7, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	60bb      	str	r3, [r7, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	60bb      	str	r3, [r7, #8]
 8007b86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b92:	2b40      	cmp	r3, #64	; 0x40
 8007b94:	f040 80b4 	bne.w	8007d00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ba4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 8140 	beq.w	8007e2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	f080 8139 	bcs.w	8007e2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bce:	f000 8088 	beq.w	8007ce2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	330c      	adds	r3, #12
 8007bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	330c      	adds	r3, #12
 8007bfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007bfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1d9      	bne.n	8007bd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3314      	adds	r3, #20
 8007c24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3314      	adds	r3, #20
 8007c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e1      	bne.n	8007c1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3314      	adds	r3, #20
 8007c60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3314      	adds	r3, #20
 8007c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1e3      	bne.n	8007c5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	330c      	adds	r3, #12
 8007ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb2:	f023 0310 	bic.w	r3, r3, #16
 8007cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	330c      	adds	r3, #12
 8007cc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007cc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007cc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e3      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fd fa79 	bl	80051d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f8ac 	bl	8007e50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007cf8:	e099      	b.n	8007e2e <HAL_UART_IRQHandler+0x50e>
 8007cfa:	bf00      	nop
 8007cfc:	08007fc3 	.word	0x08007fc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 808b 	beq.w	8007e32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 8086 	beq.w	8007e32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	330c      	adds	r3, #12
 8007d46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d4a:	647a      	str	r2, [r7, #68]	; 0x44
 8007d4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e3      	bne.n	8007d26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3314      	adds	r3, #20
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	e853 3f00 	ldrex	r3, [r3]
 8007d6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	f023 0301 	bic.w	r3, r3, #1
 8007d74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3314      	adds	r3, #20
 8007d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d82:	633a      	str	r2, [r7, #48]	; 0x30
 8007d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e3      	bne.n	8007d5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	330c      	adds	r3, #12
 8007daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0310 	bic.w	r3, r3, #16
 8007dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007dc8:	61fa      	str	r2, [r7, #28]
 8007dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	69b9      	ldr	r1, [r7, #24]
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e3      	bne.n	8007da4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f834 	bl	8007e50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007de8:	e023      	b.n	8007e32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d009      	beq.n	8007e0a <HAL_UART_IRQHandler+0x4ea>
 8007df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f909 	bl	800801a <UART_Transmit_IT>
    return;
 8007e08:	e014      	b.n	8007e34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00e      	beq.n	8007e34 <HAL_UART_IRQHandler+0x514>
 8007e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d008      	beq.n	8007e34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f949 	bl	80080ba <UART_EndTransmit_IT>
    return;
 8007e28:	e004      	b.n	8007e34 <HAL_UART_IRQHandler+0x514>
    return;
 8007e2a:	bf00      	nop
 8007e2c:	e002      	b.n	8007e34 <HAL_UART_IRQHandler+0x514>
      return;
 8007e2e:	bf00      	nop
 8007e30:	e000      	b.n	8007e34 <HAL_UART_IRQHandler+0x514>
      return;
 8007e32:	bf00      	nop
  }
}
 8007e34:	37e8      	adds	r7, #232	; 0xe8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop

08007e3c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	88fa      	ldrh	r2, [r7, #6]
 8007e9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2222      	movs	r2, #34	; 0x22
 8007eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d007      	beq.n	8007ece <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ecc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	695a      	ldr	r2, [r3, #20]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0201 	orr.w	r2, r2, #1
 8007edc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f042 0220 	orr.w	r2, r2, #32
 8007eec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b095      	sub	sp, #84	; 0x54
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	330c      	adds	r3, #12
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0e:	e853 3f00 	ldrex	r3, [r3]
 8007f12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	330c      	adds	r3, #12
 8007f22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f24:	643a      	str	r2, [r7, #64]	; 0x40
 8007f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e5      	bne.n	8007f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3314      	adds	r3, #20
 8007f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	f023 0301 	bic.w	r3, r3, #1
 8007f4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3314      	adds	r3, #20
 8007f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f60:	e841 2300 	strex	r3, r2, [r1]
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e5      	bne.n	8007f38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d119      	bne.n	8007fa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	330c      	adds	r3, #12
 8007f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	e853 3f00 	ldrex	r3, [r3]
 8007f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f023 0310 	bic.w	r3, r3, #16
 8007f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	330c      	adds	r3, #12
 8007f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f94:	61ba      	str	r2, [r7, #24]
 8007f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	6979      	ldr	r1, [r7, #20]
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	e841 2300 	strex	r3, r2, [r1]
 8007fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e5      	bne.n	8007f74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007fb6:	bf00      	nop
 8007fb8:	3754      	adds	r7, #84	; 0x54
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7f9 fdc3 	bl	8001b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff6:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff ff15 	bl	8007e3c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008012:	bf00      	nop
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b21      	cmp	r3, #33	; 0x21
 800802c:	d13e      	bne.n	80080ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008036:	d114      	bne.n	8008062 <UART_Transmit_IT+0x48>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d110      	bne.n	8008062 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a1b      	ldr	r3, [r3, #32]
 8008044:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008054:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	1c9a      	adds	r2, r3, #2
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	621a      	str	r2, [r3, #32]
 8008060:	e008      	b.n	8008074 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	1c59      	adds	r1, r3, #1
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6211      	str	r1, [r2, #32]
 800806c:	781a      	ldrb	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008078:	b29b      	uxth	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	b29b      	uxth	r3, r3
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	4619      	mov	r1, r3
 8008082:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10f      	bne.n	80080a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008096:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68da      	ldr	r2, [r3, #12]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	e000      	b.n	80080ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080ac:	2302      	movs	r3, #2
  }
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68da      	ldr	r2, [r3, #12]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7f9 fd22 	bl	8001b24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b08c      	sub	sp, #48	; 0x30
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b22      	cmp	r3, #34	; 0x22
 80080fc:	f040 80ab 	bne.w	8008256 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008108:	d117      	bne.n	800813a <UART_Receive_IT+0x50>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d113      	bne.n	800813a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	b29b      	uxth	r3, r3
 8008124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008128:	b29a      	uxth	r2, r3
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	1c9a      	adds	r2, r3, #2
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	629a      	str	r2, [r3, #40]	; 0x28
 8008138:	e026      	b.n	8008188 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008140:	2300      	movs	r3, #0
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814c:	d007      	beq.n	800815e <UART_Receive_IT+0x74>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10a      	bne.n	800816c <UART_Receive_IT+0x82>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d106      	bne.n	800816c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	b2da      	uxtb	r2, r3
 8008166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008168:	701a      	strb	r2, [r3, #0]
 800816a:	e008      	b.n	800817e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008178:	b2da      	uxtb	r2, r3
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	b29b      	uxth	r3, r3
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	4619      	mov	r1, r3
 8008196:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008198:	2b00      	cmp	r3, #0
 800819a:	d15a      	bne.n	8008252 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0220 	bic.w	r2, r2, #32
 80081aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	695a      	ldr	r2, [r3, #20]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0201 	bic.w	r2, r2, #1
 80081ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2220      	movs	r2, #32
 80081d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d135      	bne.n	8008248 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	330c      	adds	r3, #12
 80081e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	613b      	str	r3, [r7, #16]
   return(result);
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f023 0310 	bic.w	r3, r3, #16
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	330c      	adds	r3, #12
 8008200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008202:	623a      	str	r2, [r7, #32]
 8008204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008206:	69f9      	ldr	r1, [r7, #28]
 8008208:	6a3a      	ldr	r2, [r7, #32]
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e5      	bne.n	80081e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0310 	and.w	r3, r3, #16
 8008220:	2b10      	cmp	r3, #16
 8008222:	d10a      	bne.n	800823a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008224:	2300      	movs	r3, #0
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff fe05 	bl	8007e50 <HAL_UARTEx_RxEventCallback>
 8008246:	e002      	b.n	800824e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7f9 fc59 	bl	8001b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	e002      	b.n	8008258 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	e000      	b.n	8008258 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008256:	2302      	movs	r3, #2
  }
}
 8008258:	4618      	mov	r0, r3
 800825a:	3730      	adds	r7, #48	; 0x30
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	b09f      	sub	sp, #124	; 0x7c
 8008266:	af00      	add	r7, sp, #0
 8008268:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800826a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008276:	68d9      	ldr	r1, [r3, #12]
 8008278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	ea40 0301 	orr.w	r3, r0, r1
 8008280:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	431a      	orrs	r2, r3
 800828c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	431a      	orrs	r2, r3
 8008292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	4313      	orrs	r3, r2
 8008298:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800829a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082a4:	f021 010c 	bic.w	r1, r1, #12
 80082a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ae:	430b      	orrs	r3, r1
 80082b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80082bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082be:	6999      	ldr	r1, [r3, #24]
 80082c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	ea40 0301 	orr.w	r3, r0, r1
 80082c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4bc5      	ldr	r3, [pc, #788]	; (80085e4 <UART_SetConfig+0x384>)
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d004      	beq.n	80082de <UART_SetConfig+0x7e>
 80082d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	4bc3      	ldr	r3, [pc, #780]	; (80085e8 <UART_SetConfig+0x388>)
 80082da:	429a      	cmp	r2, r3
 80082dc:	d103      	bne.n	80082e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082de:	f7fd ff19 	bl	8006114 <HAL_RCC_GetPCLK2Freq>
 80082e2:	6778      	str	r0, [r7, #116]	; 0x74
 80082e4:	e002      	b.n	80082ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082e6:	f7fd ff01 	bl	80060ec <HAL_RCC_GetPCLK1Freq>
 80082ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082f4:	f040 80b6 	bne.w	8008464 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082fa:	461c      	mov	r4, r3
 80082fc:	f04f 0500 	mov.w	r5, #0
 8008300:	4622      	mov	r2, r4
 8008302:	462b      	mov	r3, r5
 8008304:	1891      	adds	r1, r2, r2
 8008306:	6439      	str	r1, [r7, #64]	; 0x40
 8008308:	415b      	adcs	r3, r3
 800830a:	647b      	str	r3, [r7, #68]	; 0x44
 800830c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008310:	1912      	adds	r2, r2, r4
 8008312:	eb45 0303 	adc.w	r3, r5, r3
 8008316:	f04f 0000 	mov.w	r0, #0
 800831a:	f04f 0100 	mov.w	r1, #0
 800831e:	00d9      	lsls	r1, r3, #3
 8008320:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008324:	00d0      	lsls	r0, r2, #3
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	1911      	adds	r1, r2, r4
 800832c:	6639      	str	r1, [r7, #96]	; 0x60
 800832e:	416b      	adcs	r3, r5
 8008330:	667b      	str	r3, [r7, #100]	; 0x64
 8008332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	461a      	mov	r2, r3
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	1891      	adds	r1, r2, r2
 800833e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008340:	415b      	adcs	r3, r3
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008348:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800834c:	f7f8 fb5a 	bl	8000a04 <__aeabi_uldivmod>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4ba5      	ldr	r3, [pc, #660]	; (80085ec <UART_SetConfig+0x38c>)
 8008356:	fba3 2302 	umull	r2, r3, r3, r2
 800835a:	095b      	lsrs	r3, r3, #5
 800835c:	011e      	lsls	r6, r3, #4
 800835e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008360:	461c      	mov	r4, r3
 8008362:	f04f 0500 	mov.w	r5, #0
 8008366:	4622      	mov	r2, r4
 8008368:	462b      	mov	r3, r5
 800836a:	1891      	adds	r1, r2, r2
 800836c:	6339      	str	r1, [r7, #48]	; 0x30
 800836e:	415b      	adcs	r3, r3
 8008370:	637b      	str	r3, [r7, #52]	; 0x34
 8008372:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008376:	1912      	adds	r2, r2, r4
 8008378:	eb45 0303 	adc.w	r3, r5, r3
 800837c:	f04f 0000 	mov.w	r0, #0
 8008380:	f04f 0100 	mov.w	r1, #0
 8008384:	00d9      	lsls	r1, r3, #3
 8008386:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800838a:	00d0      	lsls	r0, r2, #3
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	1911      	adds	r1, r2, r4
 8008392:	65b9      	str	r1, [r7, #88]	; 0x58
 8008394:	416b      	adcs	r3, r5
 8008396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	461a      	mov	r2, r3
 800839e:	f04f 0300 	mov.w	r3, #0
 80083a2:	1891      	adds	r1, r2, r2
 80083a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80083a6:	415b      	adcs	r3, r3
 80083a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80083b2:	f7f8 fb27 	bl	8000a04 <__aeabi_uldivmod>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4b8c      	ldr	r3, [pc, #560]	; (80085ec <UART_SetConfig+0x38c>)
 80083bc:	fba3 1302 	umull	r1, r3, r3, r2
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	2164      	movs	r1, #100	; 0x64
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	3332      	adds	r3, #50	; 0x32
 80083ce:	4a87      	ldr	r2, [pc, #540]	; (80085ec <UART_SetConfig+0x38c>)
 80083d0:	fba2 2303 	umull	r2, r3, r2, r3
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083dc:	441e      	add	r6, r3
 80083de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083e0:	4618      	mov	r0, r3
 80083e2:	f04f 0100 	mov.w	r1, #0
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	1894      	adds	r4, r2, r2
 80083ec:	623c      	str	r4, [r7, #32]
 80083ee:	415b      	adcs	r3, r3
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
 80083f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083f6:	1812      	adds	r2, r2, r0
 80083f8:	eb41 0303 	adc.w	r3, r1, r3
 80083fc:	f04f 0400 	mov.w	r4, #0
 8008400:	f04f 0500 	mov.w	r5, #0
 8008404:	00dd      	lsls	r5, r3, #3
 8008406:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800840a:	00d4      	lsls	r4, r2, #3
 800840c:	4622      	mov	r2, r4
 800840e:	462b      	mov	r3, r5
 8008410:	1814      	adds	r4, r2, r0
 8008412:	653c      	str	r4, [r7, #80]	; 0x50
 8008414:	414b      	adcs	r3, r1
 8008416:	657b      	str	r3, [r7, #84]	; 0x54
 8008418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	461a      	mov	r2, r3
 800841e:	f04f 0300 	mov.w	r3, #0
 8008422:	1891      	adds	r1, r2, r2
 8008424:	61b9      	str	r1, [r7, #24]
 8008426:	415b      	adcs	r3, r3
 8008428:	61fb      	str	r3, [r7, #28]
 800842a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800842e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008432:	f7f8 fae7 	bl	8000a04 <__aeabi_uldivmod>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4b6c      	ldr	r3, [pc, #432]	; (80085ec <UART_SetConfig+0x38c>)
 800843c:	fba3 1302 	umull	r1, r3, r3, r2
 8008440:	095b      	lsrs	r3, r3, #5
 8008442:	2164      	movs	r1, #100	; 0x64
 8008444:	fb01 f303 	mul.w	r3, r1, r3
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	00db      	lsls	r3, r3, #3
 800844c:	3332      	adds	r3, #50	; 0x32
 800844e:	4a67      	ldr	r2, [pc, #412]	; (80085ec <UART_SetConfig+0x38c>)
 8008450:	fba2 2303 	umull	r2, r3, r2, r3
 8008454:	095b      	lsrs	r3, r3, #5
 8008456:	f003 0207 	and.w	r2, r3, #7
 800845a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4432      	add	r2, r6
 8008460:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008462:	e0b9      	b.n	80085d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008466:	461c      	mov	r4, r3
 8008468:	f04f 0500 	mov.w	r5, #0
 800846c:	4622      	mov	r2, r4
 800846e:	462b      	mov	r3, r5
 8008470:	1891      	adds	r1, r2, r2
 8008472:	6139      	str	r1, [r7, #16]
 8008474:	415b      	adcs	r3, r3
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800847c:	1912      	adds	r2, r2, r4
 800847e:	eb45 0303 	adc.w	r3, r5, r3
 8008482:	f04f 0000 	mov.w	r0, #0
 8008486:	f04f 0100 	mov.w	r1, #0
 800848a:	00d9      	lsls	r1, r3, #3
 800848c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008490:	00d0      	lsls	r0, r2, #3
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	eb12 0804 	adds.w	r8, r2, r4
 800849a:	eb43 0905 	adc.w	r9, r3, r5
 800849e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f04f 0100 	mov.w	r1, #0
 80084a8:	f04f 0200 	mov.w	r2, #0
 80084ac:	f04f 0300 	mov.w	r3, #0
 80084b0:	008b      	lsls	r3, r1, #2
 80084b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80084b6:	0082      	lsls	r2, r0, #2
 80084b8:	4640      	mov	r0, r8
 80084ba:	4649      	mov	r1, r9
 80084bc:	f7f8 faa2 	bl	8000a04 <__aeabi_uldivmod>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4b49      	ldr	r3, [pc, #292]	; (80085ec <UART_SetConfig+0x38c>)
 80084c6:	fba3 2302 	umull	r2, r3, r3, r2
 80084ca:	095b      	lsrs	r3, r3, #5
 80084cc:	011e      	lsls	r6, r3, #4
 80084ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084d0:	4618      	mov	r0, r3
 80084d2:	f04f 0100 	mov.w	r1, #0
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	1894      	adds	r4, r2, r2
 80084dc:	60bc      	str	r4, [r7, #8]
 80084de:	415b      	adcs	r3, r3
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084e6:	1812      	adds	r2, r2, r0
 80084e8:	eb41 0303 	adc.w	r3, r1, r3
 80084ec:	f04f 0400 	mov.w	r4, #0
 80084f0:	f04f 0500 	mov.w	r5, #0
 80084f4:	00dd      	lsls	r5, r3, #3
 80084f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084fa:	00d4      	lsls	r4, r2, #3
 80084fc:	4622      	mov	r2, r4
 80084fe:	462b      	mov	r3, r5
 8008500:	1814      	adds	r4, r2, r0
 8008502:	64bc      	str	r4, [r7, #72]	; 0x48
 8008504:	414b      	adcs	r3, r1
 8008506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	4618      	mov	r0, r3
 800850e:	f04f 0100 	mov.w	r1, #0
 8008512:	f04f 0200 	mov.w	r2, #0
 8008516:	f04f 0300 	mov.w	r3, #0
 800851a:	008b      	lsls	r3, r1, #2
 800851c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008520:	0082      	lsls	r2, r0, #2
 8008522:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008526:	f7f8 fa6d 	bl	8000a04 <__aeabi_uldivmod>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4b2f      	ldr	r3, [pc, #188]	; (80085ec <UART_SetConfig+0x38c>)
 8008530:	fba3 1302 	umull	r1, r3, r3, r2
 8008534:	095b      	lsrs	r3, r3, #5
 8008536:	2164      	movs	r1, #100	; 0x64
 8008538:	fb01 f303 	mul.w	r3, r1, r3
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	011b      	lsls	r3, r3, #4
 8008540:	3332      	adds	r3, #50	; 0x32
 8008542:	4a2a      	ldr	r2, [pc, #168]	; (80085ec <UART_SetConfig+0x38c>)
 8008544:	fba2 2303 	umull	r2, r3, r2, r3
 8008548:	095b      	lsrs	r3, r3, #5
 800854a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800854e:	441e      	add	r6, r3
 8008550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008552:	4618      	mov	r0, r3
 8008554:	f04f 0100 	mov.w	r1, #0
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	1894      	adds	r4, r2, r2
 800855e:	603c      	str	r4, [r7, #0]
 8008560:	415b      	adcs	r3, r3
 8008562:	607b      	str	r3, [r7, #4]
 8008564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008568:	1812      	adds	r2, r2, r0
 800856a:	eb41 0303 	adc.w	r3, r1, r3
 800856e:	f04f 0400 	mov.w	r4, #0
 8008572:	f04f 0500 	mov.w	r5, #0
 8008576:	00dd      	lsls	r5, r3, #3
 8008578:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800857c:	00d4      	lsls	r4, r2, #3
 800857e:	4622      	mov	r2, r4
 8008580:	462b      	mov	r3, r5
 8008582:	eb12 0a00 	adds.w	sl, r2, r0
 8008586:	eb43 0b01 	adc.w	fp, r3, r1
 800858a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	4618      	mov	r0, r3
 8008590:	f04f 0100 	mov.w	r1, #0
 8008594:	f04f 0200 	mov.w	r2, #0
 8008598:	f04f 0300 	mov.w	r3, #0
 800859c:	008b      	lsls	r3, r1, #2
 800859e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085a2:	0082      	lsls	r2, r0, #2
 80085a4:	4650      	mov	r0, sl
 80085a6:	4659      	mov	r1, fp
 80085a8:	f7f8 fa2c 	bl	8000a04 <__aeabi_uldivmod>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4b0e      	ldr	r3, [pc, #56]	; (80085ec <UART_SetConfig+0x38c>)
 80085b2:	fba3 1302 	umull	r1, r3, r3, r2
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	2164      	movs	r1, #100	; 0x64
 80085ba:	fb01 f303 	mul.w	r3, r1, r3
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	3332      	adds	r3, #50	; 0x32
 80085c4:	4a09      	ldr	r2, [pc, #36]	; (80085ec <UART_SetConfig+0x38c>)
 80085c6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	f003 020f 	and.w	r2, r3, #15
 80085d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4432      	add	r2, r6
 80085d6:	609a      	str	r2, [r3, #8]
}
 80085d8:	bf00      	nop
 80085da:	377c      	adds	r7, #124	; 0x7c
 80085dc:	46bd      	mov	sp, r7
 80085de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e2:	bf00      	nop
 80085e4:	40011000 	.word	0x40011000
 80085e8:	40011400 	.word	0x40011400
 80085ec:	51eb851f 	.word	0x51eb851f

080085f0 <__libc_init_array>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	4d0d      	ldr	r5, [pc, #52]	; (8008628 <__libc_init_array+0x38>)
 80085f4:	4c0d      	ldr	r4, [pc, #52]	; (800862c <__libc_init_array+0x3c>)
 80085f6:	1b64      	subs	r4, r4, r5
 80085f8:	10a4      	asrs	r4, r4, #2
 80085fa:	2600      	movs	r6, #0
 80085fc:	42a6      	cmp	r6, r4
 80085fe:	d109      	bne.n	8008614 <__libc_init_array+0x24>
 8008600:	4d0b      	ldr	r5, [pc, #44]	; (8008630 <__libc_init_array+0x40>)
 8008602:	4c0c      	ldr	r4, [pc, #48]	; (8008634 <__libc_init_array+0x44>)
 8008604:	f000 f820 	bl	8008648 <_init>
 8008608:	1b64      	subs	r4, r4, r5
 800860a:	10a4      	asrs	r4, r4, #2
 800860c:	2600      	movs	r6, #0
 800860e:	42a6      	cmp	r6, r4
 8008610:	d105      	bne.n	800861e <__libc_init_array+0x2e>
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	f855 3b04 	ldr.w	r3, [r5], #4
 8008618:	4798      	blx	r3
 800861a:	3601      	adds	r6, #1
 800861c:	e7ee      	b.n	80085fc <__libc_init_array+0xc>
 800861e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008622:	4798      	blx	r3
 8008624:	3601      	adds	r6, #1
 8008626:	e7f2      	b.n	800860e <__libc_init_array+0x1e>
 8008628:	08008888 	.word	0x08008888
 800862c:	08008888 	.word	0x08008888
 8008630:	08008888 	.word	0x08008888
 8008634:	0800888c 	.word	0x0800888c

08008638 <memset>:
 8008638:	4402      	add	r2, r0
 800863a:	4603      	mov	r3, r0
 800863c:	4293      	cmp	r3, r2
 800863e:	d100      	bne.n	8008642 <memset+0xa>
 8008640:	4770      	bx	lr
 8008642:	f803 1b01 	strb.w	r1, [r3], #1
 8008646:	e7f9      	b.n	800863c <memset+0x4>

08008648 <_init>:
 8008648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864a:	bf00      	nop
 800864c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864e:	bc08      	pop	{r3}
 8008650:	469e      	mov	lr, r3
 8008652:	4770      	bx	lr

08008654 <_fini>:
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	bf00      	nop
 8008658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865a:	bc08      	pop	{r3}
 800865c:	469e      	mov	lr, r3
 800865e:	4770      	bx	lr
