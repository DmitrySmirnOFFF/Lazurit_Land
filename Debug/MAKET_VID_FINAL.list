
MAKET_VID_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008970  08008970  00018970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b90  08008b90  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08008b90  08008b90  00018b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b98  08008b98  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b9c  08008b9c  00018b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08008ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          000006dc  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000704  20000704  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001310e  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002fbb  00000000  00000000  000331a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001068  00000000  00000000  00036168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cc7  00000000  00000000  000371d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022832  00000000  00000000  00037e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017112  00000000  00000000  0005a6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce65f  00000000  00000000  000717db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004468  00000000  00000000  0013fe3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001442a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008958 	.word	0x08008958

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08008958 	.word	0x08008958

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b970 	b.w	8000cfc <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	460f      	mov	r7, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4694      	mov	ip, r2
 8000a48:	d965      	bls.n	8000b16 <__udivmoddi4+0xe2>
 8000a4a:	fab2 f382 	clz	r3, r2
 8000a4e:	b143      	cbz	r3, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a54:	f1c3 0220 	rsb	r2, r3, #32
 8000a58:	409f      	lsls	r7, r3
 8000a5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a5e:	4317      	orrs	r7, r2
 8000a60:	409c      	lsls	r4, r3
 8000a62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a66:	fa1f f58c 	uxth.w	r5, ip
 8000a6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a6e:	0c22      	lsrs	r2, r4, #16
 8000a70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a78:	fb01 f005 	mul.w	r0, r1, r5
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	d90a      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a80:	eb1c 0202 	adds.w	r2, ip, r2
 8000a84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a88:	f080 811c 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	f240 8119 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000a92:	3902      	subs	r1, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	b2a4      	uxth	r4, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aa6:	fb00 f505 	mul.w	r5, r0, r5
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x90>
 8000aae:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab6:	f080 8107 	bcs.w	8000cc8 <__udivmoddi4+0x294>
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	f240 8104 	bls.w	8000cc8 <__udivmoddi4+0x294>
 8000ac0:	4464      	add	r4, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11e      	cbz	r6, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40dc      	lsrs	r4, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0xbc>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80ed 	beq.w	8000cbe <__udivmoddi4+0x28a>
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aea:	4608      	mov	r0, r1
 8000aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af0:	fab3 f183 	clz	r1, r3
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d149      	bne.n	8000b8c <__udivmoddi4+0x158>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	d302      	bcc.n	8000b02 <__udivmoddi4+0xce>
 8000afc:	4282      	cmp	r2, r0
 8000afe:	f200 80f8 	bhi.w	8000cf2 <__udivmoddi4+0x2be>
 8000b02:	1a84      	subs	r4, r0, r2
 8000b04:	eb65 0203 	sbc.w	r2, r5, r3
 8000b08:	2001      	movs	r0, #1
 8000b0a:	4617      	mov	r7, r2
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d0e2      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	e9c6 4700 	strd	r4, r7, [r6]
 8000b14:	e7df      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b16:	b902      	cbnz	r2, 8000b1a <__udivmoddi4+0xe6>
 8000b18:	deff      	udf	#255	; 0xff
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8090 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b34:	fb07 2015 	mls	r0, r7, r5, r2
 8000b38:	0c22      	lsrs	r2, r4, #16
 8000b3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b3e:	fb0e f005 	mul.w	r0, lr, r5
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b46:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4290      	cmp	r0, r2
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2b8>
 8000b56:	4645      	mov	r5, r8
 8000b58:	1a12      	subs	r2, r2, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b60:	fb07 2210 	mls	r2, r7, r0, r2
 8000b64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x14e>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x14c>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2c2>
 8000b80:	4610      	mov	r0, r2
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b8a:	e79f      	b.n	8000acc <__udivmoddi4+0x98>
 8000b8c:	f1c1 0720 	rsb	r7, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ba2:	40fd      	lsrs	r5, r7
 8000ba4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba8:	4323      	orrs	r3, r4
 8000baa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bae:	fa1f fe8c 	uxth.w	lr, ip
 8000bb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bb6:	0c1c      	lsrs	r4, r3, #16
 8000bb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4464      	add	r4, ip
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	b29d      	uxth	r5, r3
 8000be8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bec:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	4464      	add	r4, ip
 8000c0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c12:	fba3 9502 	umull	r9, r5, r3, r2
 8000c16:	eba4 040e 	sub.w	r4, r4, lr
 8000c1a:	42ac      	cmp	r4, r5
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46ae      	mov	lr, r5
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x29c>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x298>
 8000c24:	b156      	cbz	r6, 8000c3c <__udivmoddi4+0x208>
 8000c26:	ebb0 0208 	subs.w	r2, r0, r8
 8000c2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c32:	40ca      	lsrs	r2, r1
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	4317      	orrs	r7, r2
 8000c38:	e9c6 7400 	strd	r7, r4, [r6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	f1c3 0120 	rsb	r1, r3, #32
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c50:	fa25 f101 	lsr.w	r1, r5, r1
 8000c54:	409d      	lsls	r5, r3
 8000c56:	432a      	orrs	r2, r5
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c64:	fb07 1510 	mls	r5, r7, r0, r1
 8000c68:	0c11      	lsrs	r1, r2, #16
 8000c6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c72:	428d      	cmp	r5, r1
 8000c74:	fa04 f403 	lsl.w	r4, r4, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x258>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c84:	428d      	cmp	r5, r1
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c94:	fb07 1115 	mls	r1, r7, r5, r1
 8000c98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca0:	4291      	cmp	r1, r2
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x282>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000cae:	4291      	cmp	r1, r2
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000cb2:	3d02      	subs	r5, #2
 8000cb4:	4462      	add	r2, ip
 8000cb6:	1a52      	subs	r2, r2, r1
 8000cb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0xfc>
 8000cbe:	4631      	mov	r1, r6
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e6e6      	b.n	8000a96 <__udivmoddi4+0x62>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	e6fb      	b.n	8000ac4 <__udivmoddi4+0x90>
 8000ccc:	4548      	cmp	r0, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cdc:	4645      	mov	r5, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000ce0:	462b      	mov	r3, r5
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x258>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cec:	3d02      	subs	r5, #2
 8000cee:	4462      	add	r2, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e70a      	b.n	8000b0c <__udivmoddi4+0xd8>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x14e>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <Periph_Init>:
uint32_t I_mean_sum;
uint16_t I_mean_buf[MEAN_BUF_SIZE];

HAL_StatusTypeDef Init_Error;

uint8_t Periph_Init() {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

	// Запуск АЦП
	__HAL_ADC_ENABLE(&hadc2);
 8000d04:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <Periph_Init+0x15c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	4b54      	ldr	r3, [pc, #336]	; (8000e5c <Periph_Init+0x15c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f042 0201 	orr.w	r2, r2, #1
 8000d12:	609a      	str	r2, [r3, #8]
	__HAL_ADC_ENABLE(&hadc3);
 8000d14:	4b52      	ldr	r3, [pc, #328]	; (8000e60 <Periph_Init+0x160>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	4b51      	ldr	r3, [pc, #324]	; (8000e60 <Periph_Init+0x160>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f042 0201 	orr.w	r2, r2, #1
 8000d22:	609a      	str	r2, [r3, #8]
	Init_Error = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*) Device_ADC_Buf, ADC_CHANNELS);
 8000d24:	2203      	movs	r2, #3
 8000d26:	494f      	ldr	r1, [pc, #316]	; (8000e64 <Periph_Init+0x164>)
 8000d28:	484f      	ldr	r0, [pc, #316]	; (8000e68 <Periph_Init+0x168>)
 8000d2a:	f003 ff69 	bl	8004c00 <HAL_ADCEx_MultiModeStart_DMA>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <Periph_Init+0x16c>)
 8000d34:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_TC);
 8000d36:	4b4e      	ldr	r3, [pc, #312]	; (8000e70 <Periph_Init+0x170>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b4c      	ldr	r3, [pc, #304]	; (8000e70 <Periph_Init+0x170>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0210 	bic.w	r2, r2, #16
 8000d44:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT);
 8000d46:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <Periph_Init+0x170>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b48      	ldr	r3, [pc, #288]	; (8000e70 <Periph_Init+0x170>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0208 	bic.w	r2, r2, #8
 8000d54:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_TE);
 8000d56:	4b46      	ldr	r3, [pc, #280]	; (8000e70 <Periph_Init+0x170>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <Periph_Init+0x170>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0204 	bic.w	r2, r2, #4
 8000d64:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_FE);
 8000d66:	4b42      	ldr	r3, [pc, #264]	; (8000e70 <Periph_Init+0x170>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	695a      	ldr	r2, [r3, #20]
 8000d6c:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <Periph_Init+0x170>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d74:	615a      	str	r2, [r3, #20]
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_DME);
 8000d76:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <Periph_Init+0x170>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b3c      	ldr	r3, [pc, #240]	; (8000e70 <Periph_Init+0x170>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 0202 	bic.w	r2, r2, #2
 8000d84:	601a      	str	r2, [r3, #0]
	//HAL_Delay(ADC_DELAY);
	Init_Error = HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 8000d86:	210c      	movs	r1, #12
 8000d88:	483a      	ldr	r0, [pc, #232]	; (8000e74 <Periph_Init+0x174>)
 8000d8a:	f005 fc35 	bl	80065f8 <HAL_TIM_OC_Start>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <Periph_Init+0x16c>)
 8000d94:	701a      	strb	r2, [r3, #0]

	//Настройка и запуск основного таймера
	Init_Error = HAL_TIM_Base_Start_IT(&htim1);
 8000d96:	4838      	ldr	r0, [pc, #224]	; (8000e78 <Periph_Init+0x178>)
 8000d98:	f005 fb64 	bl	8006464 <HAL_TIM_Base_Start_IT>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <Periph_Init+0x16c>)
 8000da2:	701a      	strb	r2, [r3, #0]

	// ?нициализация сдвинутых таймеров
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 8000da4:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <Periph_Init+0x178>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <Periph_Init+0x178>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0204 	orr.w	r2, r2, #4
 8000db2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <Periph_Init+0x178>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <Periph_Init+0x178>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 0208 	orr.w	r2, r2, #8
 8000dc2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <Periph_Init+0x178>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <Periph_Init+0x178>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0210 	orr.w	r2, r2, #16
 8000dd2:	60da      	str	r2, [r3, #12]
	TIM1->CCR2 = TIM1->ARR;
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <Periph_Init+0x17c>)
 8000dd6:	4a29      	ldr	r2, [pc, #164]	; (8000e7c <Periph_Init+0x17c>)
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = TIM1->ARR;
 8000ddc:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <Periph_Init+0x17c>)
 8000dde:	4a27      	ldr	r2, [pc, #156]	; (8000e7c <Periph_Init+0x17c>)
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de2:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4 = TIM1->ARR;
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <Periph_Init+0x17c>)
 8000de6:	4a25      	ldr	r2, [pc, #148]	; (8000e7c <Periph_Init+0x17c>)
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40

	//Запуск вспомогательных таймеров
	Init_Error = HAL_TIM_Base_Start(&htim2);
 8000dec:	4824      	ldr	r0, [pc, #144]	; (8000e80 <Periph_Init+0x180>)
 8000dee:	f005 fad1 	bl	8006394 <HAL_TIM_Base_Start>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <Periph_Init+0x16c>)
 8000df8:	701a      	strb	r2, [r3, #0]
	Init_Error = HAL_TIM_Base_Start(&htim3);
 8000dfa:	4822      	ldr	r0, [pc, #136]	; (8000e84 <Periph_Init+0x184>)
 8000dfc:	f005 faca 	bl	8006394 <HAL_TIM_Base_Start>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <Periph_Init+0x16c>)
 8000e06:	701a      	strb	r2, [r3, #0]
	Init_Error = HAL_TIM_Base_Start(&htim9);
 8000e08:	481f      	ldr	r0, [pc, #124]	; (8000e88 <Periph_Init+0x188>)
 8000e0a:	f005 fac3 	bl	8006394 <HAL_TIM_Base_Start>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <Periph_Init+0x16c>)
 8000e14:	701a      	strb	r2, [r3, #0]


	//Запуск таймера для жесткой коммутации
	//в нем же работаем с обсчетом регуляторов
	Init_Error = HAL_TIM_Base_Start_IT(&htim8);
 8000e16:	481d      	ldr	r0, [pc, #116]	; (8000e8c <Periph_Init+0x18c>)
 8000e18:	f005 fb24 	bl	8006464 <HAL_TIM_Base_Start_IT>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <Periph_Init+0x16c>)
 8000e22:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_CC2);
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <Periph_Init+0x18c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <Periph_Init+0x18c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0204 	orr.w	r2, r2, #4
 8000e32:	60da      	str	r2, [r3, #12]
	TIM8->CCR2 = TIM8->ARR;
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <Periph_Init+0x190>)
 8000e36:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <Periph_Init+0x190>)
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	6393      	str	r3, [r2, #56]	; 0x38

	Init_Error = HAL_TIM_Base_Start(&htim12);
 8000e3c:	4815      	ldr	r0, [pc, #84]	; (8000e94 <Periph_Init+0x194>)
 8000e3e:	f005 faa9 	bl	8006394 <HAL_TIM_Base_Start>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <Periph_Init+0x16c>)
 8000e48:	701a      	strb	r2, [r3, #0]

	if(Init_Error != HAL_OK){
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <Periph_Init+0x16c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <Periph_Init+0x156>
		return -1;
 8000e52:	23ff      	movs	r3, #255	; 0xff
 8000e54:	e000      	b.n	8000e58 <Periph_Init+0x158>
	} else {
		return 0;
 8000e56:	2300      	movs	r3, #0
	}

}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200002f4 	.word	0x200002f4
 8000e60:	2000033c 	.word	0x2000033c
 8000e64:	20000068 	.word	0x20000068
 8000e68:	200002ac 	.word	0x200002ac
 8000e6c:	20000158 	.word	0x20000158
 8000e70:	20000384 	.word	0x20000384
 8000e74:	2000059c 	.word	0x2000059c
 8000e78:	200004c4 	.word	0x200004c4
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	2000050c 	.word	0x2000050c
 8000e84:	20000554 	.word	0x20000554
 8000e88:	2000062c 	.word	0x2000062c
 8000e8c:	200005e4 	.word	0x200005e4
 8000e90:	40010400 	.word	0x40010400
 8000e94:	20000674 	.word	0x20000674

08000e98 <HW_Driver_DI_AI_Read>:
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
	HAL_TIM_OC_Stop(&htim4, TIM_CHANNEL_4);
}

void HW_Driver_DI_AI_Read() {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0

	// Считывание дискретных сигналов

	Fault_H1_State = !HAL_GPIO_ReadPin(Fault_H1_GPIO_Port, Fault_H1_Pin);
 8000e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea0:	4893      	ldr	r0, [pc, #588]	; (80010f0 <HW_Driver_DI_AI_Read+0x258>)
 8000ea2:	f004 fd5d 	bl	8005960 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf0c      	ite	eq
 8000eac:	2301      	moveq	r3, #1
 8000eae:	2300      	movne	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b8f      	ldr	r3, [pc, #572]	; (80010f4 <HW_Driver_DI_AI_Read+0x25c>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	Fault_H2_State = !HAL_GPIO_ReadPin(Fault_H2_GPIO_Port, Fault_H2_Pin);
 8000eb8:	2120      	movs	r1, #32
 8000eba:	488f      	ldr	r0, [pc, #572]	; (80010f8 <HW_Driver_DI_AI_Read+0x260>)
 8000ebc:	f004 fd50 	bl	8005960 <HAL_GPIO_ReadPin>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bf0c      	ite	eq
 8000ec6:	2301      	moveq	r3, #1
 8000ec8:	2300      	movne	r3, #0
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b8b      	ldr	r3, [pc, #556]	; (80010fc <HW_Driver_DI_AI_Read+0x264>)
 8000ed0:	701a      	strb	r2, [r3, #0]
	Fault_H3_State = !HAL_GPIO_ReadPin(Fault_H3_GPIO_Port, Fault_H3_Pin);
 8000ed2:	2120      	movs	r1, #32
 8000ed4:	488a      	ldr	r0, [pc, #552]	; (8001100 <HW_Driver_DI_AI_Read+0x268>)
 8000ed6:	f004 fd43 	bl	8005960 <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf0c      	ite	eq
 8000ee0:	2301      	moveq	r3, #1
 8000ee2:	2300      	movne	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b86      	ldr	r3, [pc, #536]	; (8001104 <HW_Driver_DI_AI_Read+0x26c>)
 8000eea:	701a      	strb	r2, [r3, #0]
	Fault_H4_State = !HAL_GPIO_ReadPin(Fault_H4_GPIO_Port, Fault_H4_Pin);
 8000eec:	2104      	movs	r1, #4
 8000eee:	4882      	ldr	r0, [pc, #520]	; (80010f8 <HW_Driver_DI_AI_Read+0x260>)
 8000ef0:	f004 fd36 	bl	8005960 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	bf0c      	ite	eq
 8000efa:	2301      	moveq	r3, #1
 8000efc:	2300      	movne	r3, #0
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b81      	ldr	r3, [pc, #516]	; (8001108 <HW_Driver_DI_AI_Read+0x270>)
 8000f04:	701a      	strb	r2, [r3, #0]
	Fault_H4_1_State = !HAL_GPIO_ReadPin(Fault_H4_1_GPIO_Port, Fault_H4_1_Pin);
 8000f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0a:	487d      	ldr	r0, [pc, #500]	; (8001100 <HW_Driver_DI_AI_Read+0x268>)
 8000f0c:	f004 fd28 	bl	8005960 <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	bf0c      	ite	eq
 8000f16:	2301      	moveq	r3, #1
 8000f18:	2300      	movne	r3, #0
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b7b      	ldr	r3, [pc, #492]	; (800110c <HW_Driver_DI_AI_Read+0x274>)
 8000f20:	701a      	strb	r2, [r3, #0]
	Fault_H5_State = !HAL_GPIO_ReadPin(Fault_H5_GPIO_Port, Fault_H5_Pin);
 8000f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f26:	4874      	ldr	r0, [pc, #464]	; (80010f8 <HW_Driver_DI_AI_Read+0x260>)
 8000f28:	f004 fd1a 	bl	8005960 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bf0c      	ite	eq
 8000f32:	2301      	moveq	r3, #1
 8000f34:	2300      	movne	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b75      	ldr	r3, [pc, #468]	; (8001110 <HW_Driver_DI_AI_Read+0x278>)
 8000f3c:	701a      	strb	r2, [r3, #0]

	Fault_L1_State = !HAL_GPIO_ReadPin(Fault_L1_GPIO_Port, Fault_L1_Pin);
 8000f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f42:	486b      	ldr	r0, [pc, #428]	; (80010f0 <HW_Driver_DI_AI_Read+0x258>)
 8000f44:	f004 fd0c 	bl	8005960 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf0c      	ite	eq
 8000f4e:	2301      	moveq	r3, #1
 8000f50:	2300      	movne	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b6f      	ldr	r3, [pc, #444]	; (8001114 <HW_Driver_DI_AI_Read+0x27c>)
 8000f58:	701a      	strb	r2, [r3, #0]
	Fault_L2_State = !HAL_GPIO_ReadPin(Fault_L2_GPIO_Port, Fault_L2_Pin);
 8000f5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f5e:	4868      	ldr	r0, [pc, #416]	; (8001100 <HW_Driver_DI_AI_Read+0x268>)
 8000f60:	f004 fcfe 	bl	8005960 <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bf0c      	ite	eq
 8000f6a:	2301      	moveq	r3, #1
 8000f6c:	2300      	movne	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b69      	ldr	r3, [pc, #420]	; (8001118 <HW_Driver_DI_AI_Read+0x280>)
 8000f74:	701a      	strb	r2, [r3, #0]
	Fault_L3_State = !HAL_GPIO_ReadPin(Fault_L3_GPIO_Port, Fault_L3_Pin);
 8000f76:	2110      	movs	r1, #16
 8000f78:	4861      	ldr	r0, [pc, #388]	; (8001100 <HW_Driver_DI_AI_Read+0x268>)
 8000f7a:	f004 fcf1 	bl	8005960 <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf0c      	ite	eq
 8000f84:	2301      	moveq	r3, #1
 8000f86:	2300      	movne	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b63      	ldr	r3, [pc, #396]	; (800111c <HW_Driver_DI_AI_Read+0x284>)
 8000f8e:	701a      	strb	r2, [r3, #0]
	Fault_L4_State = !HAL_GPIO_ReadPin(Fault_L4_GPIO_Port, Fault_L4_Pin);
 8000f90:	2102      	movs	r1, #2
 8000f92:	4859      	ldr	r0, [pc, #356]	; (80010f8 <HW_Driver_DI_AI_Read+0x260>)
 8000f94:	f004 fce4 	bl	8005960 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bf0c      	ite	eq
 8000f9e:	2301      	moveq	r3, #1
 8000fa0:	2300      	movne	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b5e      	ldr	r3, [pc, #376]	; (8001120 <HW_Driver_DI_AI_Read+0x288>)
 8000fa8:	701a      	strb	r2, [r3, #0]
	Fault_L4_2_State = !HAL_GPIO_ReadPin(Fault_L4_2_GPIO_Port, Fault_L4_2_Pin);
 8000faa:	2180      	movs	r1, #128	; 0x80
 8000fac:	4854      	ldr	r0, [pc, #336]	; (8001100 <HW_Driver_DI_AI_Read+0x268>)
 8000fae:	f004 fcd7 	bl	8005960 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf0c      	ite	eq
 8000fb8:	2301      	moveq	r3, #1
 8000fba:	2300      	movne	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b58      	ldr	r3, [pc, #352]	; (8001124 <HW_Driver_DI_AI_Read+0x28c>)
 8000fc2:	701a      	strb	r2, [r3, #0]
	Fault_L5_State = !HAL_GPIO_ReadPin(Fault_L5_GPIO_Port, Fault_L5_Pin);
 8000fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc8:	484b      	ldr	r0, [pc, #300]	; (80010f8 <HW_Driver_DI_AI_Read+0x260>)
 8000fca:	f004 fcc9 	bl	8005960 <HAL_GPIO_ReadPin>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2301      	moveq	r3, #1
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b52      	ldr	r3, [pc, #328]	; (8001128 <HW_Driver_DI_AI_Read+0x290>)
 8000fde:	701a      	strb	r2, [r3, #0]

	PWR_Fault1_State = HAL_GPIO_ReadPin(PWR_Fault1_GPIO_Port, PWR_Fault1_Pin);
 8000fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe4:	4842      	ldr	r0, [pc, #264]	; (80010f0 <HW_Driver_DI_AI_Read+0x258>)
 8000fe6:	f004 fcbb 	bl	8005960 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b4f      	ldr	r3, [pc, #316]	; (800112c <HW_Driver_DI_AI_Read+0x294>)
 8000ff0:	701a      	strb	r2, [r3, #0]
	PWR_Fault2_State = HAL_GPIO_ReadPin(PWR_Fault2_GPIO_Port, PWR_Fault2_Pin);
 8000ff2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff6:	4842      	ldr	r0, [pc, #264]	; (8001100 <HW_Driver_DI_AI_Read+0x268>)
 8000ff8:	f004 fcb2 	bl	8005960 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <HW_Driver_DI_AI_Read+0x298>)
 8001002:	701a      	strb	r2, [r3, #0]
	PWR_Fault3_State = HAL_GPIO_ReadPin(PWR_Fault3_GPIO_Port, PWR_Fault3_Pin);
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	483a      	ldr	r0, [pc, #232]	; (80010f0 <HW_Driver_DI_AI_Read+0x258>)
 8001008:	f004 fcaa 	bl	8005960 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b48      	ldr	r3, [pc, #288]	; (8001134 <HW_Driver_DI_AI_Read+0x29c>)
 8001012:	701a      	strb	r2, [r3, #0]
	PWR_Fault4_State = HAL_GPIO_ReadPin(PWR_Fault4_GPIO_Port, PWR_Fault4_Pin);
 8001014:	2101      	movs	r1, #1
 8001016:	4838      	ldr	r0, [pc, #224]	; (80010f8 <HW_Driver_DI_AI_Read+0x260>)
 8001018:	f004 fca2 	bl	8005960 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	4b45      	ldr	r3, [pc, #276]	; (8001138 <HW_Driver_DI_AI_Read+0x2a0>)
 8001022:	701a      	strb	r2, [r3, #0]
	//PWR_Fault5_State = HAL_GPIO_ReadPin(PWR_Fault5_GPIO_Port, PWR_Fault5_Pin);

	// Функц кнопки
	But_1_State = !HAL_GPIO_ReadPin(GLOBAL_SB_GPIO_Port, GLOBAL_SB_Pin);
 8001024:	2110      	movs	r1, #16
 8001026:	4834      	ldr	r0, [pc, #208]	; (80010f8 <HW_Driver_DI_AI_Read+0x260>)
 8001028:	f004 fc9a 	bl	8005960 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	bf0c      	ite	eq
 8001032:	2301      	moveq	r3, #1
 8001034:	2300      	movne	r3, #0
 8001036:	b2db      	uxtb	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	4b40      	ldr	r3, [pc, #256]	; (800113c <HW_Driver_DI_AI_Read+0x2a4>)
 800103c:	701a      	strb	r2, [r3, #0]
	//T_RT4_Value = Device_ADC_Buf[0];
	//T_RT1_Value = Device_ADC_Buf[1];
	//T_RT2_Value = Device_ADC_Buf[2];
	//T_RT3_Value = Device_ADC_Buf[3];
	//AI_8_Value = Device_ADC_Buf[4];
	U_Value = Device_ADC_Buf[0];
 800103e:	4b40      	ldr	r3, [pc, #256]	; (8001140 <HW_Driver_DI_AI_Read+0x2a8>)
 8001040:	881a      	ldrh	r2, [r3, #0]
 8001042:	4b40      	ldr	r3, [pc, #256]	; (8001144 <HW_Driver_DI_AI_Read+0x2ac>)
 8001044:	801a      	strh	r2, [r3, #0]
	I_Value = Device_ADC_Buf[1];
 8001046:	4b3e      	ldr	r3, [pc, #248]	; (8001140 <HW_Driver_DI_AI_Read+0x2a8>)
 8001048:	885a      	ldrh	r2, [r3, #2]
 800104a:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <HW_Driver_DI_AI_Read+0x2b0>)
 800104c:	801a      	strh	r2, [r3, #0]
	Trt_Value = Device_ADC_Buf[2];
 800104e:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <HW_Driver_DI_AI_Read+0x2a8>)
 8001050:	889a      	ldrh	r2, [r3, #4]
 8001052:	4b3e      	ldr	r3, [pc, #248]	; (800114c <HW_Driver_DI_AI_Read+0x2b4>)
 8001054:	801a      	strh	r2, [r3, #0]
	//T_RT5_Value = Device_ADC_Buf[8];
	I_Instant = ((float)I_mean - I_ADC_ref) * I_ADC_koef;
 8001056:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <HW_Driver_DI_AI_Read+0x2b8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <HW_Driver_DI_AI_Read+0x2bc>)
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	ee37 7a67 	vsub.f32	s14, s14, s15
 800106c:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <HW_Driver_DI_AI_Read+0x2c0>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001076:	4b39      	ldr	r3, [pc, #228]	; (800115c <HW_Driver_DI_AI_Read+0x2c4>)
 8001078:	edc3 7a00 	vstr	s15, [r3]

	if(I_Instant < 0){
 800107c:	4b37      	ldr	r3, [pc, #220]	; (800115c <HW_Driver_DI_AI_Read+0x2c4>)
 800107e:	edd3 7a00 	vldr	s15, [r3]
 8001082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108a:	d508      	bpl.n	800109e <HW_Driver_DI_AI_Read+0x206>
		I_abs = -1*I_Instant;
 800108c:	4b33      	ldr	r3, [pc, #204]	; (800115c <HW_Driver_DI_AI_Read+0x2c4>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	eef1 7a67 	vneg.f32	s15, s15
 8001096:	4b32      	ldr	r3, [pc, #200]	; (8001160 <HW_Driver_DI_AI_Read+0x2c8>)
 8001098:	edc3 7a00 	vstr	s15, [r3]
 800109c:	e003      	b.n	80010a6 <HW_Driver_DI_AI_Read+0x20e>
	} else {
		I_abs = I_Instant;
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <HW_Driver_DI_AI_Read+0x2c4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a2f      	ldr	r2, [pc, #188]	; (8001160 <HW_Driver_DI_AI_Read+0x2c8>)
 80010a4:	6013      	str	r3, [r2, #0]
	}

	U_Instant = ((float)U_mean - U_ADC_ref) * U_ADC_koef;
 80010a6:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <HW_Driver_DI_AI_Read+0x2cc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HW_Driver_DI_AI_Read+0x2d0>)
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HW_Driver_DI_AI_Read+0x2d4>)
 80010be:	edd3 7a00 	vldr	s15, [r3]
 80010c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HW_Driver_DI_AI_Read+0x2d8>)
 80010c8:	edc3 7a00 	vstr	s15, [r3]
	calc_os_u = U_Instant - R_KABEL*I_abs;
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <HW_Driver_DI_AI_Read+0x2d8>)
 80010ce:	ed93 7a00 	vldr	s14, [r3]
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <HW_Driver_DI_AI_Read+0x2c8>)
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80010dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80010e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HW_Driver_DI_AI_Read+0x2dc>)
 80010e6:	edc3 7a00 	vstr	s15, [r3]

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020000 	.word	0x40020000
 80010f4:	20000044 	.word	0x20000044
 80010f8:	40020400 	.word	0x40020400
 80010fc:	20000045 	.word	0x20000045
 8001100:	40020800 	.word	0x40020800
 8001104:	20000046 	.word	0x20000046
 8001108:	20000047 	.word	0x20000047
 800110c:	20000048 	.word	0x20000048
 8001110:	20000049 	.word	0x20000049
 8001114:	2000004a 	.word	0x2000004a
 8001118:	2000004b 	.word	0x2000004b
 800111c:	2000004c 	.word	0x2000004c
 8001120:	2000004d 	.word	0x2000004d
 8001124:	2000004e 	.word	0x2000004e
 8001128:	2000004f 	.word	0x2000004f
 800112c:	20000050 	.word	0x20000050
 8001130:	20000051 	.word	0x20000051
 8001134:	20000052 	.word	0x20000052
 8001138:	20000053 	.word	0x20000053
 800113c:	20000054 	.word	0x20000054
 8001140:	20000068 	.word	0x20000068
 8001144:	20000060 	.word	0x20000060
 8001148:	20000062 	.word	0x20000062
 800114c:	20000064 	.word	0x20000064
 8001150:	200000ec 	.word	0x200000ec
 8001154:	20000004 	.word	0x20000004
 8001158:	20000008 	.word	0x20000008
 800115c:	200000e4 	.word	0x200000e4
 8001160:	200000e8 	.word	0x200000e8
 8001164:	20000078 	.word	0x20000078
 8001168:	20000074 	.word	0x20000074
 800116c:	20000000 	.word	0x20000000
 8001170:	20000070 	.word	0x20000070
 8001174:	20000414 	.word	0x20000414

08001178 <HW_Driver_DO_PWM_Out>:

void HW_Driver_DO_PWM_Out() {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(DO_1_GPIO_Port, DO_1_Pin, DO_1_State);
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HW_Driver_DO_PWM_Out+0x44>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	480e      	ldr	r0, [pc, #56]	; (80011c0 <HW_Driver_DO_PWM_Out+0x48>)
 8001186:	f004 fc03 	bl	8005990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO_2_GPIO_Port, DO_2_Pin, DO_2_State);
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HW_Driver_DO_PWM_Out+0x4c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	480b      	ldr	r0, [pc, #44]	; (80011c0 <HW_Driver_DO_PWM_Out+0x48>)
 8001194:	f004 fbfc 	bl	8005990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_PWM_GPIO_Port, EN_PWM_Pin, EN_PWM_State);
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HW_Driver_DO_PWM_Out+0x50>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <HW_Driver_DO_PWM_Out+0x48>)
 80011a4:	f004 fbf4 	bl	8005990 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, LED_1_State);
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HW_Driver_DO_PWM_Out+0x54>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	4803      	ldr	r0, [pc, #12]	; (80011c0 <HW_Driver_DO_PWM_Out+0x48>)
 80011b4:	f004 fbec 	bl	8005990 <HAL_GPIO_WritePin>


}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000056 	.word	0x20000056
 80011c0:	40020400 	.word	0x40020400
 80011c4:	20000057 	.word	0x20000057
 80011c8:	20000058 	.word	0x20000058
 80011cc:	20000059 	.word	0x20000059

080011d0 <MEAN_Signal>:
// Out - среднее знанчение
// S - входное число
// Ss - вся сумма
// S_buf - буффер
// N -  размер буффера
void MEAN_Signal(uint32_t *Out, uint16_t *S, uint32_t *Ss, uint16_t *S_buf, uint16_t N) {
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]

	*Ss -= S_buf[0];
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	8812      	ldrh	r2, [r2, #0]
 80011e6:	1a9a      	subs	r2, r3, r2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < N - 1; i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	e00d      	b.n	800120e <MEAN_Signal+0x3e>
		S_buf[i] = S_buf[i + 1];
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	441a      	add	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	440b      	add	r3, r1
 8001204:	8812      	ldrh	r2, [r2, #0]
 8001206:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < N - 1; i++) {
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	8c3b      	ldrh	r3, [r7, #32]
 8001210:	3b01      	subs	r3, #1
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	429a      	cmp	r2, r3
 8001216:	dbec      	blt.n	80011f2 <MEAN_Signal+0x22>
	}
	S_buf[N - 1] = *S;
 8001218:	8c3b      	ldrh	r3, [r7, #32]
 800121a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800121e:	3b01      	subs	r3, #1
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	4413      	add	r3, r2
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	8812      	ldrh	r2, [r2, #0]
 800122a:	801a      	strh	r2, [r3, #0]

	*Ss += S_buf[N - 1];
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	8c3b      	ldrh	r3, [r7, #32]
 8001232:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001236:	3b01      	subs	r3, #1
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	6839      	ldr	r1, [r7, #0]
 800123c:	440b      	add	r3, r1
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	441a      	add	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
	*Out = *Ss / N;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	8c3b      	ldrh	r3, [r7, #32]
 800124c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <ModbusRTU_UART_Init>:
unsigned char END_FRAME;
unsigned short CRC_modbus;

const unsigned short Crc16Table[256];

void ModbusRTU_UART_Init() {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	MX_UART5_Init(); // поставить нужный
 8001264:	f003 f8f2 	bl	800444c <MX_UART5_Init>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <ModbusRTU_Init>:

void ModbusRTU_Init() {
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	ModbusRTU_Init_AO();
 8001270:	f001 ff08 	bl	8003084 <ModbusRTU_Init_AO>
	ModbusRTU_Init_AI();
 8001274:	f001 ff30 	bl	80030d8 <ModbusRTU_Init_AI>
	ModbusRTU_UART_Init();
 8001278:	f7ff fff2 	bl	8001260 <ModbusRTU_UART_Init>
	MODBUS_FAULT = 0;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <ModbusRTU_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	801a      	strh	r2, [r3, #0]
	UART_ERR = 0;
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <ModbusRTU_Init+0x68>)
 8001284:	2200      	movs	r2, #0
 8001286:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(UART_DIR_PORT, UART_DIR_PIN, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2108      	movs	r1, #8
 800128c:	4812      	ldr	r0, [pc, #72]	; (80012d8 <ModbusRTU_Init+0x6c>)
 800128e:	f004 fb7f 	bl	8005990 <HAL_GPIO_WritePin>
	__HAL_UART_ENABLE_IT(&UART_MODBUS, UART_IT_IDLE);
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <ModbusRTU_Init+0x70>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <ModbusRTU_Init+0x70>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f042 0210 	orr.w	r2, r2, #16
 80012a0:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&UART_MODBUS, (uint8_t*) buff_rx, Num_Data_buf);
 80012a2:	2264      	movs	r2, #100	; 0x64
 80012a4:	490e      	ldr	r1, [pc, #56]	; (80012e0 <ModbusRTU_Init+0x74>)
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <ModbusRTU_Init+0x70>)
 80012a8:	f006 fb34 	bl	8007914 <HAL_UART_Receive_IT>
	__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_PE);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <ModbusRTU_Init+0x70>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <ModbusRTU_Init+0x70>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012ba:	60da      	str	r2, [r3, #12]
	__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_ERR);
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <ModbusRTU_Init+0x70>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <ModbusRTU_Init+0x70>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0201 	bic.w	r2, r2, #1
 80012ca:	615a      	str	r2, [r3, #20]
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200002a2 	.word	0x200002a2
 80012d4:	200002a0 	.word	0x200002a0
 80012d8:	40020400 	.word	0x40020400
 80012dc:	200006bc 	.word	0x200006bc
 80012e0:	200001d4 	.word	0x200001d4

080012e4 <ModbusRTU_Handler>:
	__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_IDLE);
	HAL_UART_AbortReceive_IT(&UART_MODBUS);

}

void ModbusRTU_Handler() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	if (RESET != __HAL_UART_GET_FLAG(&UART_MODBUS, UART_FLAG_IDLE)) {
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <ModbusRTU_Handler+0x5c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	2b10      	cmp	r3, #16
 80012f6:	d11e      	bne.n	8001336 <ModbusRTU_Handler+0x52>
		__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_IDLE);
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <ModbusRTU_Handler+0x5c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <ModbusRTU_Handler+0x5c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0210 	bic.w	r2, r2, #16
 8001306:	60da      	str	r2, [r3, #12]
		__HAL_UART_CLEAR_IDLEFLAG(&UART_MODBUS); //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <ModbusRTU_Handler+0x5c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <ModbusRTU_Handler+0x5c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
		ModbusRTU_Receive();
 800131e:	f000 f811 	bl	8001344 <ModbusRTU_Receive>
		ModbusRTU_Transmit();
 8001322:	f000 fbd1 	bl	8001ac8 <ModbusRTU_Transmit>
		__HAL_UART_ENABLE_IT(&UART_MODBUS, UART_IT_IDLE);
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <ModbusRTU_Handler+0x5c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <ModbusRTU_Handler+0x5c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f042 0210 	orr.w	r2, r2, #16
 8001334:	60da      	str	r2, [r3, #12]

	}
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200006bc 	.word	0x200006bc

08001344 <ModbusRTU_Receive>:

void ModbusRTU_Receive(){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0

	Num_Data_RX = Num_Data_buf - UART_MODBUS.RxXferCount;
 800134a:	4b76      	ldr	r3, [pc, #472]	; (8001524 <ModbusRTU_Receive+0x1e0>)
 800134c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800134e:	b29b      	uxth	r3, r3
 8001350:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001354:	b29a      	uxth	r2, r3
 8001356:	4b74      	ldr	r3, [pc, #464]	; (8001528 <ModbusRTU_Receive+0x1e4>)
 8001358:	801a      	strh	r2, [r3, #0]
	CRC_modbus = CRC16(buff_rx, Num_Data_RX);
 800135a:	4b73      	ldr	r3, [pc, #460]	; (8001528 <ModbusRTU_Receive+0x1e4>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	4872      	ldr	r0, [pc, #456]	; (800152c <ModbusRTU_Receive+0x1e8>)
 8001362:	f000 fc31 	bl	8001bc8 <CRC16>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b71      	ldr	r3, [pc, #452]	; (8001530 <ModbusRTU_Receive+0x1ec>)
 800136c:	801a      	strh	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(&UART_MODBUS);
 800136e:	486d      	ldr	r0, [pc, #436]	; (8001524 <ModbusRTU_Receive+0x1e0>)
 8001370:	f006 fb00 	bl	8007974 <HAL_UART_AbortReceive_IT>

	if (CRC_modbus == 0) {
 8001374:	4b6e      	ldr	r3, [pc, #440]	; (8001530 <ModbusRTU_Receive+0x1ec>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f040 837c 	bne.w	8001a76 <ModbusRTU_Receive+0x732>

		// Считываем ИД и функциональную команду
		ID = buff_rx[0];
 800137e:	4b6b      	ldr	r3, [pc, #428]	; (800152c <ModbusRTU_Receive+0x1e8>)
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	4b6c      	ldr	r3, [pc, #432]	; (8001534 <ModbusRTU_Receive+0x1f0>)
 8001384:	701a      	strb	r2, [r3, #0]
		FK = buff_rx[1];
 8001386:	4b69      	ldr	r3, [pc, #420]	; (800152c <ModbusRTU_Receive+0x1e8>)
 8001388:	785a      	ldrb	r2, [r3, #1]
 800138a:	4b6b      	ldr	r3, [pc, #428]	; (8001538 <ModbusRTU_Receive+0x1f4>)
 800138c:	701a      	strb	r2, [r3, #0]

		if (ID == ID_Device) // Проверяем ИД, если не совпал чистим буфер
 800138e:	4b69      	ldr	r3, [pc, #420]	; (8001534 <ModbusRTU_Receive+0x1f0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b69      	ldr	r3, [pc, #420]	; (800153c <ModbusRTU_Receive+0x1f8>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 8356 	bne.w	8001a4a <ModbusRTU_Receive+0x706>
		{

			ADR = buff_rx[2]; // Выделяем адрес первой переменной
 800139e:	4b63      	ldr	r3, [pc, #396]	; (800152c <ModbusRTU_Receive+0x1e8>)
 80013a0:	789b      	ldrb	r3, [r3, #2]
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b66      	ldr	r3, [pc, #408]	; (8001540 <ModbusRTU_Receive+0x1fc>)
 80013a6:	801a      	strh	r2, [r3, #0]
			ADR = ADR << 8;
 80013a8:	4b65      	ldr	r3, [pc, #404]	; (8001540 <ModbusRTU_Receive+0x1fc>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b63      	ldr	r3, [pc, #396]	; (8001540 <ModbusRTU_Receive+0x1fc>)
 80013b2:	801a      	strh	r2, [r3, #0]
			ADR = ADR | buff_rx[3];
 80013b4:	4b5d      	ldr	r3, [pc, #372]	; (800152c <ModbusRTU_Receive+0x1e8>)
 80013b6:	78db      	ldrb	r3, [r3, #3]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	4b61      	ldr	r3, [pc, #388]	; (8001540 <ModbusRTU_Receive+0x1fc>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	4313      	orrs	r3, r2
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <ModbusRTU_Receive+0x1fc>)
 80013c4:	801a      	strh	r2, [r3, #0]

			NUM_REG = buff_rx[4]; // Выделяем количество адресов, так же данные для ФК 5 и 6
 80013c6:	4b59      	ldr	r3, [pc, #356]	; (800152c <ModbusRTU_Receive+0x1e8>)
 80013c8:	791b      	ldrb	r3, [r3, #4]
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b5d      	ldr	r3, [pc, #372]	; (8001544 <ModbusRTU_Receive+0x200>)
 80013ce:	801a      	strh	r2, [r3, #0]
			NUM_REG = NUM_REG << 8;
 80013d0:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <ModbusRTU_Receive+0x200>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	4b5a      	ldr	r3, [pc, #360]	; (8001544 <ModbusRTU_Receive+0x200>)
 80013da:	801a      	strh	r2, [r3, #0]
			NUM_REG = NUM_REG | buff_rx[5];
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <ModbusRTU_Receive+0x1e8>)
 80013de:	795b      	ldrb	r3, [r3, #5]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b58      	ldr	r3, [pc, #352]	; (8001544 <ModbusRTU_Receive+0x200>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <ModbusRTU_Receive+0x200>)
 80013ec:	801a      	strh	r2, [r3, #0]

			switch (FK) {
 80013ee:	4b52      	ldr	r3, [pc, #328]	; (8001538 <ModbusRTU_Receive+0x1f4>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	f200 8354 	bhi.w	8001aa2 <ModbusRTU_Receive+0x75e>
 80013fa:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <ModbusRTU_Receive+0xbc>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	08001441 	.word	0x08001441
 8001404:	0800148f 	.word	0x0800148f
 8001408:	080014dd 	.word	0x080014dd
 800140c:	0800163f 	.word	0x0800163f
 8001410:	08001799 	.word	0x08001799
 8001414:	080017e7 	.word	0x080017e7
 8001418:	08001aa3 	.word	0x08001aa3
 800141c:	08001aa3 	.word	0x08001aa3
 8001420:	08001aa3 	.word	0x08001aa3
 8001424:	08001aa3 	.word	0x08001aa3
 8001428:	08001aa3 	.word	0x08001aa3
 800142c:	08001aa3 	.word	0x08001aa3
 8001430:	08001aa3 	.word	0x08001aa3
 8001434:	08001aa3 	.word	0x08001aa3
 8001438:	08001897 	.word	0x08001897
 800143c:	080018e5 	.word	0x080018e5
			case 1:
				buff_tx[0] = ID_Device;
 8001440:	4b3e      	ldr	r3, [pc, #248]	; (800153c <ModbusRTU_Receive+0x1f8>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b40      	ldr	r3, [pc, #256]	; (8001548 <ModbusRTU_Receive+0x204>)
 8001448:	701a      	strb	r2, [r3, #0]
				buff_tx[1] = FK | 0x80;
 800144a:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <ModbusRTU_Receive+0x1f4>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <ModbusRTU_Receive+0x204>)
 8001456:	705a      	strb	r2, [r3, #1]
				buff_tx[2] = 2;
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <ModbusRTU_Receive+0x204>)
 800145a:	2202      	movs	r2, #2
 800145c:	709a      	strb	r2, [r3, #2]
				CRC_modbus = CRC16(buff_tx, 3);
 800145e:	2103      	movs	r1, #3
 8001460:	4839      	ldr	r0, [pc, #228]	; (8001548 <ModbusRTU_Receive+0x204>)
 8001462:	f000 fbb1 	bl	8001bc8 <CRC16>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <ModbusRTU_Receive+0x1ec>)
 800146c:	801a      	strh	r2, [r3, #0]
				buff_tx[3] = CRC_modbus & 0x00ff;
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <ModbusRTU_Receive+0x1ec>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <ModbusRTU_Receive+0x204>)
 8001476:	70da      	strb	r2, [r3, #3]
				buff_tx[4] = CRC_modbus >> 8;
 8001478:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <ModbusRTU_Receive+0x1ec>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	b29b      	uxth	r3, r3
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <ModbusRTU_Receive+0x204>)
 8001484:	711a      	strb	r2, [r3, #4]
				Num_Data_TX = 5;
 8001486:	4b31      	ldr	r3, [pc, #196]	; (800154c <ModbusRTU_Receive+0x208>)
 8001488:	2205      	movs	r2, #5
 800148a:	801a      	strh	r2, [r3, #0]
				break;
 800148c:	e30a      	b.n	8001aa4 <ModbusRTU_Receive+0x760>
			case 2:
				buff_tx[0] = ID_Device;
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <ModbusRTU_Receive+0x1f8>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <ModbusRTU_Receive+0x204>)
 8001496:	701a      	strb	r2, [r3, #0]
				buff_tx[1] = FK | 0x80;
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <ModbusRTU_Receive+0x1f4>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <ModbusRTU_Receive+0x204>)
 80014a4:	705a      	strb	r2, [r3, #1]
				buff_tx[2] = 2;
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <ModbusRTU_Receive+0x204>)
 80014a8:	2202      	movs	r2, #2
 80014aa:	709a      	strb	r2, [r3, #2]
				CRC_modbus = CRC16(buff_tx, 3);
 80014ac:	2103      	movs	r1, #3
 80014ae:	4826      	ldr	r0, [pc, #152]	; (8001548 <ModbusRTU_Receive+0x204>)
 80014b0:	f000 fb8a 	bl	8001bc8 <CRC16>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <ModbusRTU_Receive+0x1ec>)
 80014ba:	801a      	strh	r2, [r3, #0]
				buff_tx[3] = CRC_modbus & 0x00ff;
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <ModbusRTU_Receive+0x1ec>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <ModbusRTU_Receive+0x204>)
 80014c4:	70da      	strb	r2, [r3, #3]
				buff_tx[4] = CRC_modbus >> 8;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <ModbusRTU_Receive+0x1ec>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <ModbusRTU_Receive+0x204>)
 80014d2:	711a      	strb	r2, [r3, #4]
				Num_Data_TX = 5;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <ModbusRTU_Receive+0x208>)
 80014d6:	2205      	movs	r2, #5
 80014d8:	801a      	strh	r2, [r3, #0]
				break;
 80014da:	e2e3      	b.n	8001aa4 <ModbusRTU_Receive+0x760>
			case 3:
				if ((ADR <= ADR_MAX_AO) && (ADR + NUM_REG <= ADR_MAX_AO)
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <ModbusRTU_Receive+0x1fc>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	2b0a      	cmp	r3, #10
 80014e2:	f200 8085 	bhi.w	80015f0 <ModbusRTU_Receive+0x2ac>
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <ModbusRTU_Receive+0x1fc>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <ModbusRTU_Receive+0x200>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	2b0a      	cmp	r3, #10
 80014f4:	dc7c      	bgt.n	80015f0 <ModbusRTU_Receive+0x2ac>
						&& (NUM_REG > 0)) {
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <ModbusRTU_Receive+0x200>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d078      	beq.n	80015f0 <ModbusRTU_Receive+0x2ac>
					buff_tx[0] = ID_Device;
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <ModbusRTU_Receive+0x1f8>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <ModbusRTU_Receive+0x204>)
 8001506:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <ModbusRTU_Receive+0x1f4>)
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <ModbusRTU_Receive+0x204>)
 800150e:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = 2 * NUM_REG;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <ModbusRTU_Receive+0x200>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <ModbusRTU_Receive+0x204>)
 800151c:	709a      	strb	r2, [r3, #2]
					for (int i = 0; i < NUM_REG; i++) {
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	e038      	b.n	8001596 <ModbusRTU_Receive+0x252>
 8001524:	200006bc 	.word	0x200006bc
 8001528:	2000029c 	.word	0x2000029c
 800152c:	200001d4 	.word	0x200001d4
 8001530:	200002aa 	.word	0x200002aa
 8001534:	200002a4 	.word	0x200002a4
 8001538:	200002a5 	.word	0x200002a5
 800153c:	2000000c 	.word	0x2000000c
 8001540:	200002a6 	.word	0x200002a6
 8001544:	200002a8 	.word	0x200002a8
 8001548:	20000238 	.word	0x20000238
 800154c:	2000029e 	.word	0x2000029e
						buff_tx[3 + 2 * i] = *DATA_AO[ADR + i] >> 8;
 8001550:	4b88      	ldr	r3, [pc, #544]	; (8001774 <ModbusRTU_Receive+0x430>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4413      	add	r3, r2
 800155a:	4a87      	ldr	r2, [pc, #540]	; (8001778 <ModbusRTU_Receive+0x434>)
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	0a1b      	lsrs	r3, r3, #8
 8001564:	b29a      	uxth	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	3303      	adds	r3, #3
 800156c:	b2d1      	uxtb	r1, r2
 800156e:	4a83      	ldr	r2, [pc, #524]	; (800177c <ModbusRTU_Receive+0x438>)
 8001570:	54d1      	strb	r1, [r2, r3]
						buff_tx[4 + 2 * i] = *DATA_AO[ADR + i] & 0x00ff;
 8001572:	4b80      	ldr	r3, [pc, #512]	; (8001774 <ModbusRTU_Receive+0x430>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	4a7e      	ldr	r2, [pc, #504]	; (8001778 <ModbusRTU_Receive+0x434>)
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	881a      	ldrh	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3302      	adds	r3, #2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	b2d1      	uxtb	r1, r2
 800158c:	4a7b      	ldr	r2, [pc, #492]	; (800177c <ModbusRTU_Receive+0x438>)
 800158e:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < NUM_REG; i++) {
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3301      	adds	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b7a      	ldr	r3, [pc, #488]	; (8001780 <ModbusRTU_Receive+0x43c>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4293      	cmp	r3, r2
 80015a0:	dbd6      	blt.n	8001550 <ModbusRTU_Receive+0x20c>
					}
					CRC_modbus = CRC16(buff_tx, 3 + buff_tx[2]);
 80015a2:	4b76      	ldr	r3, [pc, #472]	; (800177c <ModbusRTU_Receive+0x438>)
 80015a4:	789b      	ldrb	r3, [r3, #2]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3303      	adds	r3, #3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4619      	mov	r1, r3
 80015ae:	4873      	ldr	r0, [pc, #460]	; (800177c <ModbusRTU_Receive+0x438>)
 80015b0:	f000 fb0a 	bl	8001bc8 <CRC16>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b72      	ldr	r3, [pc, #456]	; (8001784 <ModbusRTU_Receive+0x440>)
 80015ba:	801a      	strh	r2, [r3, #0]
					buff_tx[3 + buff_tx[2]] = CRC_modbus & 0x00ff;
 80015bc:	4b71      	ldr	r3, [pc, #452]	; (8001784 <ModbusRTU_Receive+0x440>)
 80015be:	881a      	ldrh	r2, [r3, #0]
 80015c0:	4b6e      	ldr	r3, [pc, #440]	; (800177c <ModbusRTU_Receive+0x438>)
 80015c2:	789b      	ldrb	r3, [r3, #2]
 80015c4:	3303      	adds	r3, #3
 80015c6:	b2d1      	uxtb	r1, r2
 80015c8:	4a6c      	ldr	r2, [pc, #432]	; (800177c <ModbusRTU_Receive+0x438>)
 80015ca:	54d1      	strb	r1, [r2, r3]
					buff_tx[4 + buff_tx[2]] = CRC_modbus >> 8;
 80015cc:	4b6d      	ldr	r3, [pc, #436]	; (8001784 <ModbusRTU_Receive+0x440>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	4b69      	ldr	r3, [pc, #420]	; (800177c <ModbusRTU_Receive+0x438>)
 80015d6:	789b      	ldrb	r3, [r3, #2]
 80015d8:	3304      	adds	r3, #4
 80015da:	b2d1      	uxtb	r1, r2
 80015dc:	4a67      	ldr	r2, [pc, #412]	; (800177c <ModbusRTU_Receive+0x438>)
 80015de:	54d1      	strb	r1, [r2, r3]
					Num_Data_TX = 5 + buff_tx[2];
 80015e0:	4b66      	ldr	r3, [pc, #408]	; (800177c <ModbusRTU_Receive+0x438>)
 80015e2:	789b      	ldrb	r3, [r3, #2]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	3305      	adds	r3, #5
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b67      	ldr	r3, [pc, #412]	; (8001788 <ModbusRTU_Receive+0x444>)
 80015ec:	801a      	strh	r2, [r3, #0]
					buff_tx[3] = CRC_modbus & 0x00ff;
					buff_tx[4] = CRC_modbus >> 8;
					Num_Data_TX = 5;
				}

				break;
 80015ee:	e259      	b.n	8001aa4 <ModbusRTU_Receive+0x760>
					buff_tx[0] = ID_Device;
 80015f0:	4b66      	ldr	r3, [pc, #408]	; (800178c <ModbusRTU_Receive+0x448>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b61      	ldr	r3, [pc, #388]	; (800177c <ModbusRTU_Receive+0x438>)
 80015f8:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK | 0x80;
 80015fa:	4b65      	ldr	r3, [pc, #404]	; (8001790 <ModbusRTU_Receive+0x44c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b5d      	ldr	r3, [pc, #372]	; (800177c <ModbusRTU_Receive+0x438>)
 8001606:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = 2;
 8001608:	4b5c      	ldr	r3, [pc, #368]	; (800177c <ModbusRTU_Receive+0x438>)
 800160a:	2202      	movs	r2, #2
 800160c:	709a      	strb	r2, [r3, #2]
					CRC_modbus = CRC16(buff_tx, 3);
 800160e:	2103      	movs	r1, #3
 8001610:	485a      	ldr	r0, [pc, #360]	; (800177c <ModbusRTU_Receive+0x438>)
 8001612:	f000 fad9 	bl	8001bc8 <CRC16>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	4b5a      	ldr	r3, [pc, #360]	; (8001784 <ModbusRTU_Receive+0x440>)
 800161c:	801a      	strh	r2, [r3, #0]
					buff_tx[3] = CRC_modbus & 0x00ff;
 800161e:	4b59      	ldr	r3, [pc, #356]	; (8001784 <ModbusRTU_Receive+0x440>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b55      	ldr	r3, [pc, #340]	; (800177c <ModbusRTU_Receive+0x438>)
 8001626:	70da      	strb	r2, [r3, #3]
					buff_tx[4] = CRC_modbus >> 8;
 8001628:	4b56      	ldr	r3, [pc, #344]	; (8001784 <ModbusRTU_Receive+0x440>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	b29b      	uxth	r3, r3
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b52      	ldr	r3, [pc, #328]	; (800177c <ModbusRTU_Receive+0x438>)
 8001634:	711a      	strb	r2, [r3, #4]
					Num_Data_TX = 5;
 8001636:	4b54      	ldr	r3, [pc, #336]	; (8001788 <ModbusRTU_Receive+0x444>)
 8001638:	2205      	movs	r2, #5
 800163a:	801a      	strh	r2, [r3, #0]
				break;
 800163c:	e232      	b.n	8001aa4 <ModbusRTU_Receive+0x760>
			case 4:
				if ((ADR <= ADR_MAX_AI) && (ADR + NUM_REG <= ADR_MAX_AI)
 800163e:	4b4d      	ldr	r3, [pc, #308]	; (8001774 <ModbusRTU_Receive+0x430>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	2b0a      	cmp	r3, #10
 8001644:	d86e      	bhi.n	8001724 <ModbusRTU_Receive+0x3e0>
 8001646:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <ModbusRTU_Receive+0x430>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4b4c      	ldr	r3, [pc, #304]	; (8001780 <ModbusRTU_Receive+0x43c>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	4413      	add	r3, r2
 8001652:	2b0a      	cmp	r3, #10
 8001654:	dc66      	bgt.n	8001724 <ModbusRTU_Receive+0x3e0>
						&& (NUM_REG > 0)) {
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <ModbusRTU_Receive+0x43c>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d062      	beq.n	8001724 <ModbusRTU_Receive+0x3e0>
					buff_tx[0] = ID_Device;
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <ModbusRTU_Receive+0x448>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b45      	ldr	r3, [pc, #276]	; (800177c <ModbusRTU_Receive+0x438>)
 8001666:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK;
 8001668:	4b49      	ldr	r3, [pc, #292]	; (8001790 <ModbusRTU_Receive+0x44c>)
 800166a:	781a      	ldrb	r2, [r3, #0]
 800166c:	4b43      	ldr	r3, [pc, #268]	; (800177c <ModbusRTU_Receive+0x438>)
 800166e:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = 2 * NUM_REG;
 8001670:	4b43      	ldr	r3, [pc, #268]	; (8001780 <ModbusRTU_Receive+0x43c>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b40      	ldr	r3, [pc, #256]	; (800177c <ModbusRTU_Receive+0x438>)
 800167c:	709a      	strb	r2, [r3, #2]
					for (int i = 0; i < NUM_REG; i++) {
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	e022      	b.n	80016ca <ModbusRTU_Receive+0x386>
						buff_tx[3 + 2 * i] = *DATA_AI[ADR + i] >> 8;
 8001684:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <ModbusRTU_Receive+0x430>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	4413      	add	r3, r2
 800168e:	4a41      	ldr	r2, [pc, #260]	; (8001794 <ModbusRTU_Receive+0x450>)
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b29a      	uxth	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	3303      	adds	r3, #3
 80016a0:	b2d1      	uxtb	r1, r2
 80016a2:	4a36      	ldr	r2, [pc, #216]	; (800177c <ModbusRTU_Receive+0x438>)
 80016a4:	54d1      	strb	r1, [r2, r3]
						buff_tx[4 + 2 * i] = *DATA_AI[ADR + i] & 0x00ff;
 80016a6:	4b33      	ldr	r3, [pc, #204]	; (8001774 <ModbusRTU_Receive+0x430>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a38      	ldr	r2, [pc, #224]	; (8001794 <ModbusRTU_Receive+0x450>)
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	881a      	ldrh	r2, [r3, #0]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3302      	adds	r3, #2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	b2d1      	uxtb	r1, r2
 80016c0:	4a2e      	ldr	r2, [pc, #184]	; (800177c <ModbusRTU_Receive+0x438>)
 80016c2:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < NUM_REG; i++) {
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	3301      	adds	r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <ModbusRTU_Receive+0x43c>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4293      	cmp	r3, r2
 80016d4:	dbd6      	blt.n	8001684 <ModbusRTU_Receive+0x340>
					}
					CRC_modbus = CRC16(buff_tx, 3 + buff_tx[2]);
 80016d6:	4b29      	ldr	r3, [pc, #164]	; (800177c <ModbusRTU_Receive+0x438>)
 80016d8:	789b      	ldrb	r3, [r3, #2]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3303      	adds	r3, #3
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4619      	mov	r1, r3
 80016e2:	4826      	ldr	r0, [pc, #152]	; (800177c <ModbusRTU_Receive+0x438>)
 80016e4:	f000 fa70 	bl	8001bc8 <CRC16>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <ModbusRTU_Receive+0x440>)
 80016ee:	801a      	strh	r2, [r3, #0]
					buff_tx[3 + buff_tx[2]] = CRC_modbus & 0x00ff;
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <ModbusRTU_Receive+0x440>)
 80016f2:	881a      	ldrh	r2, [r3, #0]
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <ModbusRTU_Receive+0x438>)
 80016f6:	789b      	ldrb	r3, [r3, #2]
 80016f8:	3303      	adds	r3, #3
 80016fa:	b2d1      	uxtb	r1, r2
 80016fc:	4a1f      	ldr	r2, [pc, #124]	; (800177c <ModbusRTU_Receive+0x438>)
 80016fe:	54d1      	strb	r1, [r2, r3]
					buff_tx[4 + buff_tx[2]] = CRC_modbus >> 8;
 8001700:	4b20      	ldr	r3, [pc, #128]	; (8001784 <ModbusRTU_Receive+0x440>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <ModbusRTU_Receive+0x438>)
 800170a:	789b      	ldrb	r3, [r3, #2]
 800170c:	3304      	adds	r3, #4
 800170e:	b2d1      	uxtb	r1, r2
 8001710:	4a1a      	ldr	r2, [pc, #104]	; (800177c <ModbusRTU_Receive+0x438>)
 8001712:	54d1      	strb	r1, [r2, r3]
					Num_Data_TX = 5 + buff_tx[2];
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <ModbusRTU_Receive+0x438>)
 8001716:	789b      	ldrb	r3, [r3, #2]
 8001718:	b29b      	uxth	r3, r3
 800171a:	3305      	adds	r3, #5
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <ModbusRTU_Receive+0x444>)
 8001720:	801a      	strh	r2, [r3, #0]
					CRC_modbus = CRC16(buff_tx, 3);
					buff_tx[3] = CRC_modbus & 0x00ff;
					buff_tx[4] = CRC_modbus >> 8;
					Num_Data_TX = 5;
				}
				break;
 8001722:	e1bf      	b.n	8001aa4 <ModbusRTU_Receive+0x760>
					buff_tx[0] = ID_Device;
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <ModbusRTU_Receive+0x448>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <ModbusRTU_Receive+0x438>)
 800172c:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK | 0x80;
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <ModbusRTU_Receive+0x44c>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <ModbusRTU_Receive+0x438>)
 800173a:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = 2;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <ModbusRTU_Receive+0x438>)
 800173e:	2202      	movs	r2, #2
 8001740:	709a      	strb	r2, [r3, #2]
					CRC_modbus = CRC16(buff_tx, 3);
 8001742:	2103      	movs	r1, #3
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <ModbusRTU_Receive+0x438>)
 8001746:	f000 fa3f 	bl	8001bc8 <CRC16>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <ModbusRTU_Receive+0x440>)
 8001750:	801a      	strh	r2, [r3, #0]
					buff_tx[3] = CRC_modbus & 0x00ff;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <ModbusRTU_Receive+0x440>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <ModbusRTU_Receive+0x438>)
 800175a:	70da      	strb	r2, [r3, #3]
					buff_tx[4] = CRC_modbus >> 8;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <ModbusRTU_Receive+0x440>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b29b      	uxth	r3, r3
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <ModbusRTU_Receive+0x438>)
 8001768:	711a      	strb	r2, [r3, #4]
					Num_Data_TX = 5;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <ModbusRTU_Receive+0x444>)
 800176c:	2205      	movs	r2, #5
 800176e:	801a      	strh	r2, [r3, #0]
				break;
 8001770:	e198      	b.n	8001aa4 <ModbusRTU_Receive+0x760>
 8001772:	bf00      	nop
 8001774:	200002a6 	.word	0x200002a6
 8001778:	2000015c 	.word	0x2000015c
 800177c:	20000238 	.word	0x20000238
 8001780:	200002a8 	.word	0x200002a8
 8001784:	200002aa 	.word	0x200002aa
 8001788:	2000029e 	.word	0x2000029e
 800178c:	2000000c 	.word	0x2000000c
 8001790:	200002a5 	.word	0x200002a5
 8001794:	20000184 	.word	0x20000184

			case 5:
				buff_tx[0] = ID_Device;
 8001798:	4b8f      	ldr	r3, [pc, #572]	; (80019d8 <ModbusRTU_Receive+0x694>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b8f      	ldr	r3, [pc, #572]	; (80019dc <ModbusRTU_Receive+0x698>)
 80017a0:	701a      	strb	r2, [r3, #0]
				buff_tx[1] = FK | 0x80;
 80017a2:	4b8f      	ldr	r3, [pc, #572]	; (80019e0 <ModbusRTU_Receive+0x69c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b8b      	ldr	r3, [pc, #556]	; (80019dc <ModbusRTU_Receive+0x698>)
 80017ae:	705a      	strb	r2, [r3, #1]
				buff_tx[2] = 2;
 80017b0:	4b8a      	ldr	r3, [pc, #552]	; (80019dc <ModbusRTU_Receive+0x698>)
 80017b2:	2202      	movs	r2, #2
 80017b4:	709a      	strb	r2, [r3, #2]
				CRC_modbus = CRC16(buff_tx, 3);
 80017b6:	2103      	movs	r1, #3
 80017b8:	4888      	ldr	r0, [pc, #544]	; (80019dc <ModbusRTU_Receive+0x698>)
 80017ba:	f000 fa05 	bl	8001bc8 <CRC16>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <ModbusRTU_Receive+0x6a0>)
 80017c4:	801a      	strh	r2, [r3, #0]
				buff_tx[3] = CRC_modbus & 0x00ff;
 80017c6:	4b87      	ldr	r3, [pc, #540]	; (80019e4 <ModbusRTU_Receive+0x6a0>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4b83      	ldr	r3, [pc, #524]	; (80019dc <ModbusRTU_Receive+0x698>)
 80017ce:	70da      	strb	r2, [r3, #3]
				buff_tx[4] = CRC_modbus >> 8;
 80017d0:	4b84      	ldr	r3, [pc, #528]	; (80019e4 <ModbusRTU_Receive+0x6a0>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b80      	ldr	r3, [pc, #512]	; (80019dc <ModbusRTU_Receive+0x698>)
 80017dc:	711a      	strb	r2, [r3, #4]
				Num_Data_TX = 5;
 80017de:	4b82      	ldr	r3, [pc, #520]	; (80019e8 <ModbusRTU_Receive+0x6a4>)
 80017e0:	2205      	movs	r2, #5
 80017e2:	801a      	strh	r2, [r3, #0]
				break;
 80017e4:	e15e      	b.n	8001aa4 <ModbusRTU_Receive+0x760>

			case 6:
				if (ADR <= ADR_MAX_AO) {
 80017e6:	4b81      	ldr	r3, [pc, #516]	; (80019ec <ModbusRTU_Receive+0x6a8>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	2b0a      	cmp	r3, #10
 80017ec:	d82c      	bhi.n	8001848 <ModbusRTU_Receive+0x504>
					*DATA_AO[ADR] = NUM_REG;
 80017ee:	4b7f      	ldr	r3, [pc, #508]	; (80019ec <ModbusRTU_Receive+0x6a8>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b7e      	ldr	r3, [pc, #504]	; (80019f0 <ModbusRTU_Receive+0x6ac>)
 80017f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fa:	4a7e      	ldr	r2, [pc, #504]	; (80019f4 <ModbusRTU_Receive+0x6b0>)
 80017fc:	8812      	ldrh	r2, [r2, #0]
 80017fe:	801a      	strh	r2, [r3, #0]
					buff_tx[0] = buff_rx[0];
 8001800:	4b7d      	ldr	r3, [pc, #500]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 8001802:	781a      	ldrb	r2, [r3, #0]
 8001804:	4b75      	ldr	r3, [pc, #468]	; (80019dc <ModbusRTU_Receive+0x698>)
 8001806:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = buff_rx[1];
 8001808:	4b7b      	ldr	r3, [pc, #492]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 800180a:	785a      	ldrb	r2, [r3, #1]
 800180c:	4b73      	ldr	r3, [pc, #460]	; (80019dc <ModbusRTU_Receive+0x698>)
 800180e:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = buff_rx[2];
 8001810:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 8001812:	789a      	ldrb	r2, [r3, #2]
 8001814:	4b71      	ldr	r3, [pc, #452]	; (80019dc <ModbusRTU_Receive+0x698>)
 8001816:	709a      	strb	r2, [r3, #2]
					buff_tx[3] = buff_rx[3];
 8001818:	4b77      	ldr	r3, [pc, #476]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 800181a:	78da      	ldrb	r2, [r3, #3]
 800181c:	4b6f      	ldr	r3, [pc, #444]	; (80019dc <ModbusRTU_Receive+0x698>)
 800181e:	70da      	strb	r2, [r3, #3]
					buff_tx[4] = buff_rx[4];
 8001820:	4b75      	ldr	r3, [pc, #468]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 8001822:	791a      	ldrb	r2, [r3, #4]
 8001824:	4b6d      	ldr	r3, [pc, #436]	; (80019dc <ModbusRTU_Receive+0x698>)
 8001826:	711a      	strb	r2, [r3, #4]
					buff_tx[5] = buff_rx[5];
 8001828:	4b73      	ldr	r3, [pc, #460]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 800182a:	795a      	ldrb	r2, [r3, #5]
 800182c:	4b6b      	ldr	r3, [pc, #428]	; (80019dc <ModbusRTU_Receive+0x698>)
 800182e:	715a      	strb	r2, [r3, #5]
					buff_tx[6] = buff_rx[6];
 8001830:	4b71      	ldr	r3, [pc, #452]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 8001832:	799a      	ldrb	r2, [r3, #6]
 8001834:	4b69      	ldr	r3, [pc, #420]	; (80019dc <ModbusRTU_Receive+0x698>)
 8001836:	719a      	strb	r2, [r3, #6]
					buff_tx[7] = buff_rx[7];
 8001838:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 800183a:	79da      	ldrb	r2, [r3, #7]
 800183c:	4b67      	ldr	r3, [pc, #412]	; (80019dc <ModbusRTU_Receive+0x698>)
 800183e:	71da      	strb	r2, [r3, #7]
					Num_Data_TX = 8;
 8001840:	4b69      	ldr	r3, [pc, #420]	; (80019e8 <ModbusRTU_Receive+0x6a4>)
 8001842:	2208      	movs	r2, #8
 8001844:	801a      	strh	r2, [r3, #0]
					CRC_modbus = CRC16(buff_tx, 3);
					buff_tx[3] = CRC_modbus & 0x00ff;
					buff_tx[4] = CRC_modbus >> 8;
					Num_Data_TX = 5;
				}
				break;
 8001846:	e12d      	b.n	8001aa4 <ModbusRTU_Receive+0x760>
					buff_tx[0] = ID_Device;
 8001848:	4b63      	ldr	r3, [pc, #396]	; (80019d8 <ModbusRTU_Receive+0x694>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b63      	ldr	r3, [pc, #396]	; (80019dc <ModbusRTU_Receive+0x698>)
 8001850:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK | 0x80;
 8001852:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <ModbusRTU_Receive+0x69c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b5f      	ldr	r3, [pc, #380]	; (80019dc <ModbusRTU_Receive+0x698>)
 800185e:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = 2;
 8001860:	4b5e      	ldr	r3, [pc, #376]	; (80019dc <ModbusRTU_Receive+0x698>)
 8001862:	2202      	movs	r2, #2
 8001864:	709a      	strb	r2, [r3, #2]
					CRC_modbus = CRC16(buff_tx, 3);
 8001866:	2103      	movs	r1, #3
 8001868:	485c      	ldr	r0, [pc, #368]	; (80019dc <ModbusRTU_Receive+0x698>)
 800186a:	f000 f9ad 	bl	8001bc8 <CRC16>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	4b5c      	ldr	r3, [pc, #368]	; (80019e4 <ModbusRTU_Receive+0x6a0>)
 8001874:	801a      	strh	r2, [r3, #0]
					buff_tx[3] = CRC_modbus & 0x00ff;
 8001876:	4b5b      	ldr	r3, [pc, #364]	; (80019e4 <ModbusRTU_Receive+0x6a0>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b57      	ldr	r3, [pc, #348]	; (80019dc <ModbusRTU_Receive+0x698>)
 800187e:	70da      	strb	r2, [r3, #3]
					buff_tx[4] = CRC_modbus >> 8;
 8001880:	4b58      	ldr	r3, [pc, #352]	; (80019e4 <ModbusRTU_Receive+0x6a0>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	b29b      	uxth	r3, r3
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b54      	ldr	r3, [pc, #336]	; (80019dc <ModbusRTU_Receive+0x698>)
 800188c:	711a      	strb	r2, [r3, #4]
					Num_Data_TX = 5;
 800188e:	4b56      	ldr	r3, [pc, #344]	; (80019e8 <ModbusRTU_Receive+0x6a4>)
 8001890:	2205      	movs	r2, #5
 8001892:	801a      	strh	r2, [r3, #0]
				break;
 8001894:	e106      	b.n	8001aa4 <ModbusRTU_Receive+0x760>

			case 15:
				buff_tx[0] = ID_Device;
 8001896:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <ModbusRTU_Receive+0x694>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b4f      	ldr	r3, [pc, #316]	; (80019dc <ModbusRTU_Receive+0x698>)
 800189e:	701a      	strb	r2, [r3, #0]
				buff_tx[1] = FK | 0x80;
 80018a0:	4b4f      	ldr	r3, [pc, #316]	; (80019e0 <ModbusRTU_Receive+0x69c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <ModbusRTU_Receive+0x698>)
 80018ac:	705a      	strb	r2, [r3, #1]
				buff_tx[2] = 2;
 80018ae:	4b4b      	ldr	r3, [pc, #300]	; (80019dc <ModbusRTU_Receive+0x698>)
 80018b0:	2202      	movs	r2, #2
 80018b2:	709a      	strb	r2, [r3, #2]
				CRC_modbus = CRC16(buff_tx, 3);
 80018b4:	2103      	movs	r1, #3
 80018b6:	4849      	ldr	r0, [pc, #292]	; (80019dc <ModbusRTU_Receive+0x698>)
 80018b8:	f000 f986 	bl	8001bc8 <CRC16>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	4b48      	ldr	r3, [pc, #288]	; (80019e4 <ModbusRTU_Receive+0x6a0>)
 80018c2:	801a      	strh	r2, [r3, #0]
				buff_tx[3] = CRC_modbus & 0x00ff;
 80018c4:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <ModbusRTU_Receive+0x6a0>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b44      	ldr	r3, [pc, #272]	; (80019dc <ModbusRTU_Receive+0x698>)
 80018cc:	70da      	strb	r2, [r3, #3]
				buff_tx[4] = CRC_modbus >> 8;
 80018ce:	4b45      	ldr	r3, [pc, #276]	; (80019e4 <ModbusRTU_Receive+0x6a0>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	4b40      	ldr	r3, [pc, #256]	; (80019dc <ModbusRTU_Receive+0x698>)
 80018da:	711a      	strb	r2, [r3, #4]
				Num_Data_TX = 5;
 80018dc:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <ModbusRTU_Receive+0x6a4>)
 80018de:	2205      	movs	r2, #5
 80018e0:	801a      	strh	r2, [r3, #0]
				break;
 80018e2:	e0df      	b.n	8001aa4 <ModbusRTU_Receive+0x760>
			case 16:

				if ((ADR <= ADR_MAX_AO) && (ADR + NUM_REG <= ADR_MAX_AO)
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <ModbusRTU_Receive+0x6a8>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	2b0a      	cmp	r3, #10
 80018ea:	f200 8087 	bhi.w	80019fc <ModbusRTU_Receive+0x6b8>
 80018ee:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <ModbusRTU_Receive+0x6a8>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <ModbusRTU_Receive+0x6b0>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	2b0a      	cmp	r3, #10
 80018fc:	dc7e      	bgt.n	80019fc <ModbusRTU_Receive+0x6b8>
						&& (NUM_REG > 0)) {
 80018fe:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <ModbusRTU_Receive+0x6b0>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d07a      	beq.n	80019fc <ModbusRTU_Receive+0x6b8>
					for (int i = 0; i < NUM_REG; i++) {
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	e02d      	b.n	8001968 <ModbusRTU_Receive+0x624>
						*DATA_AO[ADR + i] = buff_rx[7 + 2 * i] << 8;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	3307      	adds	r3, #7
 8001912:	4a39      	ldr	r2, [pc, #228]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	b29a      	uxth	r2, r3
 8001918:	4b34      	ldr	r3, [pc, #208]	; (80019ec <ModbusRTU_Receive+0x6a8>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	440b      	add	r3, r1
 8001922:	4933      	ldr	r1, [pc, #204]	; (80019f0 <ModbusRTU_Receive+0x6ac>)
 8001924:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001928:	0212      	lsls	r2, r2, #8
 800192a:	b292      	uxth	r2, r2
 800192c:	801a      	strh	r2, [r3, #0]
						*DATA_AO[ADR + i] |= buff_rx[8 + 2 * i];
 800192e:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <ModbusRTU_Receive+0x6a8>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	4a2d      	ldr	r2, [pc, #180]	; (80019f0 <ModbusRTU_Receive+0x6ac>)
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	8819      	ldrh	r1, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3304      	adds	r3, #4
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4a2c      	ldr	r2, [pc, #176]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 8001948:	5cd3      	ldrb	r3, [r2, r3]
 800194a:	b29a      	uxth	r2, r3
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <ModbusRTU_Receive+0x6a8>)
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4403      	add	r3, r0
 8001956:	4826      	ldr	r0, [pc, #152]	; (80019f0 <ModbusRTU_Receive+0x6ac>)
 8001958:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800195c:	430a      	orrs	r2, r1
 800195e:	b292      	uxth	r2, r2
 8001960:	801a      	strh	r2, [r3, #0]
					for (int i = 0; i < NUM_REG; i++) {
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3301      	adds	r3, #1
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <ModbusRTU_Receive+0x6b0>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4293      	cmp	r3, r2
 8001972:	dbcb      	blt.n	800190c <ModbusRTU_Receive+0x5c8>
					}
					buff_tx[0] = ID_Device;
 8001974:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <ModbusRTU_Receive+0x694>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <ModbusRTU_Receive+0x698>)
 800197c:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK;
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <ModbusRTU_Receive+0x69c>)
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <ModbusRTU_Receive+0x698>)
 8001984:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = buff_rx[2];
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 8001988:	789a      	ldrb	r2, [r3, #2]
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <ModbusRTU_Receive+0x698>)
 800198c:	709a      	strb	r2, [r3, #2]
					buff_tx[3] = buff_rx[3];
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 8001990:	78da      	ldrb	r2, [r3, #3]
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <ModbusRTU_Receive+0x698>)
 8001994:	70da      	strb	r2, [r3, #3]
					buff_tx[4] = buff_rx[4];
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 8001998:	791a      	ldrb	r2, [r3, #4]
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <ModbusRTU_Receive+0x698>)
 800199c:	711a      	strb	r2, [r3, #4]
					buff_tx[5] = buff_rx[5];
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <ModbusRTU_Receive+0x6b4>)
 80019a0:	795a      	ldrb	r2, [r3, #5]
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <ModbusRTU_Receive+0x698>)
 80019a4:	715a      	strb	r2, [r3, #5]
					CRC_modbus = CRC16(buff_tx, 6);
 80019a6:	2106      	movs	r1, #6
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <ModbusRTU_Receive+0x698>)
 80019aa:	f000 f90d 	bl	8001bc8 <CRC16>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <ModbusRTU_Receive+0x6a0>)
 80019b4:	801a      	strh	r2, [r3, #0]
					buff_tx[6] = CRC_modbus & 0x00ff;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <ModbusRTU_Receive+0x6a0>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <ModbusRTU_Receive+0x698>)
 80019be:	719a      	strb	r2, [r3, #6]
					buff_tx[7] = CRC_modbus >> 8;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <ModbusRTU_Receive+0x6a0>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <ModbusRTU_Receive+0x698>)
 80019cc:	71da      	strb	r2, [r3, #7]
					Num_Data_TX = 8;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <ModbusRTU_Receive+0x6a4>)
 80019d0:	2208      	movs	r2, #8
 80019d2:	801a      	strh	r2, [r3, #0]
					CRC_modbus = CRC16(buff_tx, 3);
					buff_tx[3] = CRC_modbus & 0x00ff;
					buff_tx[4] = CRC_modbus >> 8;
					Num_Data_TX = 5;
				}
				break;
 80019d4:	e066      	b.n	8001aa4 <ModbusRTU_Receive+0x760>
 80019d6:	bf00      	nop
 80019d8:	2000000c 	.word	0x2000000c
 80019dc:	20000238 	.word	0x20000238
 80019e0:	200002a5 	.word	0x200002a5
 80019e4:	200002aa 	.word	0x200002aa
 80019e8:	2000029e 	.word	0x2000029e
 80019ec:	200002a6 	.word	0x200002a6
 80019f0:	2000015c 	.word	0x2000015c
 80019f4:	200002a8 	.word	0x200002a8
 80019f8:	200001d4 	.word	0x200001d4
					buff_tx[0] = ID_Device;
 80019fc:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <ModbusRTU_Receive+0x768>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <ModbusRTU_Receive+0x76c>)
 8001a04:	701a      	strb	r2, [r3, #0]
					buff_tx[1] = FK | 0x80;
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <ModbusRTU_Receive+0x770>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <ModbusRTU_Receive+0x76c>)
 8001a12:	705a      	strb	r2, [r3, #1]
					buff_tx[2] = 2;
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <ModbusRTU_Receive+0x76c>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	709a      	strb	r2, [r3, #2]
					CRC_modbus = CRC16(buff_tx, 3);
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	4824      	ldr	r0, [pc, #144]	; (8001ab0 <ModbusRTU_Receive+0x76c>)
 8001a1e:	f000 f8d3 	bl	8001bc8 <CRC16>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <ModbusRTU_Receive+0x774>)
 8001a28:	801a      	strh	r2, [r3, #0]
					buff_tx[3] = CRC_modbus & 0x00ff;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <ModbusRTU_Receive+0x774>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <ModbusRTU_Receive+0x76c>)
 8001a32:	70da      	strb	r2, [r3, #3]
					buff_tx[4] = CRC_modbus >> 8;
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <ModbusRTU_Receive+0x774>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <ModbusRTU_Receive+0x76c>)
 8001a40:	711a      	strb	r2, [r3, #4]
					Num_Data_TX = 5;
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <ModbusRTU_Receive+0x778>)
 8001a44:	2205      	movs	r2, #5
 8001a46:	801a      	strh	r2, [r3, #0]
				break;
 8001a48:	e02c      	b.n	8001aa4 <ModbusRTU_Receive+0x760>
			default:

				break;
			}
		} else {
			HAL_UART_Receive_IT(&UART_MODBUS, (uint8_t*) buff_rx, Num_Data_buf);
 8001a4a:	2264      	movs	r2, #100	; 0x64
 8001a4c:	491c      	ldr	r1, [pc, #112]	; (8001ac0 <ModbusRTU_Receive+0x77c>)
 8001a4e:	481d      	ldr	r0, [pc, #116]	; (8001ac4 <ModbusRTU_Receive+0x780>)
 8001a50:	f005 ff60 	bl	8007914 <HAL_UART_Receive_IT>
			__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_PE);
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <ModbusRTU_Receive+0x780>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <ModbusRTU_Receive+0x780>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a62:	60da      	str	r2, [r3, #12]
			__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_ERR);
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <ModbusRTU_Receive+0x780>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <ModbusRTU_Receive+0x780>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	615a      	str	r2, [r3, #20]
		HAL_UART_Receive_IT(&UART_MODBUS, (uint8_t*) buff_rx, Num_Data_buf);
		__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_PE);
		__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_ERR);
		//HAL_UART_Receive_IT(&UART_MODBUS, buff_rx, Num_Data_buf);
	}
}
 8001a74:	e016      	b.n	8001aa4 <ModbusRTU_Receive+0x760>
		HAL_UART_Receive_IT(&UART_MODBUS, (uint8_t*) buff_rx, Num_Data_buf);
 8001a76:	2264      	movs	r2, #100	; 0x64
 8001a78:	4911      	ldr	r1, [pc, #68]	; (8001ac0 <ModbusRTU_Receive+0x77c>)
 8001a7a:	4812      	ldr	r0, [pc, #72]	; (8001ac4 <ModbusRTU_Receive+0x780>)
 8001a7c:	f005 ff4a 	bl	8007914 <HAL_UART_Receive_IT>
		__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_PE);
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <ModbusRTU_Receive+0x780>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <ModbusRTU_Receive+0x780>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a8e:	60da      	str	r2, [r3, #12]
		__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_ERR);
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <ModbusRTU_Receive+0x780>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <ModbusRTU_Receive+0x780>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0201 	bic.w	r2, r2, #1
 8001a9e:	615a      	str	r2, [r3, #20]
}
 8001aa0:	e000      	b.n	8001aa4 <ModbusRTU_Receive+0x760>
				break;
 8001aa2:	bf00      	nop
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	2000000c 	.word	0x2000000c
 8001ab0:	20000238 	.word	0x20000238
 8001ab4:	200002a5 	.word	0x200002a5
 8001ab8:	200002aa 	.word	0x200002aa
 8001abc:	2000029e 	.word	0x2000029e
 8001ac0:	200001d4 	.word	0x200001d4
 8001ac4:	200006bc 	.word	0x200006bc

08001ac8 <ModbusRTU_Transmit>:

void ModbusRTU_Transmit() {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	if (Num_Data_TX > 0) {
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <ModbusRTU_Transmit+0x30>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00e      	beq.n	8001af2 <ModbusRTU_Transmit+0x2a>
		HAL_GPIO_WritePin(UART_DIR_PORT, UART_DIR_PIN, 1);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2108      	movs	r1, #8
 8001ad8:	4808      	ldr	r0, [pc, #32]	; (8001afc <ModbusRTU_Transmit+0x34>)
 8001ada:	f003 ff59 	bl	8005990 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
		HAL_UART_Transmit_IT(&UART_MODBUS, (uint8_t*) buff_tx, Num_Data_TX);
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <ModbusRTU_Transmit+0x30>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4906      	ldr	r1, [pc, #24]	; (8001b00 <ModbusRTU_Transmit+0x38>)
 8001ae6:	4807      	ldr	r0, [pc, #28]	; (8001b04 <ModbusRTU_Transmit+0x3c>)
 8001ae8:	f005 fecf 	bl	800788a <HAL_UART_Transmit_IT>
		Num_Data_TX=0;
 8001aec:	4b02      	ldr	r3, [pc, #8]	; (8001af8 <ModbusRTU_Transmit+0x30>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	801a      	strh	r2, [r3, #0]
		//HAL_UART_Transmit_IT(&UART_MODBUS, buff_tx, Num_Data_TX);

	}
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000029e 	.word	0x2000029e
 8001afc:	40020400 	.word	0x40020400
 8001b00:	20000238 	.word	0x20000238
 8001b04:	200006bc 	.word	0x200006bc

08001b08 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	if (huart == &UART_MODBUS) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_UART_RxCpltCallback+0x20>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d103      	bne.n	8001b20 <HAL_UART_RxCpltCallback+0x18>
		ModbusRTU_Receive(); //что-то делаем
 8001b18:	f7ff fc14 	bl	8001344 <ModbusRTU_Receive>
		ModbusRTU_Transmit();
 8001b1c:	f7ff ffd4 	bl	8001ac8 <ModbusRTU_Transmit>
	}
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200006bc 	.word	0x200006bc

08001b2c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	if (huart == &UART_MODBUS) {
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <HAL_UART_TxCpltCallback+0x54>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d11c      	bne.n	8001b76 <HAL_UART_TxCpltCallback+0x4a>
		HAL_GPIO_WritePin(UART_DIR_PORT, UART_DIR_PIN, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2108      	movs	r1, #8
 8001b40:	4810      	ldr	r0, [pc, #64]	; (8001b84 <HAL_UART_TxCpltCallback+0x58>)
 8001b42:	f003 ff25 	bl	8005990 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
		Num_Data_TX = 0;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_UART_TxCpltCallback+0x5c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	801a      	strh	r2, [r3, #0]


		HAL_UART_Receive_IT(&UART_MODBUS, (uint8_t*) buff_rx, Num_Data_buf);
 8001b4c:	2264      	movs	r2, #100	; 0x64
 8001b4e:	490f      	ldr	r1, [pc, #60]	; (8001b8c <HAL_UART_TxCpltCallback+0x60>)
 8001b50:	480b      	ldr	r0, [pc, #44]	; (8001b80 <HAL_UART_TxCpltCallback+0x54>)
 8001b52:	f005 fedf 	bl	8007914 <HAL_UART_Receive_IT>
		__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_PE);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_UART_TxCpltCallback+0x54>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_UART_TxCpltCallback+0x54>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b64:	60da      	str	r2, [r3, #12]
		__HAL_UART_DISABLE_IT(&UART_MODBUS, UART_IT_ERR);
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_UART_TxCpltCallback+0x54>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <HAL_UART_TxCpltCallback+0x54>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0201 	bic.w	r2, r2, #1
 8001b74:	615a      	str	r2, [r3, #20]

		//HAL_UART_Receive_IT(&UART_MODBUS, buff_rx, Num_Data_buf);
	}
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200006bc 	.word	0x200006bc
 8001b84:	40020400 	.word	0x40020400
 8001b88:	2000029e 	.word	0x2000029e
 8001b8c:	200001d4 	.word	0x200001d4

08001b90 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	if (huart == &UART_MODBUS) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <HAL_UART_ErrorCallback+0x2c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d109      	bne.n	8001bb4 <HAL_UART_ErrorCallback+0x24>
		MODBUS_FAULT = 2;
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_UART_ErrorCallback+0x30>)
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	801a      	strh	r2, [r3, #0]
		UART_ERR = HAL_UART_GetError(&UART_MODBUS);
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <HAL_UART_ErrorCallback+0x2c>)
 8001ba8:	f006 fa3a 	bl	8008020 <HAL_UART_GetError>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_UART_ErrorCallback+0x34>)
 8001bb2:	801a      	strh	r2, [r3, #0]

		 default:
		 break;
		 }*/
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200006bc 	.word	0x200006bc
 8001bc0:	200002a2 	.word	0x200002a2
 8001bc4:	200002a0 	.word	0x200002a0

08001bc8 <CRC16>:

	return x;
}

unsigned short CRC16(unsigned char * pcBlock, unsigned short len)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8001bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd8:	81fb      	strh	r3, [r7, #14]

    while (len--)
 8001bda:	e00e      	b.n	8001bfa <CRC16+0x32>
        crc = (crc >> 8) ^ Crc16Table[(crc & 0xFF) ^ *pcBlock++];
 8001bdc:	89fb      	ldrh	r3, [r7, #14]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	89fb      	ldrh	r3, [r7, #14]
 8001be4:	b2d9      	uxtb	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	1c58      	adds	r0, r3, #1
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	404b      	eors	r3, r1
 8001bf0:	4908      	ldr	r1, [pc, #32]	; (8001c14 <CRC16+0x4c>)
 8001bf2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001bf6:	4053      	eors	r3, r2
 8001bf8:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	807a      	strh	r2, [r7, #2]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1eb      	bne.n	8001bdc <CRC16+0x14>

    return crc;
 8001c04:	89fb      	ldrh	r3, [r7, #14]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	08008970 	.word	0x08008970

08001c18 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c36:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c38:	4a2b      	ldr	r2, [pc, #172]	; (8001ce8 <MX_ADC1_Init+0xd0>)
 8001c3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c42:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c4e:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c5c:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c66:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c86:	4817      	ldr	r0, [pc, #92]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001c88:	f002 fd3a 	bl	8004700 <HAL_ADC_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8001c92:	f001 fb31 	bl	80032f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 8001c96:	2316      	movs	r3, #22
 8001c98:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 8001c9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c9e:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480e      	ldr	r0, [pc, #56]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001cac:	f003 f874 	bl	8004d98 <HAL_ADCEx_MultiModeConfigChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8001cb6:	f001 fb1f 	bl	80032f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001cba:	230b      	movs	r3, #11
 8001cbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <MX_ADC1_Init+0xcc>)
 8001ccc:	f002 fd7a 	bl	80047c4 <HAL_ADC_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001cd6:	f001 fb0f 	bl	80032f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200002ac 	.word	0x200002ac
 8001ce8:	40012000 	.word	0x40012000

08001cec <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MX_ADC2_Init+0x8c>)
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <MX_ADC2_Init+0x90>)
 8001d02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <MX_ADC2_Init+0x8c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_ADC2_Init+0x8c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <MX_ADC2_Init+0x8c>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_ADC2_Init+0x8c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <MX_ADC2_Init+0x8c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <MX_ADC2_Init+0x8c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <MX_ADC2_Init+0x8c>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <MX_ADC2_Init+0x8c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <MX_ADC2_Init+0x8c>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d3e:	480e      	ldr	r0, [pc, #56]	; (8001d78 <MX_ADC2_Init+0x8c>)
 8001d40:	f002 fcde 	bl	8004700 <HAL_ADC_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_ADC2_Init+0x62>
  {
    Error_Handler();
 8001d4a:	f001 fad5 	bl	80032f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001d4e:	230c      	movs	r3, #12
 8001d50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <MX_ADC2_Init+0x8c>)
 8001d60:	f002 fd30 	bl	80047c4 <HAL_ADC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8001d6a:	f001 fac5 	bl	80032f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200002f4 	.word	0x200002f4
 8001d7c:	40012100 	.word	0x40012100

08001d80 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d86:	463b      	mov	r3, r7
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_ADC3_Init+0x8c>)
 8001d94:	4a1e      	ldr	r2, [pc, #120]	; (8001e10 <MX_ADC3_Init+0x90>)
 8001d96:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_ADC3_Init+0x8c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_ADC3_Init+0x8c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <MX_ADC3_Init+0x8c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_ADC3_Init+0x8c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_ADC3_Init+0x8c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_ADC3_Init+0x8c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_ADC3_Init+0x8c>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_ADC3_Init+0x8c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_ADC3_Init+0x8c>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001dd2:	480e      	ldr	r0, [pc, #56]	; (8001e0c <MX_ADC3_Init+0x8c>)
 8001dd4:	f002 fc94 	bl	8004700 <HAL_ADC_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_ADC3_Init+0x62>
  {
    Error_Handler();
 8001dde:	f001 fa8b 	bl	80032f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001de2:	230a      	movs	r3, #10
 8001de4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001dee:	463b      	mov	r3, r7
 8001df0:	4619      	mov	r1, r3
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <MX_ADC3_Init+0x8c>)
 8001df4:	f002 fce6 	bl	80047c4 <HAL_ADC_ConfigChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 8001dfe:	f001 fa7b 	bl	80032f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000033c 	.word	0x2000033c
 8001e10:	40012200 	.word	0x40012200

08001e14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08e      	sub	sp, #56	; 0x38
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a5d      	ldr	r2, [pc, #372]	; (8001fa8 <HAL_ADC_MspInit+0x194>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d158      	bne.n	8001ee8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
 8001e3a:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a5b      	ldr	r2, [pc, #364]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b59      	ldr	r3, [pc, #356]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	623b      	str	r3, [r7, #32]
 8001e50:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	4b55      	ldr	r3, [pc, #340]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a54      	ldr	r2, [pc, #336]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b52      	ldr	r3, [pc, #328]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = U_Pin;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e72:	2303      	movs	r3, #3
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(U_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7e:	4619      	mov	r1, r3
 8001e80:	484b      	ldr	r0, [pc, #300]	; (8001fb0 <HAL_ADC_MspInit+0x19c>)
 8001e82:	f003 fbd1 	bl	8005628 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e86:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001e88:	4a4b      	ldr	r2, [pc, #300]	; (8001fb8 <HAL_ADC_MspInit+0x1a4>)
 8001e8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e8c:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e92:	4b48      	ldr	r3, [pc, #288]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e98:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e9e:	4b45      	ldr	r3, [pc, #276]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea6:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001eb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ebc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec4:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001eca:	483a      	ldr	r0, [pc, #232]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001ecc:	f003 f934 	bl	8005138 <HAL_DMA_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001ed6:	f001 fa0f 	bl	80032f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a35      	ldr	r2, [pc, #212]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001ede:	639a      	str	r2, [r3, #56]	; 0x38
 8001ee0:	4a34      	ldr	r2, [pc, #208]	; (8001fb4 <HAL_ADC_MspInit+0x1a0>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001ee6:	e05a      	b.n	8001f9e <HAL_ADC_MspInit+0x18a>
  else if(adcHandle->Instance==ADC2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a33      	ldr	r2, [pc, #204]	; (8001fbc <HAL_ADC_MspInit+0x1a8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d128      	bne.n	8001f44 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4a2c      	ldr	r2, [pc, #176]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f00:	6453      	str	r3, [r2, #68]	; 0x44
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a25      	ldr	r2, [pc, #148]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = I_Pin;
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	481c      	ldr	r0, [pc, #112]	; (8001fb0 <HAL_ADC_MspInit+0x19c>)
 8001f3e:	f003 fb73 	bl	8005628 <HAL_GPIO_Init>
}
 8001f42:	e02c      	b.n	8001f9e <HAL_ADC_MspInit+0x18a>
  else if(adcHandle->Instance==ADC3)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_ADC_MspInit+0x1ac>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d127      	bne.n	8001f9e <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a15      	ldr	r2, [pc, #84]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001f58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_ADC_MspInit+0x198>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Trt_Pin;
 8001f86:	2301      	movs	r3, #1
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Trt_GPIO_Port, &GPIO_InitStruct);
 8001f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f96:	4619      	mov	r1, r3
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <HAL_ADC_MspInit+0x19c>)
 8001f9a:	f003 fb45 	bl	8005628 <HAL_GPIO_Init>
}
 8001f9e:	bf00      	nop
 8001fa0:	3738      	adds	r7, #56	; 0x38
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40012000 	.word	0x40012000
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	20000384 	.word	0x20000384
 8001fb8:	40026410 	.word	0x40026410
 8001fbc:	40012100 	.word	0x40012100
 8001fc0:	40012200 	.word	0x40012200

08001fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MX_DMA_Init+0x30>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a08      	ldr	r2, [pc, #32]	; (8001ff4 <MX_DMA_Init+0x30>)
 8001fd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_DMA_Init+0x30>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffe:	f107 0314 	add.w	r3, r7, #20
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b42      	ldr	r3, [pc, #264]	; (800211c <MX_GPIO_Init+0x124>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a41      	ldr	r2, [pc, #260]	; (800211c <MX_GPIO_Init+0x124>)
 8002018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b3f      	ldr	r3, [pc, #252]	; (800211c <MX_GPIO_Init+0x124>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b3b      	ldr	r3, [pc, #236]	; (800211c <MX_GPIO_Init+0x124>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a3a      	ldr	r2, [pc, #232]	; (800211c <MX_GPIO_Init+0x124>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b38      	ldr	r3, [pc, #224]	; (800211c <MX_GPIO_Init+0x124>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	4b34      	ldr	r3, [pc, #208]	; (800211c <MX_GPIO_Init+0x124>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a33      	ldr	r2, [pc, #204]	; (800211c <MX_GPIO_Init+0x124>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b31      	ldr	r3, [pc, #196]	; (800211c <MX_GPIO_Init+0x124>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <MX_GPIO_Init+0x124>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a2c      	ldr	r2, [pc, #176]	; (800211c <MX_GPIO_Init+0x124>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <MX_GPIO_Init+0x124>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <MX_GPIO_Init+0x124>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a25      	ldr	r2, [pc, #148]	; (800211c <MX_GPIO_Init+0x124>)
 8002088:	f043 0308 	orr.w	r3, r3, #8
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b23      	ldr	r3, [pc, #140]	; (800211c <MX_GPIO_Init+0x124>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_PWM_Pin|UART5_DIR_Pin|DO_1_Pin|DO_2_Pin
 800209a:	2200      	movs	r2, #0
 800209c:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 80020a0:	481f      	ldr	r0, [pc, #124]	; (8002120 <MX_GPIO_Init+0x128>)
 80020a2:	f003 fc75 	bl	8005990 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PWR_Fault3_Pin|PWR_Fault1_Pin|Fault_L1_Pin|Fault_H1_Pin;
 80020a6:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 80020aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	481a      	ldr	r0, [pc, #104]	; (8002124 <MX_GPIO_Init+0x12c>)
 80020bc:	f003 fab4 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = Fault_L3_Pin|Fault_H3_Pin|Fault_L4_2_Pin|Fault_H4_1_Pin
 80020c0:	f44f 635b 	mov.w	r3, #3504	; 0xdb0
 80020c4:	617b      	str	r3, [r7, #20]
                          |PWR_Fault2_Pin|Fault_L2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4814      	ldr	r0, [pc, #80]	; (8002128 <MX_GPIO_Init+0x130>)
 80020d6:	f003 faa7 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_Fault4_Pin|Fault_L4_Pin|Fault_H4_Pin|Fault_L5_Pin
 80020da:	f243 0337 	movw	r3, #12343	; 0x3037
 80020de:	617b      	str	r3, [r7, #20]
                          |Fault_H5_Pin|GLOBAL_SB_Pin|Fault_H2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4619      	mov	r1, r3
 80020ee:	480c      	ldr	r0, [pc, #48]	; (8002120 <MX_GPIO_Init+0x128>)
 80020f0:	f003 fa9a 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = EN_PWM_Pin|UART5_DIR_Pin|DO_1_Pin|DO_2_Pin
 80020f4:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
 80020f8:	617b      	str	r3, [r7, #20]
                          |LED_2_Pin|LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	4804      	ldr	r0, [pc, #16]	; (8002120 <MX_GPIO_Init+0x128>)
 800210e:	f003 fa8b 	bl	8005628 <HAL_GPIO_Init>

}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40020400 	.word	0x40020400
 8002124:	40020000 	.word	0x40020000
 8002128:	40020800 	.word	0x40020800

0800212c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002130:	f002 fa50 	bl	80045d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002134:	f000 f842 	bl	80021bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002138:	f7ff ff5e 	bl	8001ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 800213c:	f7ff ff42 	bl	8001fc4 <MX_DMA_Init>
  MX_TIM1_Init();
 8002140:	f001 fc4c 	bl	80039dc <MX_TIM1_Init>
  MX_TIM3_Init();
 8002144:	f001 fd60 	bl	8003c08 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002148:	f7ff fd66 	bl	8001c18 <MX_ADC1_Init>
  MX_ADC2_Init();
 800214c:	f7ff fdce 	bl	8001cec <MX_ADC2_Init>
  MX_TIM2_Init();
 8002150:	f001 fce4 	bl	8003b1c <MX_TIM2_Init>
  MX_TIM9_Init();
 8002154:	f001 fef8 	bl	8003f48 <MX_TIM9_Init>
  MX_TIM8_Init();
 8002158:	f001 fe56 	bl	8003e08 <MX_TIM8_Init>
  MX_TIM12_Init();
 800215c:	f001 ff56 	bl	800400c <MX_TIM12_Init>
  MX_ADC3_Init();
 8002160:	f7ff fe0e 	bl	8001d80 <MX_ADC3_Init>
  MX_UART5_Init();
 8002164:	f002 f972 	bl	800444c <MX_UART5_Init>
  MX_TIM4_Init();
 8002168:	f001 fdc4 	bl	8003cf4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	//Неблокирующий таймер выполнения основного кода
	TIM_NB_Init(&main_timer, 1, main_timer_function);
 800216c:	4a0f      	ldr	r2, [pc, #60]	; (80021ac <main+0x80>)
 800216e:	2101      	movs	r1, #1
 8002170:	480f      	ldr	r0, [pc, #60]	; (80021b0 <main+0x84>)
 8002172:	f000 fe7b 	bl	8002e6c <TIM_NB_Init>
	TIM_NB_Start(&main_timer, MULTIPLE_DELAY);
 8002176:	2102      	movs	r1, #2
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <main+0x84>)
 800217a:	f000 fe89 	bl	8002e90 <TIM_NB_Start>
	//Неблокирующий таймер для работы модбас
	TIM_NB_Init(&modbus_timer, 10, modbus_timer_function);
 800217e:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <main+0x88>)
 8002180:	210a      	movs	r1, #10
 8002182:	480d      	ldr	r0, [pc, #52]	; (80021b8 <main+0x8c>)
 8002184:	f000 fe72 	bl	8002e6c <TIM_NB_Init>
	TIM_NB_Start(&modbus_timer, MULTIPLE_DELAY);
 8002188:	2102      	movs	r1, #2
 800218a:	480b      	ldr	r0, [pc, #44]	; (80021b8 <main+0x8c>)
 800218c:	f000 fe80 	bl	8002e90 <TIM_NB_Start>

	//Modbus инициализация
	ModbusRTU_Init();
 8002190:	f7ff f86c 	bl	800126c <ModbusRTU_Init>

	//Задежка инициализации
	HAL_Delay(500);
 8002194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002198:	f002 fa8e 	bl	80046b8 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		TIM_NB_Check(&main_timer);
 800219c:	4804      	ldr	r0, [pc, #16]	; (80021b0 <main+0x84>)
 800219e:	f000 fe8d 	bl	8002ebc <TIM_NB_Check>
		TIM_NB_Check(&modbus_timer);
 80021a2:	4805      	ldr	r0, [pc, #20]	; (80021b8 <main+0x8c>)
 80021a4:	f000 fe8a 	bl	8002ebc <TIM_NB_Check>
		TIM_NB_Check(&main_timer);
 80021a8:	e7f8      	b.n	800219c <main+0x70>
 80021aa:	bf00      	nop
 80021ac:	080028f9 	.word	0x080028f9
 80021b0:	200003e4 	.word	0x200003e4
 80021b4:	08002e61 	.word	0x08002e61
 80021b8:	200003f4 	.word	0x200003f4

080021bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b094      	sub	sp, #80	; 0x50
 80021c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021c2:	f107 0320 	add.w	r3, r7, #32
 80021c6:	2230      	movs	r2, #48	; 0x30
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f006 fb98 	bl	8008900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	4b28      	ldr	r3, [pc, #160]	; (8002288 <SystemClock_Config+0xcc>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	4a27      	ldr	r2, [pc, #156]	; (8002288 <SystemClock_Config+0xcc>)
 80021ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ee:	6413      	str	r3, [r2, #64]	; 0x40
 80021f0:	4b25      	ldr	r3, [pc, #148]	; (8002288 <SystemClock_Config+0xcc>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fc:	2300      	movs	r3, #0
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <SystemClock_Config+0xd0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a21      	ldr	r2, [pc, #132]	; (800228c <SystemClock_Config+0xd0>)
 8002206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <SystemClock_Config+0xd0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002218:	2301      	movs	r3, #1
 800221a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800221c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002222:	2302      	movs	r3, #2
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800222a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800222c:	2304      	movs	r3, #4
 800222e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002230:	23a8      	movs	r3, #168	; 0xa8
 8002232:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002234:	2302      	movs	r3, #2
 8002236:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002238:	2304      	movs	r3, #4
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800223c:	f107 0320 	add.w	r3, r7, #32
 8002240:	4618      	mov	r0, r3
 8002242:	f003 fbbf 	bl	80059c4 <HAL_RCC_OscConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800224c:	f001 f854 	bl	80032f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002250:	230f      	movs	r3, #15
 8002252:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002254:	2302      	movs	r3, #2
 8002256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800225c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002260:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002262:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002266:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	2105      	movs	r1, #5
 800226e:	4618      	mov	r0, r3
 8002270:	f003 fe20 	bl	8005eb4 <HAL_RCC_ClockConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800227a:	f001 f83d 	bl	80032f8 <Error_Handler>
  }
}
 800227e:	bf00      	nop
 8002280:	3750      	adds	r7, #80	; 0x50
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	40007000 	.word	0x40007000

08002290 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

	if (htim == &htim8) {
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d109      	bne.n	80022b4 <HAL_TIM_PeriodElapsedCallback+0x24>

		//Регуляторы и рампы работают в прерывании таймера
		//потому что SysTick не обеспечивает малые постоянные времени
		if(State == Work){
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d105      	bne.n	80022b4 <HAL_TIM_PeriodElapsedCallback+0x24>
			//Ramp_Process(&Ramp_Freq);
			Ramp_Process(&Ramp_Amp);
 80022a8:	4806      	ldr	r0, [pc, #24]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80022aa:	f001 f864 	bl	8003376 <Ramp_Process>
			Regulator_Process(&Reg_U);
 80022ae:	4806      	ldr	r0, [pc, #24]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80022b0:	f001 f9a2 	bl	80035f8 <Regulator_Process>

		}

	}

}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200005e4 	.word	0x200005e4
 80022c0:	20000418 	.word	0x20000418
 80022c4:	2000044c 	.word	0x2000044c
 80022c8:	20000494 	.word	0x20000494

080022cc <SoftSw_PWM_Channels_OFF>:

void SoftSw_PWM_Channels_OFF(void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	//Функция для снятия Ш ?Ма на резонансные преобразователи

	TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2100      	movs	r1, #0
 80022d4:	4824      	ldr	r0, [pc, #144]	; (8002368 <SoftSw_PWM_Channels_OFF+0x9c>)
 80022d6:	f005 f984 	bl	80075e2 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022e2:	f005 f97e 	bl	80075e2 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	4820      	ldr	r0, [pc, #128]	; (800236c <SoftSw_PWM_Channels_OFF+0xa0>)
 80022ec:	f005 f979 	bl	80075e2 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM9, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	481e      	ldr	r0, [pc, #120]	; (8002370 <SoftSw_PWM_Channels_OFF+0xa4>)
 80022f6:	f005 f974 	bl	80075e2 <TIM_CCxChannelCmd>

	TIM1->BDTR &= ~(TIM_BDTR_MOE);
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <SoftSw_PWM_Channels_OFF+0x9c>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <SoftSw_PWM_Channels_OFF+0x9c>)
 8002300:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002304:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR &= ~(TIM_BDTR_OSSI);
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <SoftSw_PWM_Channels_OFF+0x9c>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a17      	ldr	r2, [pc, #92]	; (8002368 <SoftSw_PWM_Channels_OFF+0x9c>)
 800230c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
	TIM2->BDTR &= ~(TIM_BDTR_MOE);
 8002312:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800231c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
	TIM2->BDTR &= ~(TIM_BDTR_OSSI);
 8002322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800232c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
	TIM3->BDTR &= ~(TIM_BDTR_MOE);
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <SoftSw_PWM_Channels_OFF+0xa0>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	4a0d      	ldr	r2, [pc, #52]	; (800236c <SoftSw_PWM_Channels_OFF+0xa0>)
 8002338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
	TIM3->BDTR &= ~(TIM_BDTR_OSSI);
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <SoftSw_PWM_Channels_OFF+0xa0>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <SoftSw_PWM_Channels_OFF+0xa0>)
 8002344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
	TIM9->BDTR &= ~(TIM_BDTR_MOE);
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <SoftSw_PWM_Channels_OFF+0xa4>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <SoftSw_PWM_Channels_OFF+0xa4>)
 8002350:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
	TIM9->BDTR &= ~(TIM_BDTR_OSSI);
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <SoftSw_PWM_Channels_OFF+0xa4>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <SoftSw_PWM_Channels_OFF+0xa4>)
 800235c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002360:	6453      	str	r3, [r2, #68]	; 0x44

}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40010000 	.word	0x40010000
 800236c:	40000400 	.word	0x40000400
 8002370:	40014000 	.word	0x40014000

08002374 <SoftSw_PWM_Channels_ON>:

void SoftSw_PWM_Channels_ON(void) {
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	//Функция для выдачи ШиМа на резонансные преобразователи

	TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002378:	2201      	movs	r2, #1
 800237a:	2100      	movs	r1, #0
 800237c:	4817      	ldr	r0, [pc, #92]	; (80023dc <SoftSw_PWM_Channels_ON+0x68>)
 800237e:	f005 f930 	bl	80075e2 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM2, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002382:	2201      	movs	r2, #1
 8002384:	2100      	movs	r1, #0
 8002386:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800238a:	f005 f92a 	bl	80075e2 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM3, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800238e:	2201      	movs	r2, #1
 8002390:	2100      	movs	r1, #0
 8002392:	4813      	ldr	r0, [pc, #76]	; (80023e0 <SoftSw_PWM_Channels_ON+0x6c>)
 8002394:	f005 f925 	bl	80075e2 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM9, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002398:	2201      	movs	r2, #1
 800239a:	2100      	movs	r1, #0
 800239c:	4811      	ldr	r0, [pc, #68]	; (80023e4 <SoftSw_PWM_Channels_ON+0x70>)
 800239e:	f005 f920 	bl	80075e2 <TIM_CCxChannelCmd>

	TIM1->BDTR |= (TIM_BDTR_MOE);
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <SoftSw_PWM_Channels_ON+0x68>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <SoftSw_PWM_Channels_ON+0x68>)
 80023a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ac:	6453      	str	r3, [r2, #68]	; 0x44
	TIM2->BDTR |= (TIM_BDTR_MOE);
 80023ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
	TIM3->BDTR |= (TIM_BDTR_MOE);
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <SoftSw_PWM_Channels_ON+0x6c>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <SoftSw_PWM_Channels_ON+0x6c>)
 80023c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c8:	6453      	str	r3, [r2, #68]	; 0x44
	TIM9->BDTR |= (TIM_BDTR_MOE);
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <SoftSw_PWM_Channels_ON+0x70>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <SoftSw_PWM_Channels_ON+0x70>)
 80023d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d4:	6453      	str	r3, [r2, #68]	; 0x44

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40010000 	.word	0x40010000
 80023e0:	40000400 	.word	0x40000400
 80023e4:	40014000 	.word	0x40014000

080023e8 <SoftSw_PWM_Channels_UpdateDuty>:

void SoftSw_PWM_Channels_UpdateDuty(float New_Duty){
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	ed87 0a01 	vstr	s0, [r7, #4]

	uint32_t duty_tmp;

	if(New_Duty > 1){
 80023f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	dd02      	ble.n	800240a <SoftSw_PWM_Channels_UpdateDuty+0x22>
		New_Duty = 1;
 8002404:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002408:	607b      	str	r3, [r7, #4]
	}
	if(New_Duty < 0){
 800240a:	edd7 7a01 	vldr	s15, [r7, #4]
 800240e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002416:	d502      	bpl.n	800241e <SoftSw_PWM_Channels_UpdateDuty+0x36>
		New_Duty = 0;
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
	}

	duty_tmp = TIM1->ARR * New_Duty;
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <SoftSw_PWM_Channels_UpdateDuty+0x84>)
 8002420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800242a:	edd7 7a01 	vldr	s15, [r7, #4]
 800242e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002436:	ee17 3a90 	vmov	r3, s15
 800243a:	60fb      	str	r3, [r7, #12]

	if (TIM1->CCR1 != duty_tmp) {
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <SoftSw_PWM_Channels_UpdateDuty+0x84>)
 800243e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	429a      	cmp	r2, r3
 8002444:	d00c      	beq.n	8002460 <SoftSw_PWM_Channels_UpdateDuty+0x78>
		//common
		TIM1->CCR1 = duty_tmp;
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <SoftSw_PWM_Channels_UpdateDuty+0x84>)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR1 = duty_tmp;
 800244c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR1 = duty_tmp;
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <SoftSw_PWM_Channels_UpdateDuty+0x88>)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6353      	str	r3, [r2, #52]	; 0x34
		TIM9->CCR1 = duty_tmp;
 800245a:	4a06      	ldr	r2, [pc, #24]	; (8002474 <SoftSw_PWM_Channels_UpdateDuty+0x8c>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6353      	str	r3, [r2, #52]	; 0x34
	}

}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40010000 	.word	0x40010000
 8002470:	40000400 	.word	0x40000400
 8002474:	40014000 	.word	0x40014000

08002478 <SoftSw_PWM_Channels_UpdatePhase>:

void SoftSw_PWM_Channels_UpdatePhase(uint8_t Tim_Ch_num ,uint32_t New_Phase){
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]

	uint32_t phase_tmp;

	switch(Tim_Ch_num){
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d04c      	beq.n	8002524 <SoftSw_PWM_Channels_UpdatePhase+0xac>
 800248a:	2b0c      	cmp	r3, #12
 800248c:	dc6d      	bgt.n	800256a <SoftSw_PWM_Channels_UpdatePhase+0xf2>
 800248e:	2b04      	cmp	r3, #4
 8002490:	d002      	beq.n	8002498 <SoftSw_PWM_Channels_UpdatePhase+0x20>
 8002492:	2b08      	cmp	r3, #8
 8002494:	d023      	beq.n	80024de <SoftSw_PWM_Channels_UpdatePhase+0x66>
			TIM1->CCR4 = phase_tmp;
		}
		break;
	default:

		break;
 8002496:	e068      	b.n	800256a <SoftSw_PWM_Channels_UpdatePhase+0xf2>
		phase_tmp = TIM1->ARR - (uint32_t) ((((float) TIM1->ARR / 360)) * New_Phase) - ZERO_PHASE;
 8002498:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	4a39      	ldr	r2, [pc, #228]	; (8002584 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 800249e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024a0:	ee07 2a90 	vmov	s15, r2
 80024a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002588 <SoftSw_PWM_Channels_UpdatePhase+0x110>
 80024ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	ee07 2a90 	vmov	s15, r2
 80024b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c2:	ee17 2a90 	vmov	r2, s15
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	3b14      	subs	r3, #20
 80024ca:	60fb      	str	r3, [r7, #12]
		if(TIM1->CCR2 != phase_tmp){
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d04b      	beq.n	800256e <SoftSw_PWM_Channels_UpdatePhase+0xf6>
			TIM1->CCR2 = phase_tmp;
 80024d6:	4a2b      	ldr	r2, [pc, #172]	; (8002584 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80024dc:	e047      	b.n	800256e <SoftSw_PWM_Channels_UpdatePhase+0xf6>
		phase_tmp = TIM1->ARR - (uint32_t) ((((float) TIM1->ARR / 360)) * New_Phase) - ZERO_PHASE;
 80024de:	4b29      	ldr	r3, [pc, #164]	; (8002584 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	4a28      	ldr	r2, [pc, #160]	; (8002584 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 80024e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024e6:	ee07 2a90 	vmov	s15, r2
 80024ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002588 <SoftSw_PWM_Channels_UpdatePhase+0x110>
 80024f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	ee07 2a90 	vmov	s15, r2
 80024fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002508:	ee17 2a90 	vmov	r2, s15
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	3b14      	subs	r3, #20
 8002510:	60fb      	str	r3, [r7, #12]
		if(TIM1->CCR3 != phase_tmp){
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d02a      	beq.n	8002572 <SoftSw_PWM_Channels_UpdatePhase+0xfa>
			TIM1->CCR3 = phase_tmp;
 800251c:	4a19      	ldr	r2, [pc, #100]	; (8002584 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8002522:	e026      	b.n	8002572 <SoftSw_PWM_Channels_UpdatePhase+0xfa>
		phase_tmp = TIM1->ARR - (uint32_t) ((((float) TIM1->ARR / 360)) * New_Phase) - ZERO_PHASE;
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	4a16      	ldr	r2, [pc, #88]	; (8002584 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 800252a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800252c:	ee07 2a90 	vmov	s15, r2
 8002530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002534:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002588 <SoftSw_PWM_Channels_UpdatePhase+0x110>
 8002538:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	ee07 2a90 	vmov	s15, r2
 8002542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800254e:	ee17 2a90 	vmov	r2, s15
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	3b14      	subs	r3, #20
 8002556:	60fb      	str	r3, [r7, #12]
		if(TIM1->CCR4 != phase_tmp){
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	429a      	cmp	r2, r3
 8002560:	d009      	beq.n	8002576 <SoftSw_PWM_Channels_UpdatePhase+0xfe>
			TIM1->CCR4 = phase_tmp;
 8002562:	4a08      	ldr	r2, [pc, #32]	; (8002584 <SoftSw_PWM_Channels_UpdatePhase+0x10c>)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002568:	e005      	b.n	8002576 <SoftSw_PWM_Channels_UpdatePhase+0xfe>
		break;
 800256a:	bf00      	nop
 800256c:	e004      	b.n	8002578 <SoftSw_PWM_Channels_UpdatePhase+0x100>
		break;
 800256e:	bf00      	nop
 8002570:	e002      	b.n	8002578 <SoftSw_PWM_Channels_UpdatePhase+0x100>
		break;
 8002572:	bf00      	nop
 8002574:	e000      	b.n	8002578 <SoftSw_PWM_Channels_UpdatePhase+0x100>
		break;
 8002576:	bf00      	nop
	}

}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40010000 	.word	0x40010000
 8002588:	43b40000 	.word	0x43b40000

0800258c <SoftSw_PWM_Channels_UpdateFreq>:

void SoftSw_PWM_Channels_UpdateFreq(uint32_t New_Freq){
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

	uint32_t freq_tmp;

	//Ограничение макс частоты
	if (New_Freq > SOFTSW_MAX_FREQ) {
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f244 6250 	movw	r2, #18000	; 0x4650
 800259a:	4293      	cmp	r3, r2
 800259c:	d902      	bls.n	80025a4 <SoftSw_PWM_Channels_UpdateFreq+0x18>
		New_Freq = SOFTSW_MAX_FREQ;
 800259e:	f244 6350 	movw	r3, #18000	; 0x4650
 80025a2:	607b      	str	r3, [r7, #4]
	}
	//Ограничение мин частоты
	if (New_Freq < SOFTSW_MIN_FREQ) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f642 22f7 	movw	r2, #10999	; 0x2af7
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d802      	bhi.n	80025b4 <SoftSw_PWM_Channels_UpdateFreq+0x28>
		New_Freq = SOFTSW_MIN_FREQ;
 80025ae:	f642 23f8 	movw	r3, #11000	; 0x2af8
 80025b2:	607b      	str	r3, [r7, #4]
	}

	freq_tmp = TIMER_CLK_FREQ / New_Freq;
 80025b4:	4a27      	ldr	r2, [pc, #156]	; (8002654 <SoftSw_PWM_Channels_UpdateFreq+0xc8>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	60fb      	str	r3, [r7, #12]

	if(TIM1->ARR != freq_tmp){
 80025be:	4b26      	ldr	r3, [pc, #152]	; (8002658 <SoftSw_PWM_Channels_UpdateFreq+0xcc>)
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d03f      	beq.n	8002648 <SoftSw_PWM_Channels_UpdateFreq+0xbc>
		TIM1->ARR = freq_tmp;
 80025c8:	4a23      	ldr	r2, [pc, #140]	; (8002658 <SoftSw_PWM_Channels_UpdateFreq+0xcc>)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM2->ARR = freq_tmp;
 80025ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->ARR = freq_tmp;
 80025d6:	4a21      	ldr	r2, [pc, #132]	; (800265c <SoftSw_PWM_Channels_UpdateFreq+0xd0>)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM9->ARR = freq_tmp;
 80025dc:	4a20      	ldr	r2, [pc, #128]	; (8002660 <SoftSw_PWM_Channels_UpdateFreq+0xd4>)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	62d3      	str	r3, [r2, #44]	; 0x2c
		//АЦП!
		TIM4->ARR = freq_tmp;
 80025e2:	4a20      	ldr	r2, [pc, #128]	; (8002664 <SoftSw_PWM_Channels_UpdateFreq+0xd8>)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	62d3      	str	r3, [r2, #44]	; 0x2c


		if(TIM1->CNT >= TIM1->ARR){
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <SoftSw_PWM_Channels_UpdateFreq+0xcc>)
 80025ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <SoftSw_PWM_Channels_UpdateFreq+0xcc>)
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d302      	bcc.n	80025fa <SoftSw_PWM_Channels_UpdateFreq+0x6e>
			TIM1->CNT = 0;
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <SoftSw_PWM_Channels_UpdateFreq+0xcc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM2->CNT >= TIM2->ARR){
 80025fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	429a      	cmp	r2, r3
 8002608:	d303      	bcc.n	8002612 <SoftSw_PWM_Channels_UpdateFreq+0x86>
			TIM2->CNT = 0;
 800260a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800260e:	2200      	movs	r2, #0
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM3->CNT >= TIM3->ARR){
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <SoftSw_PWM_Channels_UpdateFreq+0xd0>)
 8002614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <SoftSw_PWM_Channels_UpdateFreq+0xd0>)
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <SoftSw_PWM_Channels_UpdateFreq+0x98>
			TIM3->CNT = 0;
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <SoftSw_PWM_Channels_UpdateFreq+0xd0>)
 8002620:	2200      	movs	r2, #0
 8002622:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM9->CNT >= TIM9->ARR){
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <SoftSw_PWM_Channels_UpdateFreq+0xd4>)
 8002626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <SoftSw_PWM_Channels_UpdateFreq+0xd4>)
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	429a      	cmp	r2, r3
 800262e:	d302      	bcc.n	8002636 <SoftSw_PWM_Channels_UpdateFreq+0xaa>
			TIM9->CNT = 0;
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <SoftSw_PWM_Channels_UpdateFreq+0xd4>)
 8002632:	2200      	movs	r2, #0
 8002634:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM4->CNT >= TIM4->ARR){
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <SoftSw_PWM_Channels_UpdateFreq+0xd8>)
 8002638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <SoftSw_PWM_Channels_UpdateFreq+0xd8>)
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	429a      	cmp	r2, r3
 8002640:	d302      	bcc.n	8002648 <SoftSw_PWM_Channels_UpdateFreq+0xbc>
			TIM4->CNT = 0;
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <SoftSw_PWM_Channels_UpdateFreq+0xd8>)
 8002644:	2200      	movs	r2, #0
 8002646:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	01406f40 	.word	0x01406f40
 8002658:	40010000 	.word	0x40010000
 800265c:	40000400 	.word	0x40000400
 8002660:	40014000 	.word	0x40014000
 8002664:	40000800 	.word	0x40000800

08002668 <HardSw_PWM_Channels_ON>:

void HardSw_PWM_Channels_ON(void) {
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
	//Эта функция нужна для усправления выдачей импульсов 8 таймера

	TIM_CCxChannelCmd(TIM8, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800266c:	2201      	movs	r2, #1
 800266e:	2100      	movs	r1, #0
 8002670:	4805      	ldr	r0, [pc, #20]	; (8002688 <HardSw_PWM_Channels_ON+0x20>)
 8002672:	f004 ffb6 	bl	80075e2 <TIM_CCxChannelCmd>
	//TIM_CCxChannelCmd(TIM12, TIM_CHANNEL_1, TIM_CCx_ENABLE);

	TIM8->BDTR |= (TIM_BDTR_MOE);
 8002676:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HardSw_PWM_Channels_ON+0x20>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a03      	ldr	r2, [pc, #12]	; (8002688 <HardSw_PWM_Channels_ON+0x20>)
 800267c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
	//TIM12->BDTR |= (TIM_BDTR_MOE);

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40010400 	.word	0x40010400

0800268c <HardSw_PWM_Channels_OFF>:
void HardSw_PWM_Channels_OFF(void) {
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	//Эта функция нужна для усправления выдачей импульсов 8 таймера

	TIM_CCxChannelCmd(TIM8, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8002690:	2200      	movs	r2, #0
 8002692:	2100      	movs	r1, #0
 8002694:	4810      	ldr	r0, [pc, #64]	; (80026d8 <HardSw_PWM_Channels_OFF+0x4c>)
 8002696:	f004 ffa4 	bl	80075e2 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(TIM12, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	480f      	ldr	r0, [pc, #60]	; (80026dc <HardSw_PWM_Channels_OFF+0x50>)
 80026a0:	f004 ff9f 	bl	80075e2 <TIM_CCxChannelCmd>

	TIM8->BDTR &= ~(TIM_BDTR_MOE);
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <HardSw_PWM_Channels_OFF+0x4c>)
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <HardSw_PWM_Channels_OFF+0x4c>)
 80026aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026ae:	6453      	str	r3, [r2, #68]	; 0x44
	TIM8->BDTR &= ~(TIM_BDTR_OSSI);
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HardSw_PWM_Channels_OFF+0x4c>)
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <HardSw_PWM_Channels_OFF+0x4c>)
 80026b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026ba:	6453      	str	r3, [r2, #68]	; 0x44
	TIM12->BDTR &= ~(TIM_BDTR_MOE);
 80026bc:	4b07      	ldr	r3, [pc, #28]	; (80026dc <HardSw_PWM_Channels_OFF+0x50>)
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	4a06      	ldr	r2, [pc, #24]	; (80026dc <HardSw_PWM_Channels_OFF+0x50>)
 80026c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026c6:	6453      	str	r3, [r2, #68]	; 0x44
	TIM12->BDTR &= ~(TIM_BDTR_OSSI);
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <HardSw_PWM_Channels_OFF+0x50>)
 80026ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026cc:	4a03      	ldr	r2, [pc, #12]	; (80026dc <HardSw_PWM_Channels_OFF+0x50>)
 80026ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026d2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40010400 	.word	0x40010400
 80026dc:	40001800 	.word	0x40001800

080026e0 <HardSw_PWM_Channels_UpdateDuty>:

void HardSw_PWM_Channels_UpdateDuty(float New_Duty){
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	ed87 0a01 	vstr	s0, [r7, #4]

	uint32_t duty_tmp;

	if(New_Duty > 1){
 80026ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fa:	dd02      	ble.n	8002702 <HardSw_PWM_Channels_UpdateDuty+0x22>
		New_Duty = 1;
 80026fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002700:	607b      	str	r3, [r7, #4]
	}
	if(New_Duty < 0){
 8002702:	edd7 7a01 	vldr	s15, [r7, #4]
 8002706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	d502      	bpl.n	8002716 <HardSw_PWM_Channels_UpdateDuty+0x36>
		New_Duty = 0;
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
	}

	duty_tmp = TIM8->ARR * New_Duty;
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HardSw_PWM_Channels_UpdateDuty+0x78>)
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002722:	edd7 7a01 	vldr	s15, [r7, #4]
 8002726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800272e:	ee17 3a90 	vmov	r3, s15
 8002732:	60fb      	str	r3, [r7, #12]

	if (TIM8->CCR1 != duty_tmp) {
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HardSw_PWM_Channels_UpdateDuty+0x78>)
 8002736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	429a      	cmp	r2, r3
 800273c:	d005      	beq.n	800274a <HardSw_PWM_Channels_UpdateDuty+0x6a>
		//common
		TIM8->CCR1 = duty_tmp;
 800273e:	4a06      	ldr	r2, [pc, #24]	; (8002758 <HardSw_PWM_Channels_UpdateDuty+0x78>)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6353      	str	r3, [r2, #52]	; 0x34
		TIM12->CCR1 = duty_tmp;
 8002744:	4a05      	ldr	r2, [pc, #20]	; (800275c <HardSw_PWM_Channels_UpdateDuty+0x7c>)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6353      	str	r3, [r2, #52]	; 0x34
	}

}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40010400 	.word	0x40010400
 800275c:	40001800 	.word	0x40001800

08002760 <HardSw_PWM_Channels_UpdatePhase>:

void HardSw_PWM_Channels_UpdatePhase(uint8_t Tim_Ch_num ,uint32_t New_Phase){
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]

	uint32_t phase_tmp;

	switch(Tim_Ch_num){
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d04c      	beq.n	800280c <HardSw_PWM_Channels_UpdatePhase+0xac>
 8002772:	2b0c      	cmp	r3, #12
 8002774:	dc6d      	bgt.n	8002852 <HardSw_PWM_Channels_UpdatePhase+0xf2>
 8002776:	2b04      	cmp	r3, #4
 8002778:	d002      	beq.n	8002780 <HardSw_PWM_Channels_UpdatePhase+0x20>
 800277a:	2b08      	cmp	r3, #8
 800277c:	d023      	beq.n	80027c6 <HardSw_PWM_Channels_UpdatePhase+0x66>
			TIM8->CCR4 = phase_tmp;
		}
		break;
	default:

		break;
 800277e:	e068      	b.n	8002852 <HardSw_PWM_Channels_UpdatePhase+0xf2>
		phase_tmp = TIM8->ARR - (uint32_t) ((((float) TIM8->ARR / 360)) * New_Phase) - ZERO_PHASE;
 8002780:	4b3a      	ldr	r3, [pc, #232]	; (800286c <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	4a39      	ldr	r2, [pc, #228]	; (800286c <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 8002786:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002788:	ee07 2a90 	vmov	s15, r2
 800278c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002790:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002870 <HardSw_PWM_Channels_UpdatePhase+0x110>
 8002794:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	ee07 2a90 	vmov	s15, r2
 800279e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027aa:	ee17 2a90 	vmov	r2, s15
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	3b14      	subs	r3, #20
 80027b2:	60fb      	str	r3, [r7, #12]
		if(TIM8->CCR2 != phase_tmp){
 80027b4:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 80027b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d04b      	beq.n	8002856 <HardSw_PWM_Channels_UpdatePhase+0xf6>
			TIM8->CCR2 = phase_tmp;
 80027be:	4a2b      	ldr	r2, [pc, #172]	; (800286c <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80027c4:	e047      	b.n	8002856 <HardSw_PWM_Channels_UpdatePhase+0xf6>
		phase_tmp = TIM8->ARR - (uint32_t) ((((float) TIM8->ARR / 360)) * New_Phase) - ZERO_PHASE;
 80027c6:	4b29      	ldr	r3, [pc, #164]	; (800286c <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	4a28      	ldr	r2, [pc, #160]	; (800286c <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 80027cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027ce:	ee07 2a90 	vmov	s15, r2
 80027d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002870 <HardSw_PWM_Channels_UpdatePhase+0x110>
 80027da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	ee07 2a90 	vmov	s15, r2
 80027e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f0:	ee17 2a90 	vmov	r2, s15
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	3b14      	subs	r3, #20
 80027f8:	60fb      	str	r3, [r7, #12]
		if(TIM8->CCR3 != phase_tmp){
 80027fa:	4b1c      	ldr	r3, [pc, #112]	; (800286c <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d02a      	beq.n	800285a <HardSw_PWM_Channels_UpdatePhase+0xfa>
			TIM8->CCR3 = phase_tmp;
 8002804:	4a19      	ldr	r2, [pc, #100]	; (800286c <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800280a:	e026      	b.n	800285a <HardSw_PWM_Channels_UpdatePhase+0xfa>
		phase_tmp = TIM8->ARR - (uint32_t) ((((float) TIM8->ARR / 360)) * New_Phase) - ZERO_PHASE;
 800280c:	4b17      	ldr	r3, [pc, #92]	; (800286c <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	4a16      	ldr	r2, [pc, #88]	; (800286c <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 8002812:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002814:	ee07 2a90 	vmov	s15, r2
 8002818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002870 <HardSw_PWM_Channels_UpdatePhase+0x110>
 8002820:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	ee07 2a90 	vmov	s15, r2
 800282a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002836:	ee17 2a90 	vmov	r2, s15
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	3b14      	subs	r3, #20
 800283e:	60fb      	str	r3, [r7, #12]
		if(TIM8->CCR4 != phase_tmp){
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	429a      	cmp	r2, r3
 8002848:	d009      	beq.n	800285e <HardSw_PWM_Channels_UpdatePhase+0xfe>
			TIM8->CCR4 = phase_tmp;
 800284a:	4a08      	ldr	r2, [pc, #32]	; (800286c <HardSw_PWM_Channels_UpdatePhase+0x10c>)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002850:	e005      	b.n	800285e <HardSw_PWM_Channels_UpdatePhase+0xfe>
		break;
 8002852:	bf00      	nop
 8002854:	e004      	b.n	8002860 <HardSw_PWM_Channels_UpdatePhase+0x100>
		break;
 8002856:	bf00      	nop
 8002858:	e002      	b.n	8002860 <HardSw_PWM_Channels_UpdatePhase+0x100>
		break;
 800285a:	bf00      	nop
 800285c:	e000      	b.n	8002860 <HardSw_PWM_Channels_UpdatePhase+0x100>
		break;
 800285e:	bf00      	nop
	}

}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40010400 	.word	0x40010400
 8002870:	43b40000 	.word	0x43b40000

08002874 <HardSw_PWM_Channels_UpdateFreq>:

void HardSw_PWM_Channels_UpdateFreq(uint32_t New_Freq){
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

	uint32_t freq_tmp;

	//Ограничение макс частоты
	if (New_Freq > HARDSW_MAX_FREQ) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f244 6250 	movw	r2, #18000	; 0x4650
 8002882:	4293      	cmp	r3, r2
 8002884:	d902      	bls.n	800288c <HardSw_PWM_Channels_UpdateFreq+0x18>
		New_Freq = HARDSW_MAX_FREQ;
 8002886:	f244 6350 	movw	r3, #18000	; 0x4650
 800288a:	607b      	str	r3, [r7, #4]
	}
	//Ограничение мин частоты
	if (New_Freq < HARDSW_MIN_FREQ) {
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f243 62af 	movw	r2, #13999	; 0x36af
 8002892:	4293      	cmp	r3, r2
 8002894:	d802      	bhi.n	800289c <HardSw_PWM_Channels_UpdateFreq+0x28>
		New_Freq = HARDSW_MIN_FREQ;
 8002896:	f243 63b0 	movw	r3, #14000	; 0x36b0
 800289a:	607b      	str	r3, [r7, #4]
	}

	freq_tmp = TIMER_CLK_FREQ / New_Freq;
 800289c:	4a13      	ldr	r2, [pc, #76]	; (80028ec <HardSw_PWM_Channels_UpdateFreq+0x78>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	60fb      	str	r3, [r7, #12]

	if(TIM8->ARR != freq_tmp){
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HardSw_PWM_Channels_UpdateFreq+0x7c>)
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d017      	beq.n	80028e0 <HardSw_PWM_Channels_UpdateFreq+0x6c>
		TIM8->ARR = freq_tmp;
 80028b0:	4a0f      	ldr	r2, [pc, #60]	; (80028f0 <HardSw_PWM_Channels_UpdateFreq+0x7c>)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM12->ARR = freq_tmp;
 80028b6:	4a0f      	ldr	r2, [pc, #60]	; (80028f4 <HardSw_PWM_Channels_UpdateFreq+0x80>)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	62d3      	str	r3, [r2, #44]	; 0x2c

		if(TIM8->CNT >= TIM8->ARR){
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <HardSw_PWM_Channels_UpdateFreq+0x7c>)
 80028be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HardSw_PWM_Channels_UpdateFreq+0x7c>)
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d302      	bcc.n	80028ce <HardSw_PWM_Channels_UpdateFreq+0x5a>
			TIM8->CNT = 0;
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HardSw_PWM_Channels_UpdateFreq+0x7c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(TIM12->CNT >= TIM12->ARR){
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HardSw_PWM_Channels_UpdateFreq+0x80>)
 80028d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HardSw_PWM_Channels_UpdateFreq+0x80>)
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d302      	bcc.n	80028e0 <HardSw_PWM_Channels_UpdateFreq+0x6c>
			TIM12->CNT = 0;
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HardSw_PWM_Channels_UpdateFreq+0x80>)
 80028dc:	2200      	movs	r2, #0
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	01406f40 	.word	0x01406f40
 80028f0:	40010400 	.word	0x40010400
 80028f4:	40001800 	.word	0x40001800

080028f8 <main_timer_function>:

void main_timer_function() {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af02      	add	r7, sp, #8

	//Основная функция, где крутится вся логика

	//расчет среднего значения датчиков
	//для фильтрации
	MEAN_Signal(&U_mean, &U_Value, &U_mean_sum, U_mean_buf, MEAN_BUF_SIZE);
 80028fe:	2332      	movs	r3, #50	; 0x32
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4ba7      	ldr	r3, [pc, #668]	; (8002ba0 <main_timer_function+0x2a8>)
 8002904:	4aa7      	ldr	r2, [pc, #668]	; (8002ba4 <main_timer_function+0x2ac>)
 8002906:	49a8      	ldr	r1, [pc, #672]	; (8002ba8 <main_timer_function+0x2b0>)
 8002908:	48a8      	ldr	r0, [pc, #672]	; (8002bac <main_timer_function+0x2b4>)
 800290a:	f7fe fc61 	bl	80011d0 <MEAN_Signal>
	MEAN_Signal(&I_mean, &I_Value, &I_mean_sum, I_mean_buf, MEAN_BUF_SIZE);
 800290e:	2332      	movs	r3, #50	; 0x32
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	4ba7      	ldr	r3, [pc, #668]	; (8002bb0 <main_timer_function+0x2b8>)
 8002914:	4aa7      	ldr	r2, [pc, #668]	; (8002bb4 <main_timer_function+0x2bc>)
 8002916:	49a8      	ldr	r1, [pc, #672]	; (8002bb8 <main_timer_function+0x2c0>)
 8002918:	48a8      	ldr	r0, [pc, #672]	; (8002bbc <main_timer_function+0x2c4>)
 800291a:	f7fe fc59 	bl	80011d0 <MEAN_Signal>

	//функции считывания входов и выдачи сигналов на выходы
	HW_Driver_DI_AI_Read();
 800291e:	f7fe fabb 	bl	8000e98 <HW_Driver_DI_AI_Read>
	HW_Driver_DO_PWM_Out();
 8002922:	f7fe fc29 	bl	8001178 <HW_Driver_DO_PWM_Out>

	//Светодиодная индикация состояния
	Device_Indication_Process();
 8002926:	f000 fb6b 	bl	8003000 <Device_Indication_Process>
	//Проверка ошибок
	if(CHECK_ERROR_EN){
		Device_Check_Error();
	}

	if(Device_Error > 0){
 800292a:	4ba5      	ldr	r3, [pc, #660]	; (8002bc0 <main_timer_function+0x2c8>)
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <main_timer_function+0x40>
		State = Stop;
 8002932:	4ba4      	ldr	r3, [pc, #656]	; (8002bc4 <main_timer_function+0x2cc>)
 8002934:	2205      	movs	r2, #5
 8002936:	601a      	str	r2, [r3, #0]
	}

	//По этому флагу разрешается работа доп стойки для жесткой коммутациии
	EN_OS_State = 1; // СМ�?РНОВ СКАЗАЛ ТАК НАДО!!!!
 8002938:	4ba3      	ldr	r3, [pc, #652]	; (8002bc8 <main_timer_function+0x2d0>)
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
	if(EN_OS_State){
 800293e:	4ba2      	ldr	r3, [pc, #648]	; (8002bc8 <main_timer_function+0x2d0>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <main_timer_function+0x56>
		autocomp_enable = 1;
 8002946:	4ba1      	ldr	r3, [pc, #644]	; (8002bcc <main_timer_function+0x2d4>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e002      	b.n	8002954 <main_timer_function+0x5c>
	} else {
		autocomp_enable = 0;
 800294e:	4b9f      	ldr	r3, [pc, #636]	; (8002bcc <main_timer_function+0x2d4>)
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
	}

	//Основная стейт машина
	switch (State) {
 8002954:	4b9b      	ldr	r3, [pc, #620]	; (8002bc4 <main_timer_function+0x2cc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b06      	cmp	r3, #6
 800295a:	f200 824c 	bhi.w	8002df6 <main_timer_function+0x4fe>
 800295e:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <main_timer_function+0x6c>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002981 	.word	0x08002981
 8002968:	08002aa1 	.word	0x08002aa1
 800296c:	08002ad1 	.word	0x08002ad1
 8002970:	08002b55 	.word	0x08002b55
 8002974:	08002c3d 	.word	0x08002c3d
 8002978:	08002d1f 	.word	0x08002d1f
 800297c:	08002da5 	.word	0x08002da5

	case Init:

		//не имеет смысла
		if(State != Old_State){
 8002980:	4b90      	ldr	r3, [pc, #576]	; (8002bc4 <main_timer_function+0x2cc>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b92      	ldr	r3, [pc, #584]	; (8002bd0 <main_timer_function+0x2d8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d008      	beq.n	800299e <main_timer_function+0xa6>
			time_tmp = millis();
 800298c:	f000 fac6 	bl	8002f1c <millis>
 8002990:	4603      	mov	r3, r0
 8002992:	4a90      	ldr	r2, [pc, #576]	; (8002bd4 <main_timer_function+0x2dc>)
 8002994:	6013      	str	r3, [r2, #0]
			Old_State = State;
 8002996:	4b8b      	ldr	r3, [pc, #556]	; (8002bc4 <main_timer_function+0x2cc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a8d      	ldr	r2, [pc, #564]	; (8002bd0 <main_timer_function+0x2d8>)
 800299c:	6013      	str	r3, [r2, #0]
		}

		Button_1.State = &But_1_State;
 800299e:	4b8e      	ldr	r3, [pc, #568]	; (8002bd8 <main_timer_function+0x2e0>)
 80029a0:	4a8e      	ldr	r2, [pc, #568]	; (8002bdc <main_timer_function+0x2e4>)
 80029a2:	601a      	str	r2, [r3, #0]
		Button_1.delay = SB1_T_DELAY;
 80029a4:	4b8c      	ldr	r3, [pc, #560]	; (8002bd8 <main_timer_function+0x2e0>)
 80029a6:	22c8      	movs	r2, #200	; 0xc8
 80029a8:	60da      	str	r2, [r3, #12]
		Button_1.Old_State = OFF;
 80029aa:	4b8b      	ldr	r3, [pc, #556]	; (8002bd8 <main_timer_function+0x2e0>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	711a      	strb	r2, [r3, #4]
		Button_1.cnt = 0;
 80029b0:	4b89      	ldr	r3, [pc, #548]	; (8002bd8 <main_timer_function+0x2e0>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]

		PC_Button.State = &PC_Start_flag;
 80029b6:	4b8a      	ldr	r3, [pc, #552]	; (8002be0 <main_timer_function+0x2e8>)
 80029b8:	4a8a      	ldr	r2, [pc, #552]	; (8002be4 <main_timer_function+0x2ec>)
 80029ba:	601a      	str	r2, [r3, #0]
		PC_Button.delay = 100;
 80029bc:	4b88      	ldr	r3, [pc, #544]	; (8002be0 <main_timer_function+0x2e8>)
 80029be:	2264      	movs	r2, #100	; 0x64
 80029c0:	60da      	str	r2, [r3, #12]
		PC_Button.Old_State = OFF;
 80029c2:	4b87      	ldr	r3, [pc, #540]	; (8002be0 <main_timer_function+0x2e8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	711a      	strb	r2, [r3, #4]
		PC_Button.cnt = 0;
 80029c8:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <main_timer_function+0x2e8>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]

		init_err = Periph_Init();
 80029ce:	f7fe f997 	bl	8000d00 <Periph_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b84      	ldr	r3, [pc, #528]	; (8002be8 <main_timer_function+0x2f0>)
 80029d8:	701a      	strb	r2, [r3, #0]

		// инициализация рамп и регуляторов
		//Работают сейчас
		Ramp_Init(&Ramp_Amp, &zad_u, HV_MAX_VOLT, 0, 10, 1);
 80029da:	2201      	movs	r2, #1
 80029dc:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80029e0:	eddf 0a82 	vldr	s1, [pc, #520]	; 8002bec <main_timer_function+0x2f4>
 80029e4:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8002bf0 <main_timer_function+0x2f8>
 80029e8:	4982      	ldr	r1, [pc, #520]	; (8002bf4 <main_timer_function+0x2fc>)
 80029ea:	4883      	ldr	r0, [pc, #524]	; (8002bf8 <main_timer_function+0x300>)
 80029ec:	f000 fc89 	bl	8003302 <Ramp_Init>
		Regulator_Init(&Reg_U, &Ramp_Amp.Out, &calc_os_u, 0.0005, 0.005, 0.8, 0, 0.8, 0);
 80029f0:	eddf 2a7e 	vldr	s5, [pc, #504]	; 8002bec <main_timer_function+0x2f4>
 80029f4:	ed9f 2a81 	vldr	s4, [pc, #516]	; 8002bfc <main_timer_function+0x304>
 80029f8:	eddf 1a7c 	vldr	s3, [pc, #496]	; 8002bec <main_timer_function+0x2f4>
 80029fc:	ed9f 1a7f 	vldr	s2, [pc, #508]	; 8002bfc <main_timer_function+0x304>
 8002a00:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8002c00 <main_timer_function+0x308>
 8002a04:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8002c04 <main_timer_function+0x30c>
 8002a08:	4a7f      	ldr	r2, [pc, #508]	; (8002c08 <main_timer_function+0x310>)
 8002a0a:	4980      	ldr	r1, [pc, #512]	; (8002c0c <main_timer_function+0x314>)
 8002a0c:	4880      	ldr	r0, [pc, #512]	; (8002c10 <main_timer_function+0x318>)
 8002a0e:	f000 fd98 	bl	8003542 <Regulator_Init>
		// Regulator_Init(&Reg_U, &Ramp_Amp.Out, &U_Instant, 0.0005, 0.005, 0.8, 0, 0.8, 0);
        // Regulator_Init(&Reg_U, &zad_u, &U_Instant, 0.0005, 0.005, 0.8, 0, 0.8, 0); // ТЕСТ
		//Не работают
		Ramp_Init(&Ramp_Freq, &zad_freq, PFM_MAX_FREQ, PFM_MIN_FREQ, 40, 1);
 8002a12:	2201      	movs	r2, #1
 8002a14:	ed9f 1a7f 	vldr	s2, [pc, #508]	; 8002c14 <main_timer_function+0x31c>
 8002a18:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8002c18 <main_timer_function+0x320>
 8002a1c:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8002c1c <main_timer_function+0x324>
 8002a20:	497f      	ldr	r1, [pc, #508]	; (8002c20 <main_timer_function+0x328>)
 8002a22:	4880      	ldr	r0, [pc, #512]	; (8002c24 <main_timer_function+0x32c>)
 8002a24:	f000 fc6d 	bl	8003302 <Ramp_Init>
		Ramp_Init(&Ramp_Phase, &zad_phase, PFM_MAX_PHASE, PFM_MIN_PHASE, 1, 100);
 8002a28:	2264      	movs	r2, #100	; 0x64
 8002a2a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002a2e:	eddf 0a6f 	vldr	s1, [pc, #444]	; 8002bec <main_timer_function+0x2f4>
 8002a32:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8002c28 <main_timer_function+0x330>
 8002a36:	497d      	ldr	r1, [pc, #500]	; (8002c2c <main_timer_function+0x334>)
 8002a38:	487d      	ldr	r0, [pc, #500]	; (8002c30 <main_timer_function+0x338>)
 8002a3a:	f000 fc62 	bl	8003302 <Ramp_Init>

		//Конфигурируем регистры таймеров на работу с нужной частотой
		SoftSw_PWM_Channels_UpdateFreq(SOFTSW_FREQ);
 8002a3e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8002a42:	f7ff fda3 	bl	800258c <SoftSw_PWM_Channels_UpdateFreq>
		SoftSw_PWM_Channels_UpdatePhase(TIM_CHANNEL_2, SOFTSW_CH2_PHASE);
 8002a46:	21b4      	movs	r1, #180	; 0xb4
 8002a48:	2004      	movs	r0, #4
 8002a4a:	f7ff fd15 	bl	8002478 <SoftSw_PWM_Channels_UpdatePhase>
		SoftSw_PWM_Channels_UpdatePhase(TIM_CHANNEL_3, SOFTSW_CH3_PHASE);
 8002a4e:	215a      	movs	r1, #90	; 0x5a
 8002a50:	2008      	movs	r0, #8
 8002a52:	f7ff fd11 	bl	8002478 <SoftSw_PWM_Channels_UpdatePhase>
		SoftSw_PWM_Channels_UpdatePhase(TIM_CHANNEL_4, SOFTSW_CH4_PHASE);
 8002a56:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002a5a:	200c      	movs	r0, #12
 8002a5c:	f7ff fd0c 	bl	8002478 <SoftSw_PWM_Channels_UpdatePhase>
		SoftSw_PWM_Channels_UpdateDuty(0);
 8002a60:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8002bec <main_timer_function+0x2f4>
 8002a64:	f7ff fcc0 	bl	80023e8 <SoftSw_PWM_Channels_UpdateDuty>
		SoftSw_PWM_Channels_OFF();
 8002a68:	f7ff fc30 	bl	80022cc <SoftSw_PWM_Channels_OFF>

		//Мне удобно так его проконфигурировать и потом выключить шим
		HardSw_PWM_Channels_UpdateFreq(HARDSW_FREQ);
 8002a6c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8002a70:	f7ff ff00 	bl	8002874 <HardSw_PWM_Channels_UpdateFreq>
		HardSw_PWM_Channels_UpdatePhase(TIM_CHANNEL_2, HARDSW_CH2_PHASE);
 8002a74:	21b4      	movs	r1, #180	; 0xb4
 8002a76:	2004      	movs	r0, #4
 8002a78:	f7ff fe72 	bl	8002760 <HardSw_PWM_Channels_UpdatePhase>
		HardSw_PWM_Channels_UpdateDuty(0);
 8002a7c:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8002bec <main_timer_function+0x2f4>
 8002a80:	f7ff fe2e 	bl	80026e0 <HardSw_PWM_Channels_UpdateDuty>
		HardSw_PWM_Channels_OFF();
 8002a84:	f7ff fe02 	bl	800268c <HardSw_PWM_Channels_OFF>

		if (init_err == 0) {
 8002a88:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <main_timer_function+0x2f0>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d103      	bne.n	8002a98 <main_timer_function+0x1a0>
			State = Wait;
 8002a90:	4b4c      	ldr	r3, [pc, #304]	; (8002bc4 <main_timer_function+0x2cc>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
			State = Error;
		}



		break;
 8002a96:	e1b7      	b.n	8002e08 <main_timer_function+0x510>
			State = Error;
 8002a98:	4b4a      	ldr	r3, [pc, #296]	; (8002bc4 <main_timer_function+0x2cc>)
 8002a9a:	2206      	movs	r2, #6
 8002a9c:	601a      	str	r2, [r3, #0]
		break;
 8002a9e:	e1b3      	b.n	8002e08 <main_timer_function+0x510>

	case Wait:

		if(ST_WAIT_EN){
			if(State != Old_State){
 8002aa0:	4b48      	ldr	r3, [pc, #288]	; (8002bc4 <main_timer_function+0x2cc>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <main_timer_function+0x2d8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d008      	beq.n	8002abe <main_timer_function+0x1c6>
				time_tmp = millis();
 8002aac:	f000 fa36 	bl	8002f1c <millis>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4a48      	ldr	r2, [pc, #288]	; (8002bd4 <main_timer_function+0x2dc>)
 8002ab4:	6013      	str	r3, [r2, #0]
				Old_State = State;
 8002ab6:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <main_timer_function+0x2cc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a45      	ldr	r2, [pc, #276]	; (8002bd0 <main_timer_function+0x2d8>)
 8002abc:	6013      	str	r3, [r2, #0]
			}

			Button_Control(&Button_1, PreCharge);
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4845      	ldr	r0, [pc, #276]	; (8002bd8 <main_timer_function+0x2e0>)
 8002ac2:	f000 fa69 	bl	8002f98 <Button_Control>
			Button_Control(&PC_Button, PreCharge);
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	4845      	ldr	r0, [pc, #276]	; (8002be0 <main_timer_function+0x2e8>)
 8002aca:	f000 fa65 	bl	8002f98 <Button_Control>

		} else {
			State = PreCharge;
		}

		break;
 8002ace:	e19b      	b.n	8002e08 <main_timer_function+0x510>

	case PreCharge:

		if(ST_PRECHARGE_EN){
			if(State != Old_State){
 8002ad0:	4b3c      	ldr	r3, [pc, #240]	; (8002bc4 <main_timer_function+0x2cc>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b3e      	ldr	r3, [pc, #248]	; (8002bd0 <main_timer_function+0x2d8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d00e      	beq.n	8002afa <main_timer_function+0x202>
				time_tmp = millis();
 8002adc:	f000 fa1e 	bl	8002f1c <millis>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a3c      	ldr	r2, [pc, #240]	; (8002bd4 <main_timer_function+0x2dc>)
 8002ae4:	6013      	str	r3, [r2, #0]
				Old_State = State;
 8002ae6:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <main_timer_function+0x2cc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a39      	ldr	r2, [pc, #228]	; (8002bd0 <main_timer_function+0x2d8>)
 8002aec:	6013      	str	r3, [r2, #0]
				DO_1_State = ON;
 8002aee:	4b51      	ldr	r3, [pc, #324]	; (8002c34 <main_timer_function+0x33c>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
				DO_2_State = OFF;
 8002af4:	4b50      	ldr	r3, [pc, #320]	; (8002c38 <main_timer_function+0x340>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
			}

			Button_Control(&Button_1, Stop);
 8002afa:	2105      	movs	r1, #5
 8002afc:	4836      	ldr	r0, [pc, #216]	; (8002bd8 <main_timer_function+0x2e0>)
 8002afe:	f000 fa4b 	bl	8002f98 <Button_Control>
			Button_Control(&PC_Button, Stop);
 8002b02:	2105      	movs	r1, #5
 8002b04:	4836      	ldr	r0, [pc, #216]	; (8002be0 <main_timer_function+0x2e8>)
 8002b06:	f000 fa47 	bl	8002f98 <Button_Control>

			if(millis() - time_tmp >= T_PRECHARGE){
 8002b0a:	f000 fa07 	bl	8002f1c <millis>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <main_timer_function+0x2dc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d907      	bls.n	8002b2e <main_timer_function+0x236>
				DO_2_State = ON;
 8002b1e:	4b46      	ldr	r3, [pc, #280]	; (8002c38 <main_timer_function+0x340>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
				time_tmp = millis();
 8002b24:	f000 f9fa 	bl	8002f1c <millis>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4a2a      	ldr	r2, [pc, #168]	; (8002bd4 <main_timer_function+0x2dc>)
 8002b2c:	6013      	str	r3, [r2, #0]
			}

			if((millis() - time_tmp >= 500) && (DO_2_State == ON)){
 8002b2e:	f000 f9f5 	bl	8002f1c <millis>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <main_timer_function+0x2dc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b3e:	f0c0 815c 	bcc.w	8002dfa <main_timer_function+0x502>
 8002b42:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <main_timer_function+0x340>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	f040 8157 	bne.w	8002dfa <main_timer_function+0x502>
				//DO_1_State = OFF; ВЫКЛЮЧАТЬ НЕ НУЖНО, Т.К. ПЕРЕДЕЛАЛ�? СХЕМУ ДЛЯ ЗАРЯДА КОНДЕНСАТОРОВ
				State = Delay;
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <main_timer_function+0x2cc>)
 8002b4e:	2203      	movs	r2, #3
 8002b50:	601a      	str	r2, [r3, #0]

		} else {
			State = Delay;
		}

		break;
 8002b52:	e152      	b.n	8002dfa <main_timer_function+0x502>

	case Delay:

		if(ST_DELAY_EN){
			if(State != Old_State){
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <main_timer_function+0x2cc>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <main_timer_function+0x2d8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d008      	beq.n	8002b72 <main_timer_function+0x27a>
				time_tmp = millis();
 8002b60:	f000 f9dc 	bl	8002f1c <millis>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <main_timer_function+0x2dc>)
 8002b68:	6013      	str	r3, [r2, #0]
				Old_State = State;
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <main_timer_function+0x2cc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <main_timer_function+0x2d8>)
 8002b70:	6013      	str	r3, [r2, #0]
			}

			Button_Control(&Button_1, Stop);
 8002b72:	2105      	movs	r1, #5
 8002b74:	4818      	ldr	r0, [pc, #96]	; (8002bd8 <main_timer_function+0x2e0>)
 8002b76:	f000 fa0f 	bl	8002f98 <Button_Control>
			Button_Control(&PC_Button, Stop);
 8002b7a:	2105      	movs	r1, #5
 8002b7c:	4818      	ldr	r0, [pc, #96]	; (8002be0 <main_timer_function+0x2e8>)
 8002b7e:	f000 fa0b 	bl	8002f98 <Button_Control>

			if(millis() - time_tmp >= T_DELAY){
 8002b82:	f000 f9cb 	bl	8002f1c <millis>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <main_timer_function+0x2dc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b92:	f0c0 8134 	bcc.w	8002dfe <main_timer_function+0x506>
				State = Work;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <main_timer_function+0x2cc>)
 8002b98:	2204      	movs	r2, #4
 8002b9a:	601a      	str	r2, [r3, #0]
			}
		} else {
			State = Work;
		}

		break;
 8002b9c:	e12f      	b.n	8002dfe <main_timer_function+0x506>
 8002b9e:	bf00      	nop
 8002ba0:	20000080 	.word	0x20000080
 8002ba4:	2000007c 	.word	0x2000007c
 8002ba8:	20000060 	.word	0x20000060
 8002bac:	20000078 	.word	0x20000078
 8002bb0:	200000f4 	.word	0x200000f4
 8002bb4:	200000f0 	.word	0x200000f0
 8002bb8:	20000062 	.word	0x20000062
 8002bbc:	200000ec 	.word	0x200000ec
 8002bc0:	20000426 	.word	0x20000426
 8002bc4:	20000418 	.word	0x20000418
 8002bc8:	20000055 	.word	0x20000055
 8002bcc:	20000410 	.word	0x20000410
 8002bd0:	2000041c 	.word	0x2000041c
 8002bd4:	20000420 	.word	0x20000420
 8002bd8:	20000428 	.word	0x20000428
 8002bdc:	20000054 	.word	0x20000054
 8002be0:	20000438 	.word	0x20000438
 8002be4:	20000411 	.word	0x20000411
 8002be8:	20000424 	.word	0x20000424
 8002bec:	00000000 	.word	0x00000000
 8002bf0:	45034000 	.word	0x45034000
 8002bf4:	20000404 	.word	0x20000404
 8002bf8:	2000044c 	.word	0x2000044c
 8002bfc:	3f4ccccd 	.word	0x3f4ccccd
 8002c00:	3ba3d70a 	.word	0x3ba3d70a
 8002c04:	3a03126f 	.word	0x3a03126f
 8002c08:	20000414 	.word	0x20000414
 8002c0c:	20000454 	.word	0x20000454
 8002c10:	20000494 	.word	0x20000494
 8002c14:	42200000 	.word	0x42200000
 8002c18:	447a0000 	.word	0x447a0000
 8002c1c:	467a0000 	.word	0x467a0000
 8002c20:	20000010 	.word	0x20000010
 8002c24:	20000464 	.word	0x20000464
 8002c28:	43280000 	.word	0x43280000
 8002c2c:	20000018 	.word	0x20000018
 8002c30:	2000047c 	.word	0x2000047c
 8002c34:	20000056 	.word	0x20000056
 8002c38:	20000057 	.word	0x20000057

	case Work:

		if(ST_WORK_EN){
			if(State != Old_State){
 8002c3c:	4b74      	ldr	r3, [pc, #464]	; (8002e10 <main_timer_function+0x518>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b74      	ldr	r3, [pc, #464]	; (8002e14 <main_timer_function+0x51c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d017      	beq.n	8002c78 <main_timer_function+0x380>
				time_tmp = millis();
 8002c48:	f000 f968 	bl	8002f1c <millis>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4a72      	ldr	r2, [pc, #456]	; (8002e18 <main_timer_function+0x520>)
 8002c50:	6013      	str	r3, [r2, #0]

				EN_PWM_State = ON;
 8002c52:	4b72      	ldr	r3, [pc, #456]	; (8002e1c <main_timer_function+0x524>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]

				//Включение шима
				if(SOFT_SW_EN){
					SoftSw_PWM_Channels_ON();
 8002c58:	f7ff fb8c 	bl	8002374 <SoftSw_PWM_Channels_ON>
					SoftSw_PWM_Channels_UpdateDuty(SOFTSW_DUTY);
 8002c5c:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8002e20 <main_timer_function+0x528>
 8002c60:	f7ff fbc2 	bl	80023e8 <SoftSw_PWM_Channels_UpdateDuty>
				}

				if(HARD_SW_EN){
					HardSw_PWM_Channels_ON();
 8002c64:	f7ff fd00 	bl	8002668 <HardSw_PWM_Channels_ON>
					HardSw_PWM_Channels_UpdateDuty(HARDSW_DUTY);
 8002c68:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8002e24 <main_timer_function+0x52c>
 8002c6c:	f7ff fd38 	bl	80026e0 <HardSw_PWM_Channels_UpdateDuty>
				}

				Old_State = State;
 8002c70:	4b67      	ldr	r3, [pc, #412]	; (8002e10 <main_timer_function+0x518>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a67      	ldr	r2, [pc, #412]	; (8002e14 <main_timer_function+0x51c>)
 8002c76:	6013      	str	r3, [r2, #0]
			{
				//Разомкнутая система
				//HardSw_PWM_Channels_UpdateDuty(HardSw_Duty);

				//Замкнутая система
				HardSw_PWM_Channels_UpdateDuty(Reg_U.Out);
 8002c78:	4b6b      	ldr	r3, [pc, #428]	; (8002e28 <main_timer_function+0x530>)
 8002c7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c82:	f7ff fd2d 	bl	80026e0 <HardSw_PWM_Channels_UpdateDuty>

				if(millis() - time_tmp >= T_DELAY_WORK)
 8002c86:	f000 f949 	bl	8002f1c <millis>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b62      	ldr	r3, [pc, #392]	; (8002e18 <main_timer_function+0x520>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c96:	d339      	bcc.n	8002d0c <main_timer_function+0x414>
				{

					if(autocomp_enable)
 8002c98:	4b64      	ldr	r3, [pc, #400]	; (8002e2c <main_timer_function+0x534>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00f      	beq.n	8002cc0 <main_timer_function+0x3c8>
					{
						if(targ_u != zad_u)
 8002ca0:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <main_timer_function+0x538>)
 8002ca2:	ed93 7a00 	vldr	s14, [r3]
 8002ca6:	4b63      	ldr	r3, [pc, #396]	; (8002e34 <main_timer_function+0x53c>)
 8002ca8:	edd3 7a00 	vldr	s15, [r3]
 8002cac:	eeb4 7a67 	vcmp.f32	s14, s15
 8002cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb4:	d013      	beq.n	8002cde <main_timer_function+0x3e6>
						{
							zad_u = targ_u;
 8002cb6:	4b5e      	ldr	r3, [pc, #376]	; (8002e30 <main_timer_function+0x538>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a5e      	ldr	r2, [pc, #376]	; (8002e34 <main_timer_function+0x53c>)
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e00e      	b.n	8002cde <main_timer_function+0x3e6>
						}
					}
					else
					{
						if(zad_u_PC != zad_u)
 8002cc0:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <main_timer_function+0x540>)
 8002cc2:	ed93 7a00 	vldr	s14, [r3]
 8002cc6:	4b5b      	ldr	r3, [pc, #364]	; (8002e34 <main_timer_function+0x53c>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	eeb4 7a67 	vcmp.f32	s14, s15
 8002cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd4:	d003      	beq.n	8002cde <main_timer_function+0x3e6>
						{
							zad_u = zad_u_PC;
 8002cd6:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <main_timer_function+0x540>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a56      	ldr	r2, [pc, #344]	; (8002e34 <main_timer_function+0x53c>)
 8002cdc:	6013      	str	r3, [r2, #0]
						}
					}

					if(zad_u >= HV_MAX_VOLT)
 8002cde:	4b55      	ldr	r3, [pc, #340]	; (8002e34 <main_timer_function+0x53c>)
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002e3c <main_timer_function+0x544>
 8002ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf0:	db02      	blt.n	8002cf8 <main_timer_function+0x400>
					{
						zad_u = HV_MAX_VOLT;
 8002cf2:	4b50      	ldr	r3, [pc, #320]	; (8002e34 <main_timer_function+0x53c>)
 8002cf4:	4a52      	ldr	r2, [pc, #328]	; (8002e40 <main_timer_function+0x548>)
 8002cf6:	601a      	str	r2, [r3, #0]
					}

					//targ_u = DOWN_TARGET_VOLT*DOWN_TV_KOEF;
					targ_u = down_targ_volt*DOWN_TV_KOEF;
 8002cf8:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <main_timer_function+0x54c>)
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	eeb0 7a0a 	vmov.f32	s14, #10	; 0x40500000  3.250
 8002d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d06:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <main_timer_function+0x538>)
 8002d08:	edc3 7a00 	vstr	s15, [r3]
				}
			}

			Button_Control(&Button_1, Stop);
 8002d0c:	2105      	movs	r1, #5
 8002d0e:	484e      	ldr	r0, [pc, #312]	; (8002e48 <main_timer_function+0x550>)
 8002d10:	f000 f942 	bl	8002f98 <Button_Control>
			Button_Control(&PC_Button, Stop);
 8002d14:	2105      	movs	r1, #5
 8002d16:	484d      	ldr	r0, [pc, #308]	; (8002e4c <main_timer_function+0x554>)
 8002d18:	f000 f93e 	bl	8002f98 <Button_Control>
		} else {
			State = Stop;
		}


		break;
 8002d1c:	e074      	b.n	8002e08 <main_timer_function+0x510>

	case Stop:

		if(ST_STOP_EN){

			if(State != Old_State){
 8002d1e:	4b3c      	ldr	r3, [pc, #240]	; (8002e10 <main_timer_function+0x518>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4b3c      	ldr	r3, [pc, #240]	; (8002e14 <main_timer_function+0x51c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d027      	beq.n	8002d7a <main_timer_function+0x482>
				time_tmp = millis();
 8002d2a:	f000 f8f7 	bl	8002f1c <millis>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4a39      	ldr	r2, [pc, #228]	; (8002e18 <main_timer_function+0x520>)
 8002d32:	6013      	str	r3, [r2, #0]

				EN_PWM_State = OFF;
 8002d34:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <main_timer_function+0x524>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
				//Отключение шима
				SoftSw_PWM_Channels_OFF();
 8002d3a:	f7ff fac7 	bl	80022cc <SoftSw_PWM_Channels_OFF>
				SoftSw_PWM_Channels_UpdateDuty(0);
 8002d3e:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8002e24 <main_timer_function+0x52c>
 8002d42:	f7ff fb51 	bl	80023e8 <SoftSw_PWM_Channels_UpdateDuty>

				HardSw_PWM_Channels_OFF();
 8002d46:	f7ff fca1 	bl	800268c <HardSw_PWM_Channels_OFF>
				HardSw_PWM_Channels_UpdateDuty(0);
 8002d4a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8002e24 <main_timer_function+0x52c>
 8002d4e:	f7ff fcc7 	bl	80026e0 <HardSw_PWM_Channels_UpdateDuty>

				Ramp_Clear(&Ramp_Amp);
 8002d52:	483f      	ldr	r0, [pc, #252]	; (8002e50 <main_timer_function+0x558>)
 8002d54:	f000 fafe 	bl	8003354 <Ramp_Clear>
				//zad_amp = 0;

				zad_u = 0;
 8002d58:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <main_timer_function+0x53c>)
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
				Regulator_Clear(&Reg_U);
 8002d60:	4831      	ldr	r0, [pc, #196]	; (8002e28 <main_timer_function+0x530>)
 8002d62:	f000 fc2e 	bl	80035c2 <Regulator_Clear>


				DO_1_State = OFF;
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <main_timer_function+0x55c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
				DO_2_State = OFF;
 8002d6c:	4b3a      	ldr	r3, [pc, #232]	; (8002e58 <main_timer_function+0x560>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]

				Old_State = State;
 8002d72:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <main_timer_function+0x518>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <main_timer_function+0x51c>)
 8002d78:	6013      	str	r3, [r2, #0]
			}

			if(Device_Error > 0){
 8002d7a:	4b38      	ldr	r3, [pc, #224]	; (8002e5c <main_timer_function+0x564>)
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <main_timer_function+0x492>
				State = Error;
 8002d82:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <main_timer_function+0x518>)
 8002d84:	2206      	movs	r2, #6
 8002d86:	601a      	str	r2, [r3, #0]

		} else {
			State = Wait;
		}

		break;
 8002d88:	e03b      	b.n	8002e02 <main_timer_function+0x50a>
				if(millis() - time_tmp >= T_STOP){
 8002d8a:	f000 f8c7 	bl	8002f1c <millis>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <main_timer_function+0x520>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9a:	d332      	bcc.n	8002e02 <main_timer_function+0x50a>
					State = Wait;
 8002d9c:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <main_timer_function+0x518>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
		break;
 8002da2:	e02e      	b.n	8002e02 <main_timer_function+0x50a>

	case Error:

		if(ST_ERROR_EN){

			if(DO_1_State){
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <main_timer_function+0x55c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <main_timer_function+0x4ba>
				DO_1_State = OFF;
 8002dac:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <main_timer_function+0x55c>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
			}

			if(DO_2_State){
 8002db2:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <main_timer_function+0x560>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <main_timer_function+0x4c8>
				DO_2_State = OFF;
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <main_timer_function+0x560>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
			}

			if(EN_PWM_State){
 8002dc0:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <main_timer_function+0x524>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <main_timer_function+0x4d6>
				EN_PWM_State = OFF;
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <main_timer_function+0x524>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
			}

			//На всякий случай ещё раз выключаем шим
			SoftSw_PWM_Channels_OFF();
 8002dce:	f7ff fa7d 	bl	80022cc <SoftSw_PWM_Channels_OFF>
			SoftSw_PWM_Channels_UpdateDuty(0);
 8002dd2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8002e24 <main_timer_function+0x52c>
 8002dd6:	f7ff fb07 	bl	80023e8 <SoftSw_PWM_Channels_UpdateDuty>

			HardSw_PWM_Channels_OFF();
 8002dda:	f7ff fc57 	bl	800268c <HardSw_PWM_Channels_OFF>
			HardSw_PWM_Channels_UpdateDuty(0);
 8002dde:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002e24 <main_timer_function+0x52c>
 8002de2:	f7ff fc7d 	bl	80026e0 <HardSw_PWM_Channels_UpdateDuty>

			if(Device_Error == 0){
 8002de6:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <main_timer_function+0x564>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10b      	bne.n	8002e06 <main_timer_function+0x50e>
				State = Wait;
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <main_timer_function+0x518>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

		} else {
			State = Wait;
		}

		break;
 8002df4:	e007      	b.n	8002e06 <main_timer_function+0x50e>

	default:
		break;
 8002df6:	bf00      	nop
 8002df8:	e006      	b.n	8002e08 <main_timer_function+0x510>
		break;
 8002dfa:	bf00      	nop
 8002dfc:	e004      	b.n	8002e08 <main_timer_function+0x510>
		break;
 8002dfe:	bf00      	nop
 8002e00:	e002      	b.n	8002e08 <main_timer_function+0x510>
		break;
 8002e02:	bf00      	nop
 8002e04:	e000      	b.n	8002e08 <main_timer_function+0x510>
		break;
 8002e06:	bf00      	nop

	}

}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000418 	.word	0x20000418
 8002e14:	2000041c 	.word	0x2000041c
 8002e18:	20000420 	.word	0x20000420
 8002e1c:	20000058 	.word	0x20000058
 8002e20:	3eb33333 	.word	0x3eb33333
 8002e24:	00000000 	.word	0x00000000
 8002e28:	20000494 	.word	0x20000494
 8002e2c:	20000410 	.word	0x20000410
 8002e30:	20000408 	.word	0x20000408
 8002e34:	20000404 	.word	0x20000404
 8002e38:	2000040c 	.word	0x2000040c
 8002e3c:	45034000 	.word	0x45034000
 8002e40:	45034000 	.word	0x45034000
 8002e44:	20000014 	.word	0x20000014
 8002e48:	20000428 	.word	0x20000428
 8002e4c:	20000438 	.word	0x20000438
 8002e50:	2000044c 	.word	0x2000044c
 8002e54:	20000056 	.word	0x20000056
 8002e58:	20000057 	.word	0x20000057
 8002e5c:	20000426 	.word	0x20000426

08002e60 <modbus_timer_function>:


void modbus_timer_function() {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
	// обновление регистров MDB
	ModbusRTU_update_reg();
 8002e64:	f000 f958 	bl	8003118 <ModbusRTU_update_reg>
}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <TIM_NB_Init>:

//-----NON BLOKING TIMER--------------------------------------------------------------------------
void TIM_NB_Init(TIM_NB_TypeDef *timer, uint32_t delay, void (*funptr)) {
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]

	timer->delay = delay;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	609a      	str	r2, [r3, #8]
	timer->function = funptr;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	60da      	str	r2, [r3, #12]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <TIM_NB_Start>:

void TIM_NB_Start(TIM_NB_TypeDef *timer, uint8_t mode) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	70fb      	strb	r3, [r7, #3]

	if (timer->delay != 0) {
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <TIM_NB_Start+0x24>
		timer->counter = millis();
 8002ea4:	f000 f83a 	bl	8002f1c <millis>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	605a      	str	r2, [r3, #4]
		timer->state = mode;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	701a      	strb	r2, [r3, #0]
	}
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <TIM_NB_Check>:
	if (timer->state != STOPPED) {
		timer->state = STOPPED;
	}
}

void TIM_NB_Check(TIM_NB_TypeDef *timer) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

	if (timer->state != STOPPED) {
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d023      	beq.n	8002f14 <TIM_NB_Check+0x58>
		if (HAL_GetTick() - timer->counter >= timer->delay) {
 8002ecc:	f001 fbe8 	bl	80046a0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	1ad2      	subs	r2, r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d319      	bcc.n	8002f14 <TIM_NB_Check+0x58>
			switch (timer->state) {
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <TIM_NB_Check+0x32>
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d00a      	beq.n	8002f02 <TIM_NB_Check+0x46>
				timer->function();
				break;
			}
		}
	}
}
 8002eec:	e012      	b.n	8002f14 <TIM_NB_Check+0x58>
				timer->state = STOPPED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
				timer->counter = 0;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	605a      	str	r2, [r3, #4]
				timer->function();
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	4798      	blx	r3
				break;
 8002f00:	e008      	b.n	8002f14 <TIM_NB_Check+0x58>
				timer->counter = HAL_GetTick();
 8002f02:	f001 fbcd 	bl	80046a0 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	605a      	str	r2, [r3, #4]
				timer->function();
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4798      	blx	r3
				break;
 8002f12:	bf00      	nop
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <millis>:

uint32_t millis() {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002f20:	f001 fbbe 	bl	80046a0 <HAL_GetTick>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <LED_Control>:
//-----NON BLOKING TIMER--------------------------------------------------------------------------

void LED_Control(LED_CMD_TypeDef Cmd, uint32_t Blink_Period, enum_state *LED_Name, uint32_t *LED_cnt) {
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	4603      	mov	r3, r0
 8002f38:	73fb      	strb	r3, [r7, #15]

	if (Cmd == LED_OFF) {
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d103      	bne.n	8002f48 <LED_Control+0x1e>
		*LED_Name = OFF;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
				*LED_Name = ON;
			}
		}
	}

}
 8002f46:	e022      	b.n	8002f8e <LED_Control+0x64>
	} else if (Cmd == LED_ON) {
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d103      	bne.n	8002f56 <LED_Control+0x2c>
		*LED_Name = ON;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
}
 8002f54:	e01b      	b.n	8002f8e <LED_Control+0x64>
	} else if (Cmd == LED_BLINK) {
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d118      	bne.n	8002f8e <LED_Control+0x64>
		if (HAL_GetTick() - *LED_cnt >= Blink_Period) {
 8002f5c:	f001 fba0 	bl	80046a0 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d80f      	bhi.n	8002f8e <LED_Control+0x64>
			*LED_cnt = HAL_GetTick();
 8002f6e:	f001 fb97 	bl	80046a0 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	601a      	str	r2, [r3, #0]
			if (*LED_Name == ON) {
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d103      	bne.n	8002f88 <LED_Control+0x5e>
				*LED_Name = OFF;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
}
 8002f86:	e002      	b.n	8002f8e <LED_Control+0x64>
				*LED_Name = ON;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <Button_Control>:

void Button_Control(Button_TypeDef *Button, uint8_t Target_state){
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]

	if((*Button->State == ON) && (Button->Old_State == OFF)){
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d114      	bne.n	8002fd8 <Button_Control+0x40>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	791b      	ldrb	r3, [r3, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d110      	bne.n	8002fd8 <Button_Control+0x40>
		if(millis() - Button->cnt >= Button->delay){
 8002fb6:	f7ff ffb1 	bl	8002f1c <millis>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	1ad2      	subs	r2, r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d314      	bcc.n	8002ff4 <Button_Control+0x5c>
			Button->Old_State = ON;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	711a      	strb	r2, [r3, #4]
			State = Target_state;
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <Button_Control+0x64>)
 8002fd4:	6013      	str	r3, [r2, #0]
		if(millis() - Button->cnt >= Button->delay){
 8002fd6:	e00d      	b.n	8002ff4 <Button_Control+0x5c>
		}
	} else {
		if(*Button->State == OFF){
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d102      	bne.n	8002fe8 <Button_Control+0x50>
			Button->Old_State = OFF;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	711a      	strb	r2, [r3, #4]
		}
		Button->cnt = millis();
 8002fe8:	f7ff ff98 	bl	8002f1c <millis>
 8002fec:	4602      	mov	r2, r0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	609a      	str	r2, [r3, #8]
	}

}
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000418 	.word	0x20000418

08003000 <Device_Indication_Process>:

void Device_Indication_Process(){
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0

	if (State == Work)
 8003004:	4b1c      	ldr	r3, [pc, #112]	; (8003078 <Device_Indication_Process+0x78>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d106      	bne.n	800301a <Device_Indication_Process+0x1a>
		LED_Control(LED_ON, 0, &LED_1_State, &LED_1_Cnt);
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <Device_Indication_Process+0x7c>)
 800300e:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <Device_Indication_Process+0x80>)
 8003010:	2100      	movs	r1, #0
 8003012:	2001      	movs	r0, #1
 8003014:	f7ff ff89 	bl	8002f2a <LED_Control>
	else if (State == Error)
		LED_Control(LED_OFF, 0, &LED_1_State, &LED_1_Cnt);
	else
		LED_Control(LED_OFF, 0, &LED_1_State, &LED_1_Cnt);

}
 8003018:	e02b      	b.n	8003072 <Device_Indication_Process+0x72>
	else if ((State == Delay) || (State == PreCharge))
 800301a:	4b17      	ldr	r3, [pc, #92]	; (8003078 <Device_Indication_Process+0x78>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d003      	beq.n	800302a <Device_Indication_Process+0x2a>
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <Device_Indication_Process+0x78>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d106      	bne.n	8003038 <Device_Indication_Process+0x38>
		LED_Control(LED_BLINK, 100, &LED_1_State, &LED_1_Cnt);
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <Device_Indication_Process+0x7c>)
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <Device_Indication_Process+0x80>)
 800302e:	2164      	movs	r1, #100	; 0x64
 8003030:	2002      	movs	r0, #2
 8003032:	f7ff ff7a 	bl	8002f2a <LED_Control>
}
 8003036:	e01c      	b.n	8003072 <Device_Indication_Process+0x72>
	else if (State == Wait)
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <Device_Indication_Process+0x78>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d107      	bne.n	8003050 <Device_Indication_Process+0x50>
		LED_Control(LED_BLINK, 500, &LED_1_State, &LED_1_Cnt);
 8003040:	4b0e      	ldr	r3, [pc, #56]	; (800307c <Device_Indication_Process+0x7c>)
 8003042:	4a0f      	ldr	r2, [pc, #60]	; (8003080 <Device_Indication_Process+0x80>)
 8003044:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003048:	2002      	movs	r0, #2
 800304a:	f7ff ff6e 	bl	8002f2a <LED_Control>
}
 800304e:	e010      	b.n	8003072 <Device_Indication_Process+0x72>
	else if (State == Error)
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <Device_Indication_Process+0x78>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b06      	cmp	r3, #6
 8003056:	d106      	bne.n	8003066 <Device_Indication_Process+0x66>
		LED_Control(LED_OFF, 0, &LED_1_State, &LED_1_Cnt);
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <Device_Indication_Process+0x7c>)
 800305a:	4a09      	ldr	r2, [pc, #36]	; (8003080 <Device_Indication_Process+0x80>)
 800305c:	2100      	movs	r1, #0
 800305e:	2000      	movs	r0, #0
 8003060:	f7ff ff63 	bl	8002f2a <LED_Control>
}
 8003064:	e005      	b.n	8003072 <Device_Indication_Process+0x72>
		LED_Control(LED_OFF, 0, &LED_1_State, &LED_1_Cnt);
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <Device_Indication_Process+0x7c>)
 8003068:	4a05      	ldr	r2, [pc, #20]	; (8003080 <Device_Indication_Process+0x80>)
 800306a:	2100      	movs	r1, #0
 800306c:	2000      	movs	r0, #0
 800306e:	f7ff ff5c 	bl	8002f2a <LED_Control>
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000418 	.word	0x20000418
 800307c:	2000005c 	.word	0x2000005c
 8003080:	20000059 	.word	0x20000059

08003084 <ModbusRTU_Init_AO>:
	}

}

void ModbusRTU_Init_AO ()
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
	// Определение переменных AO
	for(uint8_t i = 0; i < ADR_MAX_AO; i++)
 800308a:	2300      	movs	r3, #0
 800308c:	71fb      	strb	r3, [r7, #7]
 800308e:	e00a      	b.n	80030a6 <ModbusRTU_Init_AO+0x22>
	{
		DATA_AO[i] = &DATA_AO_buf[i];
 8003090:	79fa      	ldrb	r2, [r7, #7]
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	0052      	lsls	r2, r2, #1
 8003096:	490d      	ldr	r1, [pc, #52]	; (80030cc <ModbusRTU_Init_AO+0x48>)
 8003098:	440a      	add	r2, r1
 800309a:	490d      	ldr	r1, [pc, #52]	; (80030d0 <ModbusRTU_Init_AO+0x4c>)
 800309c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0; i < ADR_MAX_AO; i++)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	3301      	adds	r3, #1
 80030a4:	71fb      	strb	r3, [r7, #7]
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d9f1      	bls.n	8003090 <ModbusRTU_Init_AO+0xc>
	}
	DATA_AO_buf[1] = down_targ_volt;
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <ModbusRTU_Init_AO+0x50>)
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b6:	ee17 3a90 	vmov	r3, s15
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <ModbusRTU_Init_AO+0x48>)
 80030be:	805a      	strh	r2, [r3, #2]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	200001ac 	.word	0x200001ac
 80030d0:	2000015c 	.word	0x2000015c
 80030d4:	20000014 	.word	0x20000014

080030d8 <ModbusRTU_Init_AI>:

void ModbusRTU_Init_AI ()
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
	// Определение переменных AI
	for(uint8_t i = 0; i < ADR_MAX_AI; i++)
 80030de:	2300      	movs	r3, #0
 80030e0:	71fb      	strb	r3, [r7, #7]
 80030e2:	e00a      	b.n	80030fa <ModbusRTU_Init_AI+0x22>
	{
		DATA_AI[i] = &DATA_AI_buf[i];
 80030e4:	79fa      	ldrb	r2, [r7, #7]
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	0052      	lsls	r2, r2, #1
 80030ea:	4909      	ldr	r1, [pc, #36]	; (8003110 <ModbusRTU_Init_AI+0x38>)
 80030ec:	440a      	add	r2, r1
 80030ee:	4909      	ldr	r1, [pc, #36]	; (8003114 <ModbusRTU_Init_AI+0x3c>)
 80030f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0; i < ADR_MAX_AI; i++)
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	3301      	adds	r3, #1
 80030f8:	71fb      	strb	r3, [r7, #7]
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d9f1      	bls.n	80030e4 <ModbusRTU_Init_AI+0xc>
	}
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	200001c0 	.word	0x200001c0
 8003114:	20000184 	.word	0x20000184

08003118 <ModbusRTU_update_reg>:

void ModbusRTU_update_reg()
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
	static uint16_t count = 0;
	int16_t  tmp_int16 = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp_uint16 = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	80fb      	strh	r3, [r7, #6]

	// Read reg mdb
	// State machine for modbus
	switch (State)
 8003126:	4b63      	ldr	r3, [pc, #396]	; (80032b4 <ModbusRTU_update_reg+0x19c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b06      	cmp	r3, #6
 800312c:	d825      	bhi.n	800317a <ModbusRTU_update_reg+0x62>
 800312e:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <ModbusRTU_update_reg+0x1c>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	08003151 	.word	0x08003151
 8003138:	08003157 	.word	0x08003157
 800313c:	0800315d 	.word	0x0800315d
 8003140:	08003163 	.word	0x08003163
 8003144:	08003169 	.word	0x08003169
 8003148:	0800316f 	.word	0x0800316f
 800314c:	08003175 	.word	0x08003175
	{
	case Init:
		tmp_uint16 = 0b0000000000000001;
 8003150:	2301      	movs	r3, #1
 8003152:	80fb      	strh	r3, [r7, #6]
		break;
 8003154:	e012      	b.n	800317c <ModbusRTU_update_reg+0x64>
	case Wait:
		tmp_uint16 = 0b0000000000000010;
 8003156:	2302      	movs	r3, #2
 8003158:	80fb      	strh	r3, [r7, #6]
		break;
 800315a:	e00f      	b.n	800317c <ModbusRTU_update_reg+0x64>
	case PreCharge:
		tmp_uint16 = 0b0000000000000100;
 800315c:	2304      	movs	r3, #4
 800315e:	80fb      	strh	r3, [r7, #6]
		break;
 8003160:	e00c      	b.n	800317c <ModbusRTU_update_reg+0x64>
	case Delay:
		tmp_uint16 = 0b0000000000001000;
 8003162:	2308      	movs	r3, #8
 8003164:	80fb      	strh	r3, [r7, #6]
		break;
 8003166:	e009      	b.n	800317c <ModbusRTU_update_reg+0x64>
	case Work:
		tmp_uint16 = 0b0000000000010000;
 8003168:	2310      	movs	r3, #16
 800316a:	80fb      	strh	r3, [r7, #6]
		break;
 800316c:	e006      	b.n	800317c <ModbusRTU_update_reg+0x64>
	case Stop:
		tmp_uint16 = 0b0000000000100000;
 800316e:	2320      	movs	r3, #32
 8003170:	80fb      	strh	r3, [r7, #6]
		break;
 8003172:	e003      	b.n	800317c <ModbusRTU_update_reg+0x64>
	case Error:
		tmp_uint16 = 0b0000000001000000;
 8003174:	2340      	movs	r3, #64	; 0x40
 8003176:	80fb      	strh	r3, [r7, #6]
		break;
 8003178:	e000      	b.n	800317c <ModbusRTU_update_reg+0x64>
	default:
		break;
 800317a:	bf00      	nop
	}
	DATA_AI_buf[0] = tmp_uint16;
 800317c:	4a4e      	ldr	r2, [pc, #312]	; (80032b8 <ModbusRTU_update_reg+0x1a0>)
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	8013      	strh	r3, [r2, #0]

	// State dout for modbus
	if (DO_1_State)   { tmp_uint16 |=  0b0000000000000001; }
 8003182:	4b4e      	ldr	r3, [pc, #312]	; (80032bc <ModbusRTU_update_reg+0x1a4>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <ModbusRTU_update_reg+0x7c>
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	80fb      	strh	r3, [r7, #6]
 8003192:	e003      	b.n	800319c <ModbusRTU_update_reg+0x84>
	else              { tmp_uint16 &= ~0b0000000000000001; }
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	80fb      	strh	r3, [r7, #6]

	if (DO_2_State)   { tmp_uint16 |=  0b0000000000000010; }
 800319c:	4b48      	ldr	r3, [pc, #288]	; (80032c0 <ModbusRTU_update_reg+0x1a8>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <ModbusRTU_update_reg+0x96>
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	f043 0302 	orr.w	r3, r3, #2
 80031aa:	80fb      	strh	r3, [r7, #6]
 80031ac:	e003      	b.n	80031b6 <ModbusRTU_update_reg+0x9e>
	else              { tmp_uint16 &= ~0b0000000000000010; }
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	f023 0302 	bic.w	r3, r3, #2
 80031b4:	80fb      	strh	r3, [r7, #6]

	if (EN_PWM_State) { tmp_uint16 |=  0b0000000000000100; }
 80031b6:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <ModbusRTU_update_reg+0x1ac>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <ModbusRTU_update_reg+0xb0>
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	80fb      	strh	r3, [r7, #6]
 80031c6:	e003      	b.n	80031d0 <ModbusRTU_update_reg+0xb8>
	else              { tmp_uint16 &= ~0b0000000000000100; }
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	f023 0304 	bic.w	r3, r3, #4
 80031ce:	80fb      	strh	r3, [r7, #6]
	DATA_AI_buf[1] = tmp_uint16;
 80031d0:	4a39      	ldr	r2, [pc, #228]	; (80032b8 <ModbusRTU_update_reg+0x1a0>)
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	8053      	strh	r3, [r2, #2]

	// Erorr
	DATA_AI_buf[2] = Device_Error;
 80031d6:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <ModbusRTU_update_reg+0x1b0>)
 80031d8:	881a      	ldrh	r2, [r3, #0]
 80031da:	4b37      	ldr	r3, [pc, #220]	; (80032b8 <ModbusRTU_update_reg+0x1a0>)
 80031dc:	809a      	strh	r2, [r3, #4]

	// U_value
	tmp_int16 = U_Value;
 80031de:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <ModbusRTU_update_reg+0x1b4>)
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	80bb      	strh	r3, [r7, #4]
	DATA_AI_buf[3] = (uint16_t)tmp_int16;
 80031e4:	88ba      	ldrh	r2, [r7, #4]
 80031e6:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <ModbusRTU_update_reg+0x1a0>)
 80031e8:	80da      	strh	r2, [r3, #6]

	// I_value
	tmp_int16 = I_Value;
 80031ea:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <ModbusRTU_update_reg+0x1b8>)
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	80bb      	strh	r3, [r7, #4]
	DATA_AI_buf[4] = (uint16_t)tmp_int16;
 80031f0:	88ba      	ldrh	r2, [r7, #4]
 80031f2:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <ModbusRTU_update_reg+0x1a0>)
 80031f4:	811a      	strh	r2, [r3, #8]

	// Reg_U.Out
	tmp_int16 = (Reg_U.Out * 1000);
 80031f6:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <ModbusRTU_update_reg+0x1bc>)
 80031f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80031fc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80032d8 <ModbusRTU_update_reg+0x1c0>
 8003200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003208:	ee17 3a90 	vmov	r3, s15
 800320c:	80bb      	strh	r3, [r7, #4]
	DATA_AI_buf[5] = (uint16_t)tmp_int16;
 800320e:	88ba      	ldrh	r2, [r7, #4]
 8003210:	4b29      	ldr	r3, [pc, #164]	; (80032b8 <ModbusRTU_update_reg+0x1a0>)
 8003212:	815a      	strh	r2, [r3, #10]
	// PC_Start_flag = DATA_AO_buf[0];

	// Zad_U
	tmp_int16 = zad_u;
 8003214:	4b31      	ldr	r3, [pc, #196]	; (80032dc <ModbusRTU_update_reg+0x1c4>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800321e:	ee17 3a90 	vmov	r3, s15
 8003222:	80bb      	strh	r3, [r7, #4]
	DATA_AI_buf[6] = (uint16_t)tmp_int16;
 8003224:	88ba      	ldrh	r2, [r7, #4]
 8003226:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <ModbusRTU_update_reg+0x1a0>)
 8003228:	819a      	strh	r2, [r3, #12]

	// U_Instant
	tmp_int16 = U_Instant;
 800322a:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <ModbusRTU_update_reg+0x1c8>)
 800322c:	edd3 7a00 	vldr	s15, [r3]
 8003230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003234:	ee17 3a90 	vmov	r3, s15
 8003238:	80bb      	strh	r3, [r7, #4]
	DATA_AI_buf[7] = (uint16_t)tmp_int16;
 800323a:	88ba      	ldrh	r2, [r7, #4]
 800323c:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <ModbusRTU_update_reg+0x1a0>)
 800323e:	81da      	strh	r2, [r3, #14]

	// I_Instant
	tmp_int16 = I_Instant;
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <ModbusRTU_update_reg+0x1cc>)
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800324a:	ee17 3a90 	vmov	r3, s15
 800324e:	80bb      	strh	r3, [r7, #4]
	DATA_AI_buf[8] = (uint16_t)tmp_int16;
 8003250:	88ba      	ldrh	r2, [r7, #4]
 8003252:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <ModbusRTU_update_reg+0x1a0>)
 8003254:	821a      	strh	r2, [r3, #16]

	// Write reg mdb
	if (DATA_AO_buf[0] == 1)
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <ModbusRTU_update_reg+0x1d0>)
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d105      	bne.n	800326a <ModbusRTU_update_reg+0x152>
	{
		PC_Start_flag = 1;
 800325e:	4b23      	ldr	r3, [pc, #140]	; (80032ec <ModbusRTU_update_reg+0x1d4>)
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
		DATA_AO_buf[0] = 0;
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <ModbusRTU_update_reg+0x1d0>)
 8003266:	2200      	movs	r2, #0
 8003268:	801a      	strh	r2, [r3, #0]
	}
	if ((PC_Start_flag == 1) && (count++ < 300))
 800326a:	4b20      	ldr	r3, [pc, #128]	; (80032ec <ModbusRTU_update_reg+0x1d4>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10a      	bne.n	8003288 <ModbusRTU_update_reg+0x170>
 8003272:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <ModbusRTU_update_reg+0x1d8>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	b291      	uxth	r1, r2
 800327a:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <ModbusRTU_update_reg+0x1d8>)
 800327c:	8011      	strh	r1, [r2, #0]
 800327e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003282:	d201      	bcs.n	8003288 <ModbusRTU_update_reg+0x170>
	{
		asm("Nop");
 8003284:	bf00      	nop
 8003286:	e005      	b.n	8003294 <ModbusRTU_update_reg+0x17c>
	}
	else
	{
		PC_Start_flag = 0;
 8003288:	4b18      	ldr	r3, [pc, #96]	; (80032ec <ModbusRTU_update_reg+0x1d4>)
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
		count = 0;
 800328e:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <ModbusRTU_update_reg+0x1d8>)
 8003290:	2200      	movs	r2, #0
 8003292:	801a      	strh	r2, [r3, #0]
	}
//	else
//	{
//		PC_Start_flag = 0;
//	}
	targ_u = DATA_AO_buf[1];
 8003294:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <ModbusRTU_update_reg+0x1d0>)
 8003296:	885b      	ldrh	r3, [r3, #2]
 8003298:	ee07 3a90 	vmov	s15, r3
 800329c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a0:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <ModbusRTU_update_reg+0x1dc>)
 80032a2:	edc3 7a00 	vstr	s15, [r3]
	return;
 80032a6:	bf00      	nop
}
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000418 	.word	0x20000418
 80032b8:	200001c0 	.word	0x200001c0
 80032bc:	20000056 	.word	0x20000056
 80032c0:	20000057 	.word	0x20000057
 80032c4:	20000058 	.word	0x20000058
 80032c8:	20000426 	.word	0x20000426
 80032cc:	20000060 	.word	0x20000060
 80032d0:	20000062 	.word	0x20000062
 80032d4:	20000494 	.word	0x20000494
 80032d8:	447a0000 	.word	0x447a0000
 80032dc:	20000404 	.word	0x20000404
 80032e0:	20000070 	.word	0x20000070
 80032e4:	200000e4 	.word	0x200000e4
 80032e8:	200001ac 	.word	0x200001ac
 80032ec:	20000411 	.word	0x20000411
 80032f0:	20000448 	.word	0x20000448
 80032f4:	20000408 	.word	0x20000408

080032f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032fc:	b672      	cpsid	i
}
 80032fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003300:	e7fe      	b.n	8003300 <Error_Handler+0x8>

08003302 <Ramp_Init>:
 * uplimit - верхний предел
 * downlimit - нижний предел
 * step - число, которое прибавляется/вычитается из in на каждом проходе
 * pass - сколько циклов таймера рампа пропускает
 * */
void Ramp_Init(Ramp_Struct *Ramp, float *in, float uplimit, float downlimit, float step, uint16_t pass) {
 8003302:	b480      	push	{r7}
 8003304:	b087      	sub	sp, #28
 8003306:	af00      	add	r7, sp, #0
 8003308:	6178      	str	r0, [r7, #20]
 800330a:	6139      	str	r1, [r7, #16]
 800330c:	ed87 0a03 	vstr	s0, [r7, #12]
 8003310:	edc7 0a02 	vstr	s1, [r7, #8]
 8003314:	ed87 1a01 	vstr	s2, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	807b      	strh	r3, [r7, #2]

	Ramp->In = in;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	60da      	str	r2, [r3, #12]
	Ramp->Counter = 0;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2200      	movs	r2, #0
 8003326:	801a      	strh	r2, [r3, #0]
	Ramp->Pass = pass;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	805a      	strh	r2, [r3, #2]
	Ramp->DownLimit = downlimit;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	615a      	str	r2, [r3, #20]
	Ramp->Out = 0;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
	Ramp->Step = step;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	605a      	str	r2, [r3, #4]
	Ramp->UpLimit = uplimit;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	611a      	str	r2, [r3, #16]

}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <Ramp_Clear>:
/*
 * Функция очистки рампы
 * *Ramp - Указатель на структуру рампы подлежащей очистке
 * */
void Ramp_Clear(Ramp_Struct *Ramp) {
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

	Ramp->Counter = 0;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	801a      	strh	r2, [r3, #0]
	Ramp->Out = 0;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	609a      	str	r2, [r3, #8]

}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <Ramp_Process>:

/*
 * Функция работы рампы
 * *Ramp - Указатель на структуру рампы которая работает
 * */
void Ramp_Process(Ramp_Struct *Ramp) {
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]

	if (Ramp->Counter < Ramp->Pass) {
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	881a      	ldrh	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	885b      	ldrh	r3, [r3, #2]
 8003386:	429a      	cmp	r2, r3
 8003388:	d206      	bcs.n	8003398 <Ramp_Process+0x22>
		Ramp->Counter++;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	3301      	adds	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	801a      	strh	r2, [r3, #0]
		 }

		Ramp->Counter = 0;
	}

}
 8003396:	e0ce      	b.n	8003536 <Ramp_Process+0x1c0>
		 if ((Ramp->Out < *Ramp->In) && (Ramp->Out >= 0)) {
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	ed93 7a02 	vldr	s14, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ae:	d52a      	bpl.n	8003406 <Ramp_Process+0x90>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80033b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033be:	db22      	blt.n	8003406 <Ramp_Process+0x90>
			 if((Ramp->Out + Ramp->Step) < *Ramp->In){
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80033cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e0:	d50b      	bpl.n	80033fa <Ramp_Process+0x84>
				 Ramp->Out += Ramp->Step;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80033ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	edc3 7a02 	vstr	s15, [r3, #8]
			 if((Ramp->Out + Ramp->Step) < *Ramp->In){
 80033f8:	e07b      	b.n	80034f2 <Ramp_Process+0x17c>
				 Ramp->Out = *Ramp->In;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	609a      	str	r2, [r3, #8]
			 if((Ramp->Out + Ramp->Step) < *Ramp->In){
 8003404:	e075      	b.n	80034f2 <Ramp_Process+0x17c>
		 } else if ((Ramp->Out > *Ramp->In) && (Ramp->Out > 0)) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	ed93 7a02 	vldr	s14, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341c:	dd13      	ble.n	8003446 <Ramp_Process+0xd0>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	edd3 7a02 	vldr	s15, [r3, #8]
 8003424:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342c:	dd0b      	ble.n	8003446 <Ramp_Process+0xd0>
		 Ramp->Out -= Ramp->Step;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	ed93 7a02 	vldr	s14, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	edd3 7a01 	vldr	s15, [r3, #4]
 800343a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	edc3 7a02 	vstr	s15, [r3, #8]
 8003444:	e055      	b.n	80034f2 <Ramp_Process+0x17c>
		 } else if ((Ramp->Out > *Ramp->In) && (Ramp->Out <= 0)) {
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	ed93 7a02 	vldr	s14, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	edd3 7a00 	vldr	s15, [r3]
 8003454:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345c:	dd2a      	ble.n	80034b4 <Ramp_Process+0x13e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	edd3 7a02 	vldr	s15, [r3, #8]
 8003464:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346c:	d822      	bhi.n	80034b4 <Ramp_Process+0x13e>
			 if((Ramp->Out + Ramp->Step) > *Ramp->In){
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	ed93 7a02 	vldr	s14, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	edd3 7a01 	vldr	s15, [r3, #4]
 800347a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	edd3 7a00 	vldr	s15, [r3]
 8003486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800348a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348e:	dd0b      	ble.n	80034a8 <Ramp_Process+0x132>
			 				 Ramp->Out -= Ramp->Step;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	ed93 7a02 	vldr	s14, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	edd3 7a01 	vldr	s15, [r3, #4]
 800349c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	edc3 7a02 	vstr	s15, [r3, #8]
			 if((Ramp->Out + Ramp->Step) > *Ramp->In){
 80034a6:	e024      	b.n	80034f2 <Ramp_Process+0x17c>
			 				 Ramp->Out = *Ramp->In;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	609a      	str	r2, [r3, #8]
			 if((Ramp->Out + Ramp->Step) > *Ramp->In){
 80034b2:	e01e      	b.n	80034f2 <Ramp_Process+0x17c>
		 } else if ((Ramp->Out < *Ramp->In) && (Ramp->Out < 0)) {
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	edd3 7a00 	vldr	s15, [r3]
 80034c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	d512      	bpl.n	80034f2 <Ramp_Process+0x17c>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80034d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034da:	d50a      	bpl.n	80034f2 <Ramp_Process+0x17c>
		 Ramp->Out += Ramp->Step;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	ed93 7a02 	vldr	s14, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80034e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	edc3 7a02 	vstr	s15, [r3, #8]
		 if (Ramp->Out >= Ramp->UpLimit){
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80034fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003506:	db04      	blt.n	8003512 <Ramp_Process+0x19c>
		 Ramp->Out = Ramp->UpLimit;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	e00e      	b.n	8003530 <Ramp_Process+0x1ba>
		 } else if (Ramp->Out <= Ramp->DownLimit){
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	ed93 7a02 	vldr	s14, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	edd3 7a05 	vldr	s15, [r3, #20]
 800351e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	d803      	bhi.n	8003530 <Ramp_Process+0x1ba>
		 Ramp->Out = Ramp->DownLimit;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	609a      	str	r2, [r3, #8]
		Ramp->Counter = 0;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	801a      	strh	r2, [r3, #0]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <Regulator_Init>:

void Regulator_Init(PI_Reg_Struct *Reg, float *in, float *fb, float k_p, float k_i, float I_uplimit, float I_downlimit, float uplimit, float downlimit) {
 8003542:	b480      	push	{r7}
 8003544:	b08b      	sub	sp, #44	; 0x2c
 8003546:	af00      	add	r7, sp, #0
 8003548:	6278      	str	r0, [r7, #36]	; 0x24
 800354a:	6239      	str	r1, [r7, #32]
 800354c:	61fa      	str	r2, [r7, #28]
 800354e:	ed87 0a06 	vstr	s0, [r7, #24]
 8003552:	edc7 0a05 	vstr	s1, [r7, #20]
 8003556:	ed87 1a04 	vstr	s2, [r7, #16]
 800355a:	edc7 1a03 	vstr	s3, [r7, #12]
 800355e:	ed87 2a02 	vstr	s4, [r7, #8]
 8003562:	edc7 2a01 	vstr	s5, [r7, #4]

	Reg->Fb = fb;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	619a      	str	r2, [r3, #24]
	Reg->DownLimit = downlimit;
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	625a      	str	r2, [r3, #36]	; 0x24
	Reg->I = 0;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
	Reg->I_DownLimit = I_downlimit;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c
	Reg->I_UpLimit = I_uplimit;
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	629a      	str	r2, [r3, #40]	; 0x28
	Reg->In = in;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	6a3a      	ldr	r2, [r7, #32]
 800358a:	615a      	str	r2, [r3, #20]
	Reg->Out = 0;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	611a      	str	r2, [r3, #16]
	Reg->P = 0;
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	605a      	str	r2, [r3, #4]
	Reg->UpLimit = uplimit;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	621a      	str	r2, [r3, #32]
	Reg->d = 0;
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	61da      	str	r2, [r3, #28]
	Reg->k_I = k_i;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	609a      	str	r2, [r3, #8]
	Reg->k_P = k_p;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	60da      	str	r2, [r3, #12]

}
 80035b6:	bf00      	nop
 80035b8:	372c      	adds	r7, #44	; 0x2c
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <Regulator_Clear>:

void Regulator_Clear(PI_Reg_Struct *Reg) {
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]

	Reg->I = 0;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
	Reg->Out = 0;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]
	Reg->P = 0;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	605a      	str	r2, [r3, #4]
	Reg->d = 0;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	61da      	str	r2, [r3, #28]

}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <Regulator_Process>:

void Regulator_Process(PI_Reg_Struct *Reg) {
 80035f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]

	Reg->d = *Reg->In - *Reg->Fb;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	ed93 7a00 	vldr	s14, [r3]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	edd3 7a00 	vldr	s15, [r3]
 8003612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	edc3 7a07 	vstr	s15, [r3, #28]

	Reg->I += TIMER_PERIOD * Reg->k_I * Reg->d;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc ff35 	bl	8000490 <__aeabi_f2d>
 8003626:	4604      	mov	r4, r0
 8003628:	460d      	mov	r5, r1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fc ff2e 	bl	8000490 <__aeabi_f2d>
 8003634:	a33e      	add	r3, pc, #248	; (adr r3, 8003730 <Regulator_Process+0x138>)
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	f7fc ff81 	bl	8000540 <__aeabi_dmul>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4690      	mov	r8, r2
 8003644:	4699      	mov	r9, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc ff20 	bl	8000490 <__aeabi_f2d>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4640      	mov	r0, r8
 8003656:	4649      	mov	r1, r9
 8003658:	f7fc ff72 	bl	8000540 <__aeabi_dmul>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4620      	mov	r0, r4
 8003662:	4629      	mov	r1, r5
 8003664:	f7fc fdb6 	bl	80001d4 <__adddf3>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f7fd f978 	bl	8000964 <__aeabi_d2f>
 8003674:	4602      	mov	r2, r0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	601a      	str	r2, [r3, #0]
	if (Reg->I < Reg->I_DownLimit)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	ed93 7a00 	vldr	s14, [r3]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368e:	d504      	bpl.n	800369a <Regulator_Process+0xa2>
		Reg->I = Reg->I_DownLimit;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e00e      	b.n	80036b8 <Regulator_Process+0xc0>
	else if (Reg->I > Reg->I_UpLimit)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	ed93 7a00 	vldr	s14, [r3]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80036a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ae:	dd03      	ble.n	80036b8 <Regulator_Process+0xc0>
		Reg->I = Reg->I_UpLimit;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	601a      	str	r2, [r3, #0]

	Reg->P = Reg->k_P * Reg->d;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80036c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	edc3 7a01 	vstr	s15, [r3, #4]

	Reg->Out = Reg->P + Reg->I;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	edd3 7a00 	vldr	s15, [r3]
 80036da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	edc3 7a04 	vstr	s15, [r3, #16]
	if (Reg->Out < Reg->DownLimit)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80036f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f8:	d504      	bpl.n	8003704 <Regulator_Process+0x10c>
		Reg->Out = Reg->DownLimit;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	611a      	str	r2, [r3, #16]
	else if (Reg->Out > Reg->UpLimit)
		Reg->Out = Reg->UpLimit;

}
 8003702:	e00f      	b.n	8003724 <Regulator_Process+0x12c>
	else if (Reg->Out > Reg->UpLimit)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	ed93 7a04 	vldr	s14, [r3, #16]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003718:	dc00      	bgt.n	800371c <Regulator_Process+0x124>
}
 800371a:	e003      	b.n	8003724 <Regulator_Process+0x12c>
		Reg->Out = Reg->UpLimit;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1a      	ldr	r2, [r3, #32]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	611a      	str	r2, [r3, #16]
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800372e:	bf00      	nop
 8003730:	d2f1a9fc 	.word	0xd2f1a9fc
 8003734:	3f10624d 	.word	0x3f10624d

08003738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_MspInit+0x4c>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	4a0f      	ldr	r2, [pc, #60]	; (8003784 <HAL_MspInit+0x4c>)
 8003748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800374c:	6453      	str	r3, [r2, #68]	; 0x44
 800374e:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <HAL_MspInit+0x4c>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	603b      	str	r3, [r7, #0]
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_MspInit+0x4c>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	4a08      	ldr	r2, [pc, #32]	; (8003784 <HAL_MspInit+0x4c>)
 8003764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003768:	6413      	str	r3, [r2, #64]	; 0x40
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_MspInit+0x4c>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800

08003788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800378c:	e7fe      	b.n	800378c <NMI_Handler+0x4>

0800378e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003792:	e7fe      	b.n	8003792 <HardFault_Handler+0x4>

08003794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003798:	e7fe      	b.n	8003798 <MemManage_Handler+0x4>

0800379a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800379e:	e7fe      	b.n	800379e <BusFault_Handler+0x4>

080037a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037a4:	e7fe      	b.n	80037a4 <UsageFault_Handler+0x4>

080037a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037c2:	b480      	push	{r7}
 80037c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037d4:	f000 ff50 	bl	8004678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}

080037dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037e0:	4802      	ldr	r0, [pc, #8]	; (80037ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80037e2:	f003 f82a 	bl	800683a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	200004c4 	.word	0x200004c4

080037f0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim1,TIM_IT_CC2)){
 80037f4:	4b41      	ldr	r3, [pc, #260]	; (80038fc <TIM1_CC_IRQHandler+0x10c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d123      	bne.n	800384a <TIM1_CC_IRQHandler+0x5a>
		__HAL_TIM_DISABLE(&htim2);
 8003802:	4b3f      	ldr	r3, [pc, #252]	; (8003900 <TIM1_CC_IRQHandler+0x110>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	f241 1311 	movw	r3, #4369	; 0x1111
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <TIM1_CC_IRQHandler+0x42>
 8003812:	4b3b      	ldr	r3, [pc, #236]	; (8003900 <TIM1_CC_IRQHandler+0x110>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a1a      	ldr	r2, [r3, #32]
 8003818:	f240 4344 	movw	r3, #1092	; 0x444
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d107      	bne.n	8003832 <TIM1_CC_IRQHandler+0x42>
 8003822:	4b37      	ldr	r3, [pc, #220]	; (8003900 <TIM1_CC_IRQHandler+0x110>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b35      	ldr	r3, [pc, #212]	; (8003900 <TIM1_CC_IRQHandler+0x110>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
		TIM2->CNT = 0;
 8003832:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003836:	2200      	movs	r2, #0
 8003838:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE(&htim2);
 800383a:	4b31      	ldr	r3, [pc, #196]	; (8003900 <TIM1_CC_IRQHandler+0x110>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b2f      	ldr	r3, [pc, #188]	; (8003900 <TIM1_CC_IRQHandler+0x110>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
	}

	if(__HAL_TIM_GET_FLAG(&htim1,TIM_IT_CC3)){
 800384a:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <TIM1_CC_IRQHandler+0x10c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b08      	cmp	r3, #8
 8003856:	d122      	bne.n	800389e <TIM1_CC_IRQHandler+0xae>
		__HAL_TIM_DISABLE(&htim3);
 8003858:	4b2a      	ldr	r3, [pc, #168]	; (8003904 <TIM1_CC_IRQHandler+0x114>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6a1a      	ldr	r2, [r3, #32]
 800385e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10f      	bne.n	8003888 <TIM1_CC_IRQHandler+0x98>
 8003868:	4b26      	ldr	r3, [pc, #152]	; (8003904 <TIM1_CC_IRQHandler+0x114>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a1a      	ldr	r2, [r3, #32]
 800386e:	f240 4344 	movw	r3, #1092	; 0x444
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d107      	bne.n	8003888 <TIM1_CC_IRQHandler+0x98>
 8003878:	4b22      	ldr	r3, [pc, #136]	; (8003904 <TIM1_CC_IRQHandler+0x114>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b21      	ldr	r3, [pc, #132]	; (8003904 <TIM1_CC_IRQHandler+0x114>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]
		TIM3->CNT = 0;
 8003888:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <TIM1_CC_IRQHandler+0x118>)
 800388a:	2200      	movs	r2, #0
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE(&htim3);
 800388e:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <TIM1_CC_IRQHandler+0x114>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <TIM1_CC_IRQHandler+0x114>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
	}

	if(__HAL_TIM_GET_FLAG(&htim1,TIM_IT_CC4)){
 800389e:	4b17      	ldr	r3, [pc, #92]	; (80038fc <TIM1_CC_IRQHandler+0x10c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d122      	bne.n	80038f2 <TIM1_CC_IRQHandler+0x102>
		__HAL_TIM_DISABLE(&htim9);
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <TIM1_CC_IRQHandler+0x11c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6a1a      	ldr	r2, [r3, #32]
 80038b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10f      	bne.n	80038dc <TIM1_CC_IRQHandler+0xec>
 80038bc:	4b13      	ldr	r3, [pc, #76]	; (800390c <TIM1_CC_IRQHandler+0x11c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	f240 4344 	movw	r3, #1092	; 0x444
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d107      	bne.n	80038dc <TIM1_CC_IRQHandler+0xec>
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <TIM1_CC_IRQHandler+0x11c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b0e      	ldr	r3, [pc, #56]	; (800390c <TIM1_CC_IRQHandler+0x11c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
		TIM9->CNT = 0;
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <TIM1_CC_IRQHandler+0x120>)
 80038de:	2200      	movs	r2, #0
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE(&htim9);
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <TIM1_CC_IRQHandler+0x11c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <TIM1_CC_IRQHandler+0x11c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038f2:	4802      	ldr	r0, [pc, #8]	; (80038fc <TIM1_CC_IRQHandler+0x10c>)
 80038f4:	f002 ffa1 	bl	800683a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200004c4 	.word	0x200004c4
 8003900:	2000050c 	.word	0x2000050c
 8003904:	20000554 	.word	0x20000554
 8003908:	40000400 	.word	0x40000400
 800390c:	2000062c 	.word	0x2000062c
 8003910:	40014000 	.word	0x40014000

08003914 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003918:	4802      	ldr	r0, [pc, #8]	; (8003924 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800391a:	f002 ff8e 	bl	800683a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	200005e4 	.word	0x200005e4

08003928 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim8,TIM_IT_CC2)){
 800392c:	4b17      	ldr	r3, [pc, #92]	; (800398c <TIM8_CC_IRQHandler+0x64>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b04      	cmp	r3, #4
 8003938:	d122      	bne.n	8003980 <TIM8_CC_IRQHandler+0x58>
		__HAL_TIM_DISABLE(&htim12);
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <TIM8_CC_IRQHandler+0x68>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a1a      	ldr	r2, [r3, #32]
 8003940:	f241 1311 	movw	r3, #4369	; 0x1111
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10f      	bne.n	800396a <TIM8_CC_IRQHandler+0x42>
 800394a:	4b11      	ldr	r3, [pc, #68]	; (8003990 <TIM8_CC_IRQHandler+0x68>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a1a      	ldr	r2, [r3, #32]
 8003950:	f240 4344 	movw	r3, #1092	; 0x444
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d107      	bne.n	800396a <TIM8_CC_IRQHandler+0x42>
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <TIM8_CC_IRQHandler+0x68>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <TIM8_CC_IRQHandler+0x68>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0201 	bic.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]
		TIM12->CNT = 0;
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <TIM8_CC_IRQHandler+0x6c>)
 800396c:	2200      	movs	r2, #0
 800396e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE(&htim12);
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <TIM8_CC_IRQHandler+0x68>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <TIM8_CC_IRQHandler+0x68>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003980:	4802      	ldr	r0, [pc, #8]	; (800398c <TIM8_CC_IRQHandler+0x64>)
 8003982:	f002 ff5a 	bl	800683a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	200005e4 	.word	0x200005e4
 8003990:	20000674 	.word	0x20000674
 8003994:	40001800 	.word	0x40001800

08003998 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	ModbusRTU_Handler();
 800399c:	f7fd fca2 	bl	80012e4 <ModbusRTU_Handler>
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80039a0:	4802      	ldr	r0, [pc, #8]	; (80039ac <UART5_IRQHandler+0x14>)
 80039a2:	f004 f899 	bl	8007ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200006bc 	.word	0x200006bc

080039b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039b4:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <SystemInit+0x28>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <SystemInit+0x28>)
 80039bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <SystemInit+0x28>)
 80039c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039ca:	609a      	str	r2, [r3, #8]
#endif
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b096      	sub	sp, #88	; 0x58
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	609a      	str	r2, [r3, #8]
 80039ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	611a      	str	r2, [r3, #16]
 8003a0a:	615a      	str	r2, [r3, #20]
 8003a0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	2220      	movs	r2, #32
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 ff73 	bl	8008900 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a1a:	4b3e      	ldr	r3, [pc, #248]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003a1c:	4a3e      	ldr	r2, [pc, #248]	; (8003b18 <MX_TIM1_Init+0x13c>)
 8003a1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8003a20:	4b3c      	ldr	r3, [pc, #240]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003a22:	2203      	movs	r2, #3
 8003a24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a26:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400-1;
 8003a2c:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003a2e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003a32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a34:	4b37      	ldr	r3, [pc, #220]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a40:	4b34      	ldr	r3, [pc, #208]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a46:	4833      	ldr	r0, [pc, #204]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003a48:	f002 fc54 	bl	80062f4 <HAL_TIM_Base_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003a52:	f7ff fc51 	bl	80032f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a60:	4619      	mov	r1, r3
 8003a62:	482c      	ldr	r0, [pc, #176]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003a64:	f003 f910 	bl	8006c88 <HAL_TIM_ConfigClockSource>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003a6e:	f7ff fc43 	bl	80032f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a72:	4828      	ldr	r0, [pc, #160]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003a74:	f002 fe88 	bl	8006788 <HAL_TIM_PWM_Init>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003a7e:	f7ff fc3b 	bl	80032f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003a82:	2310      	movs	r3, #16
 8003a84:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4820      	ldr	r0, [pc, #128]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003a92:	f003 fdcb 	bl	800762c <HAL_TIMEx_MasterConfigSynchronization>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003a9c:	f7ff fc2c 	bl	80032f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aa0:	2360      	movs	r3, #96	; 0x60
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003aac:	2300      	movs	r3, #0
 8003aae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4813      	ldr	r0, [pc, #76]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003ac6:	f003 f81d 	bl	8006b04 <HAL_TIM_PWM_ConfigChannel>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003ad0:	f7ff fc12 	bl	80032f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003af2:	1d3b      	adds	r3, r7, #4
 8003af4:	4619      	mov	r1, r3
 8003af6:	4807      	ldr	r0, [pc, #28]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003af8:	f003 fe14 	bl	8007724 <HAL_TIMEx_ConfigBreakDeadTime>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003b02:	f7ff fbf9 	bl	80032f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b06:	4803      	ldr	r0, [pc, #12]	; (8003b14 <MX_TIM1_Init+0x138>)
 8003b08:	f000 fba4 	bl	8004254 <HAL_TIM_MspPostInit>

}
 8003b0c:	bf00      	nop
 8003b0e:	3758      	adds	r7, #88	; 0x58
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	200004c4 	.word	0x200004c4
 8003b18:	40010000 	.word	0x40010000

08003b1c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08e      	sub	sp, #56	; 0x38
 8003b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b30:	f107 0320 	add.w	r3, r7, #32
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b3a:	1d3b      	adds	r3, r7, #4
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
 8003b48:	615a      	str	r2, [r3, #20]
 8003b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b4c:	4b2d      	ldr	r3, [pc, #180]	; (8003c04 <MX_TIM2_Init+0xe8>)
 8003b4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8003b54:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <MX_TIM2_Init+0xe8>)
 8003b56:	2203      	movs	r2, #3
 8003b58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b5a:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <MX_TIM2_Init+0xe8>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8003b60:	4b28      	ldr	r3, [pc, #160]	; (8003c04 <MX_TIM2_Init+0xe8>)
 8003b62:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003b66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b68:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <MX_TIM2_Init+0xe8>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b6e:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <MX_TIM2_Init+0xe8>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b74:	4823      	ldr	r0, [pc, #140]	; (8003c04 <MX_TIM2_Init+0xe8>)
 8003b76:	f002 fbbd 	bl	80062f4 <HAL_TIM_Base_Init>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003b80:	f7ff fbba 	bl	80032f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b8e:	4619      	mov	r1, r3
 8003b90:	481c      	ldr	r0, [pc, #112]	; (8003c04 <MX_TIM2_Init+0xe8>)
 8003b92:	f003 f879 	bl	8006c88 <HAL_TIM_ConfigClockSource>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003b9c:	f7ff fbac 	bl	80032f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003ba0:	4818      	ldr	r0, [pc, #96]	; (8003c04 <MX_TIM2_Init+0xe8>)
 8003ba2:	f002 fdf1 	bl	8006788 <HAL_TIM_PWM_Init>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003bac:	f7ff fba4 	bl	80032f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bb8:	f107 0320 	add.w	r3, r7, #32
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4811      	ldr	r0, [pc, #68]	; (8003c04 <MX_TIM2_Init+0xe8>)
 8003bc0:	f003 fd34 	bl	800762c <HAL_TIMEx_MasterConfigSynchronization>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003bca:	f7ff fb95 	bl	80032f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bce:	2360      	movs	r3, #96	; 0x60
 8003bd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bde:	1d3b      	adds	r3, r7, #4
 8003be0:	2200      	movs	r2, #0
 8003be2:	4619      	mov	r1, r3
 8003be4:	4807      	ldr	r0, [pc, #28]	; (8003c04 <MX_TIM2_Init+0xe8>)
 8003be6:	f002 ff8d 	bl	8006b04 <HAL_TIM_PWM_ConfigChannel>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003bf0:	f7ff fb82 	bl	80032f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003bf4:	4803      	ldr	r0, [pc, #12]	; (8003c04 <MX_TIM2_Init+0xe8>)
 8003bf6:	f000 fb2d 	bl	8004254 <HAL_TIM_MspPostInit>

}
 8003bfa:	bf00      	nop
 8003bfc:	3738      	adds	r7, #56	; 0x38
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	2000050c 	.word	0x2000050c

08003c08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08e      	sub	sp, #56	; 0x38
 8003c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	605a      	str	r2, [r3, #4]
 8003c18:	609a      	str	r2, [r3, #8]
 8003c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c1c:	f107 0320 	add.w	r3, r7, #32
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c26:	1d3b      	adds	r3, r7, #4
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	611a      	str	r2, [r3, #16]
 8003c34:	615a      	str	r2, [r3, #20]
 8003c36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c38:	4b2c      	ldr	r3, [pc, #176]	; (8003cec <MX_TIM3_Init+0xe4>)
 8003c3a:	4a2d      	ldr	r2, [pc, #180]	; (8003cf0 <MX_TIM3_Init+0xe8>)
 8003c3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8003c3e:	4b2b      	ldr	r3, [pc, #172]	; (8003cec <MX_TIM3_Init+0xe4>)
 8003c40:	2203      	movs	r2, #3
 8003c42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c44:	4b29      	ldr	r3, [pc, #164]	; (8003cec <MX_TIM3_Init+0xe4>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 8003c4a:	4b28      	ldr	r3, [pc, #160]	; (8003cec <MX_TIM3_Init+0xe4>)
 8003c4c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003c50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c52:	4b26      	ldr	r3, [pc, #152]	; (8003cec <MX_TIM3_Init+0xe4>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c58:	4b24      	ldr	r3, [pc, #144]	; (8003cec <MX_TIM3_Init+0xe4>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c5e:	4823      	ldr	r0, [pc, #140]	; (8003cec <MX_TIM3_Init+0xe4>)
 8003c60:	f002 fb48 	bl	80062f4 <HAL_TIM_Base_Init>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003c6a:	f7ff fb45 	bl	80032f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c78:	4619      	mov	r1, r3
 8003c7a:	481c      	ldr	r0, [pc, #112]	; (8003cec <MX_TIM3_Init+0xe4>)
 8003c7c:	f003 f804 	bl	8006c88 <HAL_TIM_ConfigClockSource>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003c86:	f7ff fb37 	bl	80032f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003c8a:	4818      	ldr	r0, [pc, #96]	; (8003cec <MX_TIM3_Init+0xe4>)
 8003c8c:	f002 fd7c 	bl	8006788 <HAL_TIM_PWM_Init>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003c96:	f7ff fb2f 	bl	80032f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ca2:	f107 0320 	add.w	r3, r7, #32
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4810      	ldr	r0, [pc, #64]	; (8003cec <MX_TIM3_Init+0xe4>)
 8003caa:	f003 fcbf 	bl	800762c <HAL_TIMEx_MasterConfigSynchronization>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003cb4:	f7ff fb20 	bl	80032f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cb8:	2360      	movs	r3, #96	; 0x60
 8003cba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cc8:	1d3b      	adds	r3, r7, #4
 8003cca:	2200      	movs	r2, #0
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4807      	ldr	r0, [pc, #28]	; (8003cec <MX_TIM3_Init+0xe4>)
 8003cd0:	f002 ff18 	bl	8006b04 <HAL_TIM_PWM_ConfigChannel>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003cda:	f7ff fb0d 	bl	80032f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003cde:	4803      	ldr	r0, [pc, #12]	; (8003cec <MX_TIM3_Init+0xe4>)
 8003ce0:	f000 fab8 	bl	8004254 <HAL_TIM_MspPostInit>

}
 8003ce4:	bf00      	nop
 8003ce6:	3738      	adds	r7, #56	; 0x38
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000554 	.word	0x20000554
 8003cf0:	40000400 	.word	0x40000400

08003cf4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b092      	sub	sp, #72	; 0x48
 8003cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cfa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	609a      	str	r2, [r3, #8]
 8003d06:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	60da      	str	r2, [r3, #12]
 8003d16:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d18:	f107 031c 	add.w	r3, r7, #28
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d22:	463b      	mov	r3, r7
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	611a      	str	r2, [r3, #16]
 8003d30:	615a      	str	r2, [r3, #20]
 8003d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d34:	4b32      	ldr	r3, [pc, #200]	; (8003e00 <MX_TIM4_Init+0x10c>)
 8003d36:	4a33      	ldr	r2, [pc, #204]	; (8003e04 <MX_TIM4_Init+0x110>)
 8003d38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4-1;
 8003d3a:	4b31      	ldr	r3, [pc, #196]	; (8003e00 <MX_TIM4_Init+0x10c>)
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d40:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <MX_TIM4_Init+0x10c>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400-1;
 8003d46:	4b2e      	ldr	r3, [pc, #184]	; (8003e00 <MX_TIM4_Init+0x10c>)
 8003d48:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003d4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d4e:	4b2c      	ldr	r3, [pc, #176]	; (8003e00 <MX_TIM4_Init+0x10c>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d54:	4b2a      	ldr	r3, [pc, #168]	; (8003e00 <MX_TIM4_Init+0x10c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003d5a:	4829      	ldr	r0, [pc, #164]	; (8003e00 <MX_TIM4_Init+0x10c>)
 8003d5c:	f002 faca 	bl	80062f4 <HAL_TIM_Base_Init>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003d66:	f7ff fac7 	bl	80032f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003d70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d74:	4619      	mov	r1, r3
 8003d76:	4822      	ldr	r0, [pc, #136]	; (8003e00 <MX_TIM4_Init+0x10c>)
 8003d78:	f002 ff86 	bl	8006c88 <HAL_TIM_ConfigClockSource>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003d82:	f7ff fab9 	bl	80032f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003d86:	481e      	ldr	r0, [pc, #120]	; (8003e00 <MX_TIM4_Init+0x10c>)
 8003d88:	f002 fbdc 	bl	8006544 <HAL_TIM_OC_Init>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8003d92:	f7ff fab1 	bl	80032f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8003d96:	2305      	movs	r3, #5
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8003d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003da2:	4619      	mov	r1, r3
 8003da4:	4816      	ldr	r0, [pc, #88]	; (8003e00 <MX_TIM4_Init+0x10c>)
 8003da6:	f003 f836 	bl	8006e16 <HAL_TIM_SlaveConfigSynchro>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8003db0:	f7ff faa2 	bl	80032f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003dbc:	f107 031c 	add.w	r3, r7, #28
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	480f      	ldr	r0, [pc, #60]	; (8003e00 <MX_TIM4_Init+0x10c>)
 8003dc4:	f003 fc32 	bl	800762c <HAL_TIMEx_MasterConfigSynchronization>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8003dce:	f7ff fa93 	bl	80032f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003dd2:	2330      	movs	r3, #48	; 0x30
 8003dd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003de2:	463b      	mov	r3, r7
 8003de4:	220c      	movs	r2, #12
 8003de6:	4619      	mov	r1, r3
 8003de8:	4805      	ldr	r0, [pc, #20]	; (8003e00 <MX_TIM4_Init+0x10c>)
 8003dea:	f002 fe2f 	bl	8006a4c <HAL_TIM_OC_ConfigChannel>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8003df4:	f7ff fa80 	bl	80032f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003df8:	bf00      	nop
 8003dfa:	3748      	adds	r7, #72	; 0x48
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	2000059c 	.word	0x2000059c
 8003e04:	40000800 	.word	0x40000800

08003e08 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b096      	sub	sp, #88	; 0x58
 8003e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	609a      	str	r2, [r3, #8]
 8003e32:	60da      	str	r2, [r3, #12]
 8003e34:	611a      	str	r2, [r3, #16]
 8003e36:	615a      	str	r2, [r3, #20]
 8003e38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f004 fd5d 	bl	8008900 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003e46:	4b3e      	ldr	r3, [pc, #248]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003e48:	4a3e      	ldr	r2, [pc, #248]	; (8003f44 <MX_TIM8_Init+0x13c>)
 8003e4a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4-1;
 8003e4c:	4b3c      	ldr	r3, [pc, #240]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003e4e:	2203      	movs	r2, #3
 8003e50:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e52:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4200-1;
 8003e58:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003e5a:	f241 0267 	movw	r2, #4199	; 0x1067
 8003e5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e60:	4b37      	ldr	r3, [pc, #220]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003e66:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e6c:	4b34      	ldr	r3, [pc, #208]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003e72:	4833      	ldr	r0, [pc, #204]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003e74:	f002 fa3e 	bl	80062f4 <HAL_TIM_Base_Init>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003e7e:	f7ff fa3b 	bl	80032f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003e88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	482c      	ldr	r0, [pc, #176]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003e90:	f002 fefa 	bl	8006c88 <HAL_TIM_ConfigClockSource>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003e9a:	f7ff fa2d 	bl	80032f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003e9e:	4828      	ldr	r0, [pc, #160]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003ea0:	f002 fc72 	bl	8006788 <HAL_TIM_PWM_Init>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003eaa:	f7ff fa25 	bl	80032f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003eb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4820      	ldr	r0, [pc, #128]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003ebe:	f003 fbb5 	bl	800762c <HAL_TIMEx_MasterConfigSynchronization>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003ec8:	f7ff fa16 	bl	80032f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ecc:	2360      	movs	r3, #96	; 0x60
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eec:	2200      	movs	r2, #0
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4813      	ldr	r0, [pc, #76]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003ef2:	f002 fe07 	bl	8006b04 <HAL_TIM_PWM_ConfigChannel>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003efc:	f7ff f9fc 	bl	80032f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f00:	2300      	movs	r3, #0
 8003f02:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f18:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003f1e:	1d3b      	adds	r3, r7, #4
 8003f20:	4619      	mov	r1, r3
 8003f22:	4807      	ldr	r0, [pc, #28]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003f24:	f003 fbfe 	bl	8007724 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8003f2e:	f7ff f9e3 	bl	80032f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003f32:	4803      	ldr	r0, [pc, #12]	; (8003f40 <MX_TIM8_Init+0x138>)
 8003f34:	f000 f98e 	bl	8004254 <HAL_TIM_MspPostInit>

}
 8003f38:	bf00      	nop
 8003f3a:	3758      	adds	r7, #88	; 0x58
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	200005e4 	.word	0x200005e4
 8003f44:	40010400 	.word	0x40010400

08003f48 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	; 0x30
 8003f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f4e:	f107 0320 	add.w	r3, r7, #32
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f5c:	1d3b      	adds	r3, r7, #4
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	60da      	str	r2, [r3, #12]
 8003f68:	611a      	str	r2, [r3, #16]
 8003f6a:	615a      	str	r2, [r3, #20]
 8003f6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <MX_TIM9_Init+0xbc>)
 8003f70:	4a25      	ldr	r2, [pc, #148]	; (8004008 <MX_TIM9_Init+0xc0>)
 8003f72:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 4-1;
 8003f74:	4b23      	ldr	r3, [pc, #140]	; (8004004 <MX_TIM9_Init+0xbc>)
 8003f76:	2203      	movs	r2, #3
 8003f78:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <MX_TIM9_Init+0xbc>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 8400-1;
 8003f80:	4b20      	ldr	r3, [pc, #128]	; (8004004 <MX_TIM9_Init+0xbc>)
 8003f82:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003f86:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f88:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <MX_TIM9_Init+0xbc>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f8e:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <MX_TIM9_Init+0xbc>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003f94:	481b      	ldr	r0, [pc, #108]	; (8004004 <MX_TIM9_Init+0xbc>)
 8003f96:	f002 f9ad 	bl	80062f4 <HAL_TIM_Base_Init>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8003fa0:	f7ff f9aa 	bl	80032f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003faa:	f107 0320 	add.w	r3, r7, #32
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4814      	ldr	r0, [pc, #80]	; (8004004 <MX_TIM9_Init+0xbc>)
 8003fb2:	f002 fe69 	bl	8006c88 <HAL_TIM_ConfigClockSource>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8003fbc:	f7ff f99c 	bl	80032f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003fc0:	4810      	ldr	r0, [pc, #64]	; (8004004 <MX_TIM9_Init+0xbc>)
 8003fc2:	f002 fbe1 	bl	8006788 <HAL_TIM_PWM_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8003fcc:	f7ff f994 	bl	80032f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fd0:	2360      	movs	r3, #96	; 0x60
 8003fd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4807      	ldr	r0, [pc, #28]	; (8004004 <MX_TIM9_Init+0xbc>)
 8003fe8:	f002 fd8c 	bl	8006b04 <HAL_TIM_PWM_ConfigChannel>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8003ff2:	f7ff f981 	bl	80032f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003ff6:	4803      	ldr	r0, [pc, #12]	; (8004004 <MX_TIM9_Init+0xbc>)
 8003ff8:	f000 f92c 	bl	8004254 <HAL_TIM_MspPostInit>

}
 8003ffc:	bf00      	nop
 8003ffe:	3730      	adds	r7, #48	; 0x30
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	2000062c 	.word	0x2000062c
 8004008:	40014000 	.word	0x40014000

0800400c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08c      	sub	sp, #48	; 0x30
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004012:	f107 0320 	add.w	r3, r7, #32
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	609a      	str	r2, [r3, #8]
 800401e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	609a      	str	r2, [r3, #8]
 800402a:	60da      	str	r2, [r3, #12]
 800402c:	611a      	str	r2, [r3, #16]
 800402e:	615a      	str	r2, [r3, #20]
 8004030:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004032:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <MX_TIM12_Init+0xbc>)
 8004034:	4a25      	ldr	r2, [pc, #148]	; (80040cc <MX_TIM12_Init+0xc0>)
 8004036:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 4-1;
 8004038:	4b23      	ldr	r3, [pc, #140]	; (80040c8 <MX_TIM12_Init+0xbc>)
 800403a:	2203      	movs	r2, #3
 800403c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403e:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <MX_TIM12_Init+0xbc>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4200-1;
 8004044:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <MX_TIM12_Init+0xbc>)
 8004046:	f241 0267 	movw	r2, #4199	; 0x1067
 800404a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800404c:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <MX_TIM12_Init+0xbc>)
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004052:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <MX_TIM12_Init+0xbc>)
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004058:	481b      	ldr	r0, [pc, #108]	; (80040c8 <MX_TIM12_Init+0xbc>)
 800405a:	f002 f94b 	bl	80062f4 <HAL_TIM_Base_Init>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8004064:	f7ff f948 	bl	80032f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800406c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800406e:	f107 0320 	add.w	r3, r7, #32
 8004072:	4619      	mov	r1, r3
 8004074:	4814      	ldr	r0, [pc, #80]	; (80040c8 <MX_TIM12_Init+0xbc>)
 8004076:	f002 fe07 	bl	8006c88 <HAL_TIM_ConfigClockSource>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8004080:	f7ff f93a 	bl	80032f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004084:	4810      	ldr	r0, [pc, #64]	; (80040c8 <MX_TIM12_Init+0xbc>)
 8004086:	f002 fb7f 	bl	8006788 <HAL_TIM_PWM_Init>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8004090:	f7ff f932 	bl	80032f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004094:	2360      	movs	r3, #96	; 0x60
 8004096:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040a4:	1d3b      	adds	r3, r7, #4
 80040a6:	2200      	movs	r2, #0
 80040a8:	4619      	mov	r1, r3
 80040aa:	4807      	ldr	r0, [pc, #28]	; (80040c8 <MX_TIM12_Init+0xbc>)
 80040ac:	f002 fd2a 	bl	8006b04 <HAL_TIM_PWM_ConfigChannel>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80040b6:	f7ff f91f 	bl	80032f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80040ba:	4803      	ldr	r0, [pc, #12]	; (80040c8 <MX_TIM12_Init+0xbc>)
 80040bc:	f000 f8ca 	bl	8004254 <HAL_TIM_MspPostInit>

}
 80040c0:	bf00      	nop
 80040c2:	3730      	adds	r7, #48	; 0x30
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000674 	.word	0x20000674
 80040cc:	40001800 	.word	0x40001800

080040d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	; 0x28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a56      	ldr	r2, [pc, #344]	; (8004238 <HAL_TIM_Base_MspInit+0x168>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d11e      	bne.n	8004120 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
 80040e6:	4b55      	ldr	r3, [pc, #340]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	4a54      	ldr	r2, [pc, #336]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6453      	str	r3, [r2, #68]	; 0x44
 80040f2:	4b52      	ldr	r3, [pc, #328]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80040fe:	2200      	movs	r2, #0
 8004100:	2101      	movs	r1, #1
 8004102:	2019      	movs	r0, #25
 8004104:	f000 ffe1 	bl	80050ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004108:	2019      	movs	r0, #25
 800410a:	f000 fffa 	bl	8005102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800410e:	2200      	movs	r2, #0
 8004110:	2100      	movs	r1, #0
 8004112:	201b      	movs	r0, #27
 8004114:	f000 ffd9 	bl	80050ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004118:	201b      	movs	r0, #27
 800411a:	f000 fff2 	bl	8005102 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800411e:	e086      	b.n	800422e <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004128:	d10e      	bne.n	8004148 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	623b      	str	r3, [r7, #32]
 800412e:	4b43      	ldr	r3, [pc, #268]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	4a42      	ldr	r2, [pc, #264]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6413      	str	r3, [r2, #64]	; 0x40
 800413a:	4b40      	ldr	r3, [pc, #256]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	623b      	str	r3, [r7, #32]
 8004144:	6a3b      	ldr	r3, [r7, #32]
}
 8004146:	e072      	b.n	800422e <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM3)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a3c      	ldr	r2, [pc, #240]	; (8004240 <HAL_TIM_Base_MspInit+0x170>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10e      	bne.n	8004170 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	4b39      	ldr	r3, [pc, #228]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	4a38      	ldr	r2, [pc, #224]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	6413      	str	r3, [r2, #64]	; 0x40
 8004162:	4b36      	ldr	r3, [pc, #216]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	69fb      	ldr	r3, [r7, #28]
}
 800416e:	e05e      	b.n	800422e <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM4)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a33      	ldr	r2, [pc, #204]	; (8004244 <HAL_TIM_Base_MspInit+0x174>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10e      	bne.n	8004198 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	4b2f      	ldr	r3, [pc, #188]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a2e      	ldr	r2, [pc, #184]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 8004184:	f043 0304 	orr.w	r3, r3, #4
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b2c      	ldr	r3, [pc, #176]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	69bb      	ldr	r3, [r7, #24]
}
 8004196:	e04a      	b.n	800422e <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM8)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2a      	ldr	r2, [pc, #168]	; (8004248 <HAL_TIM_Base_MspInit+0x178>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d11e      	bne.n	80041e0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	4b25      	ldr	r3, [pc, #148]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	4a24      	ldr	r2, [pc, #144]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 80041ac:	f043 0302 	orr.w	r3, r3, #2
 80041b0:	6453      	str	r3, [r2, #68]	; 0x44
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 80041be:	2200      	movs	r2, #0
 80041c0:	2101      	movs	r1, #1
 80041c2:	202c      	movs	r0, #44	; 0x2c
 80041c4:	f000 ff81 	bl	80050ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80041c8:	202c      	movs	r0, #44	; 0x2c
 80041ca:	f000 ff9a 	bl	8005102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80041ce:	2200      	movs	r2, #0
 80041d0:	2100      	movs	r1, #0
 80041d2:	202e      	movs	r0, #46	; 0x2e
 80041d4:	f000 ff79 	bl	80050ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80041d8:	202e      	movs	r0, #46	; 0x2e
 80041da:	f000 ff92 	bl	8005102 <HAL_NVIC_EnableIRQ>
}
 80041de:	e026      	b.n	800422e <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM9)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a19      	ldr	r2, [pc, #100]	; (800424c <HAL_TIM_Base_MspInit+0x17c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10e      	bne.n	8004208 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	4b13      	ldr	r3, [pc, #76]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	4a12      	ldr	r2, [pc, #72]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f8:	6453      	str	r3, [r2, #68]	; 0x44
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]
}
 8004206:	e012      	b.n	800422e <HAL_TIM_Base_MspInit+0x15e>
  else if(tim_baseHandle->Instance==TIM12)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a10      	ldr	r2, [pc, #64]	; (8004250 <HAL_TIM_Base_MspInit+0x180>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10d      	bne.n	800422e <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	4a08      	ldr	r2, [pc, #32]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 800421c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004220:	6413      	str	r3, [r2, #64]	; 0x40
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_TIM_Base_MspInit+0x16c>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
}
 800422e:	bf00      	nop
 8004230:	3728      	adds	r7, #40	; 0x28
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40010000 	.word	0x40010000
 800423c:	40023800 	.word	0x40023800
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800
 8004248:	40010400 	.word	0x40010400
 800424c:	40014000 	.word	0x40014000
 8004250:	40001800 	.word	0x40001800

08004254 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08e      	sub	sp, #56	; 0x38
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800425c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	609a      	str	r2, [r3, #8]
 8004268:	60da      	str	r2, [r3, #12]
 800426a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a6d      	ldr	r2, [pc, #436]	; (8004428 <HAL_TIM_MspPostInit+0x1d4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d11f      	bne.n	80042b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	623b      	str	r3, [r7, #32]
 800427a:	4b6c      	ldr	r3, [pc, #432]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	4a6b      	ldr	r2, [pc, #428]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6313      	str	r3, [r2, #48]	; 0x30
 8004286:	4b69      	ldr	r3, [pc, #420]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004298:	2302      	movs	r3, #2
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429c:	2300      	movs	r3, #0
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a0:	2300      	movs	r3, #0
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042a4:	2301      	movs	r3, #1
 80042a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ac:	4619      	mov	r1, r3
 80042ae:	4860      	ldr	r0, [pc, #384]	; (8004430 <HAL_TIM_MspPostInit+0x1dc>)
 80042b0:	f001 f9ba 	bl	8005628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80042b4:	e0b4      	b.n	8004420 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM2)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042be:	d11f      	bne.n	8004300 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c0:	2300      	movs	r3, #0
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	4b59      	ldr	r3, [pc, #356]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	4a58      	ldr	r2, [pc, #352]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	6313      	str	r3, [r2, #48]	; 0x30
 80042d0:	4b56      	ldr	r3, [pc, #344]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80042dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e2:	2302      	movs	r3, #2
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ea:	2300      	movs	r3, #0
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042ee:	2301      	movs	r3, #1
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042f6:	4619      	mov	r1, r3
 80042f8:	484d      	ldr	r0, [pc, #308]	; (8004430 <HAL_TIM_MspPostInit+0x1dc>)
 80042fa:	f001 f995 	bl	8005628 <HAL_GPIO_Init>
}
 80042fe:	e08f      	b.n	8004420 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM3)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a4b      	ldr	r2, [pc, #300]	; (8004434 <HAL_TIM_MspPostInit+0x1e0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d11e      	bne.n	8004348 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	4b47      	ldr	r3, [pc, #284]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	4a46      	ldr	r2, [pc, #280]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6313      	str	r3, [r2, #48]	; 0x30
 800431a:	4b44      	ldr	r3, [pc, #272]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004326:	2340      	movs	r3, #64	; 0x40
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432a:	2302      	movs	r3, #2
 800432c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432e:	2300      	movs	r3, #0
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004332:	2300      	movs	r3, #0
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004336:	2302      	movs	r3, #2
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800433a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800433e:	4619      	mov	r1, r3
 8004340:	483b      	ldr	r0, [pc, #236]	; (8004430 <HAL_TIM_MspPostInit+0x1dc>)
 8004342:	f001 f971 	bl	8005628 <HAL_GPIO_Init>
}
 8004346:	e06b      	b.n	8004420 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM8)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a3a      	ldr	r2, [pc, #232]	; (8004438 <HAL_TIM_MspPostInit+0x1e4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d11e      	bne.n	8004390 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	4b35      	ldr	r3, [pc, #212]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	4a34      	ldr	r2, [pc, #208]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 800435c:	f043 0304 	orr.w	r3, r3, #4
 8004360:	6313      	str	r3, [r2, #48]	; 0x30
 8004362:	4b32      	ldr	r3, [pc, #200]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800436e:	2340      	movs	r3, #64	; 0x40
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004372:	2302      	movs	r3, #2
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004376:	2300      	movs	r3, #0
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437a:	2300      	movs	r3, #0
 800437c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800437e:	2303      	movs	r3, #3
 8004380:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004386:	4619      	mov	r1, r3
 8004388:	482c      	ldr	r0, [pc, #176]	; (800443c <HAL_TIM_MspPostInit+0x1e8>)
 800438a:	f001 f94d 	bl	8005628 <HAL_GPIO_Init>
}
 800438e:	e047      	b.n	8004420 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM9)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a2a      	ldr	r2, [pc, #168]	; (8004440 <HAL_TIM_MspPostInit+0x1ec>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d11e      	bne.n	80043d8 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	4b23      	ldr	r3, [pc, #140]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	4a22      	ldr	r2, [pc, #136]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	6313      	str	r3, [r2, #48]	; 0x30
 80043aa:	4b20      	ldr	r3, [pc, #128]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043b6:	2304      	movs	r3, #4
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ba:	2302      	movs	r3, #2
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c2:	2300      	movs	r3, #0
 80043c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80043c6:	2303      	movs	r3, #3
 80043c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043ce:	4619      	mov	r1, r3
 80043d0:	4817      	ldr	r0, [pc, #92]	; (8004430 <HAL_TIM_MspPostInit+0x1dc>)
 80043d2:	f001 f929 	bl	8005628 <HAL_GPIO_Init>
}
 80043d6:	e023      	b.n	8004420 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM12)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a19      	ldr	r2, [pc, #100]	; (8004444 <HAL_TIM_MspPostInit+0x1f0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d11e      	bne.n	8004420 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	4b11      	ldr	r3, [pc, #68]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	4a10      	ldr	r2, [pc, #64]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 80043ec:	f043 0302 	orr.w	r3, r3, #2
 80043f0:	6313      	str	r3, [r2, #48]	; 0x30
 80043f2:	4b0e      	ldr	r3, [pc, #56]	; (800442c <HAL_TIM_MspPostInit+0x1d8>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80043fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004404:	2302      	movs	r3, #2
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004408:	2300      	movs	r3, #0
 800440a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440c:	2300      	movs	r3, #0
 800440e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004410:	2309      	movs	r3, #9
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004418:	4619      	mov	r1, r3
 800441a:	480b      	ldr	r0, [pc, #44]	; (8004448 <HAL_TIM_MspPostInit+0x1f4>)
 800441c:	f001 f904 	bl	8005628 <HAL_GPIO_Init>
}
 8004420:	bf00      	nop
 8004422:	3738      	adds	r7, #56	; 0x38
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40010000 	.word	0x40010000
 800442c:	40023800 	.word	0x40023800
 8004430:	40020000 	.word	0x40020000
 8004434:	40000400 	.word	0x40000400
 8004438:	40010400 	.word	0x40010400
 800443c:	40020800 	.word	0x40020800
 8004440:	40014000 	.word	0x40014000
 8004444:	40001800 	.word	0x40001800
 8004448:	40020400 	.word	0x40020400

0800444c <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <MX_UART5_Init+0x4c>)
 8004452:	4a12      	ldr	r2, [pc, #72]	; (800449c <MX_UART5_Init+0x50>)
 8004454:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <MX_UART5_Init+0x4c>)
 8004458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800445c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <MX_UART5_Init+0x4c>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <MX_UART5_Init+0x4c>)
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <MX_UART5_Init+0x4c>)
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <MX_UART5_Init+0x4c>)
 8004472:	220c      	movs	r2, #12
 8004474:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <MX_UART5_Init+0x4c>)
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <MX_UART5_Init+0x4c>)
 800447e:	2200      	movs	r2, #0
 8004480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004482:	4805      	ldr	r0, [pc, #20]	; (8004498 <MX_UART5_Init+0x4c>)
 8004484:	f003 f9b4 	bl	80077f0 <HAL_UART_Init>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800448e:	f7fe ff33 	bl	80032f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	200006bc 	.word	0x200006bc
 800449c:	40005000 	.word	0x40005000

080044a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	; 0x28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a8:	f107 0314 	add.w	r3, r7, #20
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2c      	ldr	r2, [pc, #176]	; (8004570 <HAL_UART_MspInit+0xd0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d152      	bne.n	8004568 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <HAL_UART_MspInit+0xd4>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <HAL_UART_MspInit+0xd4>)
 80044cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
 80044d2:	4b28      	ldr	r3, [pc, #160]	; (8004574 <HAL_UART_MspInit+0xd4>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <HAL_UART_MspInit+0xd4>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a23      	ldr	r2, [pc, #140]	; (8004574 <HAL_UART_MspInit+0xd4>)
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b21      	ldr	r3, [pc, #132]	; (8004574 <HAL_UART_MspInit+0xd4>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <HAL_UART_MspInit+0xd4>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	4a1c      	ldr	r2, [pc, #112]	; (8004574 <HAL_UART_MspInit+0xd4>)
 8004504:	f043 0308 	orr.w	r3, r3, #8
 8004508:	6313      	str	r3, [r2, #48]	; 0x30
 800450a:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <HAL_UART_MspInit+0xd4>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800451a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451c:	2302      	movs	r3, #2
 800451e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004520:	2300      	movs	r3, #0
 8004522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004524:	2303      	movs	r3, #3
 8004526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004528:	2308      	movs	r3, #8
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800452c:	f107 0314 	add.w	r3, r7, #20
 8004530:	4619      	mov	r1, r3
 8004532:	4811      	ldr	r0, [pc, #68]	; (8004578 <HAL_UART_MspInit+0xd8>)
 8004534:	f001 f878 	bl	8005628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004538:	2304      	movs	r3, #4
 800453a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453c:	2302      	movs	r3, #2
 800453e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004544:	2303      	movs	r3, #3
 8004546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004548:	2308      	movs	r3, #8
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800454c:	f107 0314 	add.w	r3, r7, #20
 8004550:	4619      	mov	r1, r3
 8004552:	480a      	ldr	r0, [pc, #40]	; (800457c <HAL_UART_MspInit+0xdc>)
 8004554:	f001 f868 	bl	8005628 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 4, 0);
 8004558:	2200      	movs	r2, #0
 800455a:	2104      	movs	r1, #4
 800455c:	2035      	movs	r0, #53	; 0x35
 800455e:	f000 fdb4 	bl	80050ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004562:	2035      	movs	r0, #53	; 0x35
 8004564:	f000 fdcd 	bl	8005102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8004568:	bf00      	nop
 800456a:	3728      	adds	r7, #40	; 0x28
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40005000 	.word	0x40005000
 8004574:	40023800 	.word	0x40023800
 8004578:	40020800 	.word	0x40020800
 800457c:	40020c00 	.word	0x40020c00

08004580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004584:	480d      	ldr	r0, [pc, #52]	; (80045bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004586:	490e      	ldr	r1, [pc, #56]	; (80045c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004588:	4a0e      	ldr	r2, [pc, #56]	; (80045c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800458a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800458c:	e002      	b.n	8004594 <LoopCopyDataInit>

0800458e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800458e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004592:	3304      	adds	r3, #4

08004594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004598:	d3f9      	bcc.n	800458e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800459a:	4a0b      	ldr	r2, [pc, #44]	; (80045c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800459c:	4c0b      	ldr	r4, [pc, #44]	; (80045cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800459e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045a0:	e001      	b.n	80045a6 <LoopFillZerobss>

080045a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045a4:	3204      	adds	r2, #4

080045a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045a8:	d3fb      	bcc.n	80045a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045aa:	f7ff fa01 	bl	80039b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ae:	f004 f9af 	bl	8008910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045b2:	f7fd fdbb 	bl	800212c <main>
  bx  lr    
 80045b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80045b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80045bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045c0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80045c4:	08008ba0 	.word	0x08008ba0
  ldr r2, =_sbss
 80045c8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80045cc:	20000704 	.word	0x20000704

080045d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045d0:	e7fe      	b.n	80045d0 <ADC_IRQHandler>
	...

080045d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045d8:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <HAL_Init+0x40>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a0d      	ldr	r2, [pc, #52]	; (8004614 <HAL_Init+0x40>)
 80045de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_Init+0x40>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a0a      	ldr	r2, [pc, #40]	; (8004614 <HAL_Init+0x40>)
 80045ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <HAL_Init+0x40>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a07      	ldr	r2, [pc, #28]	; (8004614 <HAL_Init+0x40>)
 80045f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045fc:	2003      	movs	r0, #3
 80045fe:	f000 fd59 	bl	80050b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004602:	2005      	movs	r0, #5
 8004604:	f000 f808 	bl	8004618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004608:	f7ff f896 	bl	8003738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023c00 	.word	0x40023c00

08004618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004620:	4b12      	ldr	r3, [pc, #72]	; (800466c <HAL_InitTick+0x54>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <HAL_InitTick+0x58>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	4619      	mov	r1, r3
 800462a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800462e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fd71 	bl	800511e <HAL_SYSTICK_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e00e      	b.n	8004664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b0f      	cmp	r3, #15
 800464a:	d80a      	bhi.n	8004662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800464c:	2200      	movs	r2, #0
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	f04f 30ff 	mov.w	r0, #4294967295
 8004654:	f000 fd39 	bl	80050ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004658:	4a06      	ldr	r2, [pc, #24]	; (8004674 <HAL_InitTick+0x5c>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e000      	b.n	8004664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
}
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	2000001c 	.word	0x2000001c
 8004670:	20000024 	.word	0x20000024
 8004674:	20000020 	.word	0x20000020

08004678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800467c:	4b06      	ldr	r3, [pc, #24]	; (8004698 <HAL_IncTick+0x20>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <HAL_IncTick+0x24>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4413      	add	r3, r2
 8004688:	4a04      	ldr	r2, [pc, #16]	; (800469c <HAL_IncTick+0x24>)
 800468a:	6013      	str	r3, [r2, #0]
}
 800468c:	bf00      	nop
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000024 	.word	0x20000024
 800469c:	20000700 	.word	0x20000700

080046a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return uwTick;
 80046a4:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <HAL_GetTick+0x14>)
 80046a6:	681b      	ldr	r3, [r3, #0]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000700 	.word	0x20000700

080046b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046c0:	f7ff ffee 	bl	80046a0 <HAL_GetTick>
 80046c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d005      	beq.n	80046de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <HAL_Delay+0x44>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046de:	bf00      	nop
 80046e0:	f7ff ffde 	bl	80046a0 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d8f7      	bhi.n	80046e0 <HAL_Delay+0x28>
  {
  }
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000024 	.word	0x20000024

08004700 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e033      	b.n	800477e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fd fb78 	bl	8001e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f003 0310 	and.w	r3, r3, #16
 800473a:	2b00      	cmp	r3, #0
 800473c:	d118      	bne.n	8004770 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004746:	f023 0302 	bic.w	r3, r3, #2
 800474a:	f043 0202 	orr.w	r2, r3, #2
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f958 	bl	8004a08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f023 0303 	bic.w	r3, r3, #3
 8004766:	f043 0201 	orr.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
 800476e:	e001      	b.n	8004774 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x1c>
 80047dc:	2302      	movs	r3, #2
 80047de:	e105      	b.n	80049ec <HAL_ADC_ConfigChannel+0x228>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b09      	cmp	r3, #9
 80047ee:	d925      	bls.n	800483c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68d9      	ldr	r1, [r3, #12]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	3b1e      	subs	r3, #30
 8004806:	2207      	movs	r2, #7
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43da      	mvns	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	400a      	ands	r2, r1
 8004814:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68d9      	ldr	r1, [r3, #12]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	4618      	mov	r0, r3
 8004828:	4603      	mov	r3, r0
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4403      	add	r3, r0
 800482e:	3b1e      	subs	r3, #30
 8004830:	409a      	lsls	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	60da      	str	r2, [r3, #12]
 800483a:	e022      	b.n	8004882 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6919      	ldr	r1, [r3, #16]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	4613      	mov	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4413      	add	r3, r2
 8004850:	2207      	movs	r2, #7
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43da      	mvns	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	400a      	ands	r2, r1
 800485e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6919      	ldr	r1, [r3, #16]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	4618      	mov	r0, r3
 8004872:	4603      	mov	r3, r0
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	4403      	add	r3, r0
 8004878:	409a      	lsls	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d824      	bhi.n	80048d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	3b05      	subs	r3, #5
 800489c:	221f      	movs	r2, #31
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	43da      	mvns	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	400a      	ands	r2, r1
 80048aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	4618      	mov	r0, r3
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	3b05      	subs	r3, #5
 80048c6:	fa00 f203 	lsl.w	r2, r0, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	635a      	str	r2, [r3, #52]	; 0x34
 80048d2:	e04c      	b.n	800496e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b0c      	cmp	r3, #12
 80048da:	d824      	bhi.n	8004926 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	3b23      	subs	r3, #35	; 0x23
 80048ee:	221f      	movs	r2, #31
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	43da      	mvns	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	400a      	ands	r2, r1
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	4618      	mov	r0, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	3b23      	subs	r3, #35	; 0x23
 8004918:	fa00 f203 	lsl.w	r2, r0, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
 8004924:	e023      	b.n	800496e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	3b41      	subs	r3, #65	; 0x41
 8004938:	221f      	movs	r2, #31
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43da      	mvns	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	400a      	ands	r2, r1
 8004946:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	4618      	mov	r0, r3
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	3b41      	subs	r3, #65	; 0x41
 8004962:	fa00 f203 	lsl.w	r2, r0, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800496e:	4b22      	ldr	r3, [pc, #136]	; (80049f8 <HAL_ADC_ConfigChannel+0x234>)
 8004970:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a21      	ldr	r2, [pc, #132]	; (80049fc <HAL_ADC_ConfigChannel+0x238>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d109      	bne.n	8004990 <HAL_ADC_ConfigChannel+0x1cc>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b12      	cmp	r3, #18
 8004982:	d105      	bne.n	8004990 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a19      	ldr	r2, [pc, #100]	; (80049fc <HAL_ADC_ConfigChannel+0x238>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d123      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x21e>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d003      	beq.n	80049aa <HAL_ADC_ConfigChannel+0x1e6>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b11      	cmp	r3, #17
 80049a8:	d11b      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d111      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049be:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <HAL_ADC_ConfigChannel+0x23c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <HAL_ADC_ConfigChannel+0x240>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	0c9a      	lsrs	r2, r3, #18
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049d4:	e002      	b.n	80049dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	3b01      	subs	r3, #1
 80049da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f9      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	40012300 	.word	0x40012300
 80049fc:	40012000 	.word	0x40012000
 8004a00:	2000001c 	.word	0x2000001c
 8004a04:	431bde83 	.word	0x431bde83

08004a08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a10:	4b79      	ldr	r3, [pc, #484]	; (8004bf8 <ADC_Init+0x1f0>)
 8004a12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6859      	ldr	r1, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	021a      	lsls	r2, r3, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6859      	ldr	r1, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6899      	ldr	r1, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	4a58      	ldr	r2, [pc, #352]	; (8004bfc <ADC_Init+0x1f4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d022      	beq.n	8004ae6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004aae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6899      	ldr	r1, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6899      	ldr	r1, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	609a      	str	r2, [r3, #8]
 8004ae4:	e00f      	b.n	8004b06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004af4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0202 	bic.w	r2, r2, #2
 8004b14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6899      	ldr	r1, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	7e1b      	ldrb	r3, [r3, #24]
 8004b20:	005a      	lsls	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01b      	beq.n	8004b6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6859      	ldr	r1, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	035a      	lsls	r2, r3, #13
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	e007      	b.n	8004b7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	051a      	lsls	r2, r3, #20
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6899      	ldr	r1, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bbe:	025a      	lsls	r2, r3, #9
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6899      	ldr	r1, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	029a      	lsls	r2, r3, #10
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	609a      	str	r2, [r3, #8]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	40012300 	.word	0x40012300
 8004bfc:	0f000001 	.word	0x0f000001

08004c00 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored. 
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e0ab      	b.n	8004d76 <HAL_ADCEx_MultiModeStart_DMA+0x176>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d018      	beq.n	8004c66 <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	609a      	str	r2, [r3, #8]
    
    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c44:	4b4e      	ldr	r3, [pc, #312]	; (8004d80 <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a4e      	ldr	r2, [pc, #312]	; (8004d84 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	0c9a      	lsrs	r2, r3, #18
 8004c50:	4613      	mov	r3, r2
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	4413      	add	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004c58:	e002      	b.n	8004c60 <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f9      	bne.n	8004c5a <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d173      	bne.n	8004d5c <HAL_ADCEx_MultiModeStart_DMA+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <HAL_ADCEx_MultiModeStart_DMA+0xa6>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb2:	d106      	bne.n	8004cc2 <HAL_ADCEx_MultiModeStart_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb8:	f023 0206 	bic.w	r2, r3, #6
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	645a      	str	r2, [r3, #68]	; 0x44
 8004cc0:	e002      	b.n	8004cc8 <HAL_ADCEx_MultiModeStart_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	4a2c      	ldr	r2, [pc, #176]	; (8004d88 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8004cd6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	4a2b      	ldr	r2, [pc, #172]	; (8004d8c <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8004cde:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	4a2a      	ldr	r2, [pc, #168]	; (8004d90 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8004ce6:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0202 	mvn.w	r2, #2
 8004cf0:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004d00:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8004d04:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d006      	beq.n	8004d1e <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	605a      	str	r2, [r3, #4]
 8004d1c:	e005      	b.n	8004d2a <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	605a      	str	r2, [r3, #4]
    }
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	3308      	adds	r3, #8
 8004d32:	4619      	mov	r1, r3
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f000 faac 	bl	8005294 <HAL_DMA_Start_IT>
    
    /* if no external trigger present enable software conversion of regular channels */
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d114      	bne.n	8004d74 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d58:	609a      	str	r2, [r3, #8]
 8004d5a:	e00b      	b.n	8004d74 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	f043 0210 	orr.w	r2, r3, #16
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6c:	f043 0201 	orr.w	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	2000001c 	.word	0x2000001c
 8004d84:	431bde83 	.word	0x431bde83
 8004d88:	08004e25 	.word	0x08004e25
 8004d8c:	08004ecb 	.word	0x08004ecb
 8004d90:	08004ee7 	.word	0x08004ee7
 8004d94:	40012300 	.word	0x40012300

08004d98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e031      	b.n	8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004db8:	4b19      	ldr	r3, [pc, #100]	; (8004e20 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f023 021f 	bic.w	r2, r3, #31
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40012300 	.word	0x40012300

08004e24 <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d13c      	bne.n	8004eb8 <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d12b      	bne.n	8004eb0 <ADC_MultiModeDMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d127      	bne.n	8004eb0 <ADC_MultiModeDMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d006      	beq.n	8004e7c <ADC_MultiModeDMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d119      	bne.n	8004eb0 <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0220 	bic.w	r2, r2, #32
 8004e8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d105      	bne.n	8004eb0 <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f043 0201 	orr.w	r2, r3, #1
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7ff fc68 	bl	8004786 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004eb6:	e004      	b.n	8004ec2 <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4798      	blx	r3
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f7ff fc5e 	bl	800479a <HAL_ADC_ConvHalfCpltCallback>
}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	60fb      	str	r3, [r7, #12]
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	f043 0204 	orr.w	r2, r3, #4
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc); 
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f7ff fc51 	bl	80047ae <HAL_ADC_ErrorCallback>
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <__NVIC_SetPriorityGrouping+0x44>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f30:	4013      	ands	r3, r2
 8004f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f46:	4a04      	ldr	r2, [pc, #16]	; (8004f58 <__NVIC_SetPriorityGrouping+0x44>)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	60d3      	str	r3, [r2, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	e000ed00 	.word	0xe000ed00

08004f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f60:	4b04      	ldr	r3, [pc, #16]	; (8004f74 <__NVIC_GetPriorityGrouping+0x18>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	0a1b      	lsrs	r3, r3, #8
 8004f66:	f003 0307 	and.w	r3, r3, #7
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	e000ed00 	.word	0xe000ed00

08004f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	db0b      	blt.n	8004fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	f003 021f 	and.w	r2, r3, #31
 8004f90:	4907      	ldr	r1, [pc, #28]	; (8004fb0 <__NVIC_EnableIRQ+0x38>)
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2001      	movs	r0, #1
 8004f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	e000e100 	.word	0xe000e100

08004fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	6039      	str	r1, [r7, #0]
 8004fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	db0a      	blt.n	8004fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	490c      	ldr	r1, [pc, #48]	; (8005000 <__NVIC_SetPriority+0x4c>)
 8004fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd2:	0112      	lsls	r2, r2, #4
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fdc:	e00a      	b.n	8004ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	4908      	ldr	r1, [pc, #32]	; (8005004 <__NVIC_SetPriority+0x50>)
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	3b04      	subs	r3, #4
 8004fec:	0112      	lsls	r2, r2, #4
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	761a      	strb	r2, [r3, #24]
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	e000e100 	.word	0xe000e100
 8005004:	e000ed00 	.word	0xe000ed00

08005008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	; 0x24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f1c3 0307 	rsb	r3, r3, #7
 8005022:	2b04      	cmp	r3, #4
 8005024:	bf28      	it	cs
 8005026:	2304      	movcs	r3, #4
 8005028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	3304      	adds	r3, #4
 800502e:	2b06      	cmp	r3, #6
 8005030:	d902      	bls.n	8005038 <NVIC_EncodePriority+0x30>
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	3b03      	subs	r3, #3
 8005036:	e000      	b.n	800503a <NVIC_EncodePriority+0x32>
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800503c:	f04f 32ff 	mov.w	r2, #4294967295
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	43da      	mvns	r2, r3
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	401a      	ands	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005050:	f04f 31ff 	mov.w	r1, #4294967295
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	fa01 f303 	lsl.w	r3, r1, r3
 800505a:	43d9      	mvns	r1, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005060:	4313      	orrs	r3, r2
         );
}
 8005062:	4618      	mov	r0, r3
 8005064:	3724      	adds	r7, #36	; 0x24
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3b01      	subs	r3, #1
 800507c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005080:	d301      	bcc.n	8005086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005082:	2301      	movs	r3, #1
 8005084:	e00f      	b.n	80050a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005086:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <SysTick_Config+0x40>)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3b01      	subs	r3, #1
 800508c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800508e:	210f      	movs	r1, #15
 8005090:	f04f 30ff 	mov.w	r0, #4294967295
 8005094:	f7ff ff8e 	bl	8004fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <SysTick_Config+0x40>)
 800509a:	2200      	movs	r2, #0
 800509c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800509e:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <SysTick_Config+0x40>)
 80050a0:	2207      	movs	r2, #7
 80050a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	e000e010 	.word	0xe000e010

080050b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff ff29 	bl	8004f14 <__NVIC_SetPriorityGrouping>
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b086      	sub	sp, #24
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	4603      	mov	r3, r0
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	607a      	str	r2, [r7, #4]
 80050d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050dc:	f7ff ff3e 	bl	8004f5c <__NVIC_GetPriorityGrouping>
 80050e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	6978      	ldr	r0, [r7, #20]
 80050e8:	f7ff ff8e 	bl	8005008 <NVIC_EncodePriority>
 80050ec:	4602      	mov	r2, r0
 80050ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f2:	4611      	mov	r1, r2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff ff5d 	bl	8004fb4 <__NVIC_SetPriority>
}
 80050fa:	bf00      	nop
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	4603      	mov	r3, r0
 800510a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800510c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff ff31 	bl	8004f78 <__NVIC_EnableIRQ>
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff ffa2 	bl	8005070 <SysTick_Config>
 800512c:	4603      	mov	r3, r0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005144:	f7ff faac 	bl	80046a0 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e099      	b.n	8005288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0201 	bic.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005174:	e00f      	b.n	8005196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005176:	f7ff fa93 	bl	80046a0 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b05      	cmp	r3, #5
 8005182:	d908      	bls.n	8005196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2203      	movs	r2, #3
 800518e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e078      	b.n	8005288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e8      	bne.n	8005176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	4b38      	ldr	r3, [pc, #224]	; (8005290 <HAL_DMA_Init+0x158>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d107      	bne.n	8005200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	4313      	orrs	r3, r2
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f023 0307 	bic.w	r3, r3, #7
 8005216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	2b04      	cmp	r3, #4
 8005228:	d117      	bne.n	800525a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00e      	beq.n	800525a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f977 	bl	8005530 <DMA_CheckFifoParam>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2240      	movs	r2, #64	; 0x40
 800524c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005256:	2301      	movs	r3, #1
 8005258:	e016      	b.n	8005288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f92e 	bl	80054c4 <DMA_CalcBaseAndBitshift>
 8005268:	4603      	mov	r3, r0
 800526a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005270:	223f      	movs	r2, #63	; 0x3f
 8005272:	409a      	lsls	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	f010803f 	.word	0xf010803f

08005294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_DMA_Start_IT+0x26>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e040      	b.n	800533c <HAL_DMA_Start_IT+0xa8>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d12f      	bne.n	800532e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f8c0 	bl	8005468 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ec:	223f      	movs	r2, #63	; 0x3f
 80052ee:	409a      	lsls	r2, r3
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0216 	orr.w	r2, r2, #22
 8005302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d007      	beq.n	800531c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0208 	orr.w	r2, r2, #8
 800531a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	e005      	b.n	800533a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005336:	2302      	movs	r3, #2
 8005338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800533a:	7dfb      	ldrb	r3, [r7, #23]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005350:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005352:	f7ff f9a5 	bl	80046a0 <HAL_GetTick>
 8005356:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d008      	beq.n	8005376 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2280      	movs	r2, #128	; 0x80
 8005368:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e052      	b.n	800541c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0216 	bic.w	r2, r2, #22
 8005384:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695a      	ldr	r2, [r3, #20]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005394:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <HAL_DMA_Abort+0x62>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0208 	bic.w	r2, r2, #8
 80053b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0201 	bic.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053c6:	e013      	b.n	80053f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053c8:	f7ff f96a 	bl	80046a0 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b05      	cmp	r3, #5
 80053d4:	d90c      	bls.n	80053f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2203      	movs	r2, #3
 80053e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e015      	b.n	800541c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e4      	bne.n	80053c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005402:	223f      	movs	r2, #63	; 0x3f
 8005404:	409a      	lsls	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d004      	beq.n	8005442 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2280      	movs	r2, #128	; 0x80
 800543c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e00c      	b.n	800545c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2205      	movs	r2, #5
 8005446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0201 	bic.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005484:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b40      	cmp	r3, #64	; 0x40
 8005494:	d108      	bne.n	80054a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054a6:	e007      	b.n	80054b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]
}
 80054b8:	bf00      	nop
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	3b10      	subs	r3, #16
 80054d4:	4a14      	ldr	r2, [pc, #80]	; (8005528 <DMA_CalcBaseAndBitshift+0x64>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	091b      	lsrs	r3, r3, #4
 80054dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054de:	4a13      	ldr	r2, [pc, #76]	; (800552c <DMA_CalcBaseAndBitshift+0x68>)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d909      	bls.n	8005506 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054fa:	f023 0303 	bic.w	r3, r3, #3
 80054fe:	1d1a      	adds	r2, r3, #4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	659a      	str	r2, [r3, #88]	; 0x58
 8005504:	e007      	b.n	8005516 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	aaaaaaab 	.word	0xaaaaaaab
 800552c:	08008b88 	.word	0x08008b88

08005530 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005540:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d11f      	bne.n	800558a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b03      	cmp	r3, #3
 800554e:	d856      	bhi.n	80055fe <DMA_CheckFifoParam+0xce>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <DMA_CheckFifoParam+0x28>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	08005569 	.word	0x08005569
 800555c:	0800557b 	.word	0x0800557b
 8005560:	08005569 	.word	0x08005569
 8005564:	080055ff 	.word	0x080055ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d046      	beq.n	8005602 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005578:	e043      	b.n	8005602 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005582:	d140      	bne.n	8005606 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005588:	e03d      	b.n	8005606 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005592:	d121      	bne.n	80055d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d837      	bhi.n	800560a <DMA_CheckFifoParam+0xda>
 800559a:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <DMA_CheckFifoParam+0x70>)
 800559c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055b7 	.word	0x080055b7
 80055a8:	080055b1 	.word	0x080055b1
 80055ac:	080055c9 	.word	0x080055c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
      break;
 80055b4:	e030      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d025      	beq.n	800560e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c6:	e022      	b.n	800560e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055d0:	d11f      	bne.n	8005612 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055d6:	e01c      	b.n	8005612 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d903      	bls.n	80055e6 <DMA_CheckFifoParam+0xb6>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d003      	beq.n	80055ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055e4:	e018      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	73fb      	strb	r3, [r7, #15]
      break;
 80055ea:	e015      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00e      	beq.n	8005616 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
      break;
 80055fc:	e00b      	b.n	8005616 <DMA_CheckFifoParam+0xe6>
      break;
 80055fe:	bf00      	nop
 8005600:	e00a      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 8005602:	bf00      	nop
 8005604:	e008      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 8005606:	bf00      	nop
 8005608:	e006      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 800560a:	bf00      	nop
 800560c:	e004      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 800560e:	bf00      	nop
 8005610:	e002      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;   
 8005612:	bf00      	nop
 8005614:	e000      	b.n	8005618 <DMA_CheckFifoParam+0xe8>
      break;
 8005616:	bf00      	nop
    }
  } 
  
  return status; 
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop

08005628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005628:	b480      	push	{r7}
 800562a:	b089      	sub	sp, #36	; 0x24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800563a:	2300      	movs	r3, #0
 800563c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800563e:	2300      	movs	r3, #0
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	e16b      	b.n	800591c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005644:	2201      	movs	r2, #1
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4013      	ands	r3, r2
 8005656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	429a      	cmp	r2, r3
 800565e:	f040 815a 	bne.w	8005916 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b01      	cmp	r3, #1
 800566c:	d005      	beq.n	800567a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005676:	2b02      	cmp	r3, #2
 8005678:	d130      	bne.n	80056dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	2203      	movs	r2, #3
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	43db      	mvns	r3, r3
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4013      	ands	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056b0:	2201      	movs	r2, #1
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	43db      	mvns	r3, r3
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	4013      	ands	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	091b      	lsrs	r3, r3, #4
 80056c6:	f003 0201 	and.w	r2, r3, #1
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d017      	beq.n	8005718 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	2203      	movs	r2, #3
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	43db      	mvns	r3, r3
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	4013      	ands	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	4313      	orrs	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d123      	bne.n	800576c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	08da      	lsrs	r2, r3, #3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3208      	adds	r2, #8
 800572c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	220f      	movs	r2, #15
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	43db      	mvns	r3, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4013      	ands	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4313      	orrs	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	08da      	lsrs	r2, r3, #3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3208      	adds	r2, #8
 8005766:	69b9      	ldr	r1, [r7, #24]
 8005768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	2203      	movs	r2, #3
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	43db      	mvns	r3, r3
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	4013      	ands	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f003 0203 	and.w	r2, r3, #3
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4313      	orrs	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80b4 	beq.w	8005916 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	4b60      	ldr	r3, [pc, #384]	; (8005934 <HAL_GPIO_Init+0x30c>)
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	4a5f      	ldr	r2, [pc, #380]	; (8005934 <HAL_GPIO_Init+0x30c>)
 80057b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057bc:	6453      	str	r3, [r2, #68]	; 0x44
 80057be:	4b5d      	ldr	r3, [pc, #372]	; (8005934 <HAL_GPIO_Init+0x30c>)
 80057c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057ca:	4a5b      	ldr	r2, [pc, #364]	; (8005938 <HAL_GPIO_Init+0x310>)
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	089b      	lsrs	r3, r3, #2
 80057d0:	3302      	adds	r3, #2
 80057d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	220f      	movs	r2, #15
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43db      	mvns	r3, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4013      	ands	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a52      	ldr	r2, [pc, #328]	; (800593c <HAL_GPIO_Init+0x314>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d02b      	beq.n	800584e <HAL_GPIO_Init+0x226>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a51      	ldr	r2, [pc, #324]	; (8005940 <HAL_GPIO_Init+0x318>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d025      	beq.n	800584a <HAL_GPIO_Init+0x222>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a50      	ldr	r2, [pc, #320]	; (8005944 <HAL_GPIO_Init+0x31c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d01f      	beq.n	8005846 <HAL_GPIO_Init+0x21e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a4f      	ldr	r2, [pc, #316]	; (8005948 <HAL_GPIO_Init+0x320>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d019      	beq.n	8005842 <HAL_GPIO_Init+0x21a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a4e      	ldr	r2, [pc, #312]	; (800594c <HAL_GPIO_Init+0x324>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d013      	beq.n	800583e <HAL_GPIO_Init+0x216>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a4d      	ldr	r2, [pc, #308]	; (8005950 <HAL_GPIO_Init+0x328>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00d      	beq.n	800583a <HAL_GPIO_Init+0x212>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a4c      	ldr	r2, [pc, #304]	; (8005954 <HAL_GPIO_Init+0x32c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d007      	beq.n	8005836 <HAL_GPIO_Init+0x20e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a4b      	ldr	r2, [pc, #300]	; (8005958 <HAL_GPIO_Init+0x330>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d101      	bne.n	8005832 <HAL_GPIO_Init+0x20a>
 800582e:	2307      	movs	r3, #7
 8005830:	e00e      	b.n	8005850 <HAL_GPIO_Init+0x228>
 8005832:	2308      	movs	r3, #8
 8005834:	e00c      	b.n	8005850 <HAL_GPIO_Init+0x228>
 8005836:	2306      	movs	r3, #6
 8005838:	e00a      	b.n	8005850 <HAL_GPIO_Init+0x228>
 800583a:	2305      	movs	r3, #5
 800583c:	e008      	b.n	8005850 <HAL_GPIO_Init+0x228>
 800583e:	2304      	movs	r3, #4
 8005840:	e006      	b.n	8005850 <HAL_GPIO_Init+0x228>
 8005842:	2303      	movs	r3, #3
 8005844:	e004      	b.n	8005850 <HAL_GPIO_Init+0x228>
 8005846:	2302      	movs	r3, #2
 8005848:	e002      	b.n	8005850 <HAL_GPIO_Init+0x228>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <HAL_GPIO_Init+0x228>
 800584e:	2300      	movs	r3, #0
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	f002 0203 	and.w	r2, r2, #3
 8005856:	0092      	lsls	r2, r2, #2
 8005858:	4093      	lsls	r3, r2
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4313      	orrs	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005860:	4935      	ldr	r1, [pc, #212]	; (8005938 <HAL_GPIO_Init+0x310>)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	089b      	lsrs	r3, r3, #2
 8005866:	3302      	adds	r3, #2
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800586e:	4b3b      	ldr	r3, [pc, #236]	; (800595c <HAL_GPIO_Init+0x334>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	43db      	mvns	r3, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4013      	ands	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005892:	4a32      	ldr	r2, [pc, #200]	; (800595c <HAL_GPIO_Init+0x334>)
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005898:	4b30      	ldr	r3, [pc, #192]	; (800595c <HAL_GPIO_Init+0x334>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	43db      	mvns	r3, r3
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	4013      	ands	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058bc:	4a27      	ldr	r2, [pc, #156]	; (800595c <HAL_GPIO_Init+0x334>)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058c2:	4b26      	ldr	r3, [pc, #152]	; (800595c <HAL_GPIO_Init+0x334>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	43db      	mvns	r3, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4013      	ands	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058e6:	4a1d      	ldr	r2, [pc, #116]	; (800595c <HAL_GPIO_Init+0x334>)
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058ec:	4b1b      	ldr	r3, [pc, #108]	; (800595c <HAL_GPIO_Init+0x334>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	43db      	mvns	r3, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4013      	ands	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005910:	4a12      	ldr	r2, [pc, #72]	; (800595c <HAL_GPIO_Init+0x334>)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	3301      	adds	r3, #1
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	2b0f      	cmp	r3, #15
 8005920:	f67f ae90 	bls.w	8005644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	3724      	adds	r7, #36	; 0x24
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40023800 	.word	0x40023800
 8005938:	40013800 	.word	0x40013800
 800593c:	40020000 	.word	0x40020000
 8005940:	40020400 	.word	0x40020400
 8005944:	40020800 	.word	0x40020800
 8005948:	40020c00 	.word	0x40020c00
 800594c:	40021000 	.word	0x40021000
 8005950:	40021400 	.word	0x40021400
 8005954:	40021800 	.word	0x40021800
 8005958:	40021c00 	.word	0x40021c00
 800595c:	40013c00 	.word	0x40013c00

08005960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	887b      	ldrh	r3, [r7, #2]
 8005972:	4013      	ands	r3, r2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
 800597c:	e001      	b.n	8005982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800597e:	2300      	movs	r3, #0
 8005980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	807b      	strh	r3, [r7, #2]
 800599c:	4613      	mov	r3, r2
 800599e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059a0:	787b      	ldrb	r3, [r7, #1]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059a6:	887a      	ldrh	r2, [r7, #2]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059ac:	e003      	b.n	80059b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059ae:	887b      	ldrh	r3, [r7, #2]
 80059b0:	041a      	lsls	r2, r3, #16
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	619a      	str	r2, [r3, #24]
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
	...

080059c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e267      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d075      	beq.n	8005ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059e2:	4b88      	ldr	r3, [pc, #544]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 030c 	and.w	r3, r3, #12
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d00c      	beq.n	8005a08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ee:	4b85      	ldr	r3, [pc, #532]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d112      	bne.n	8005a20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059fa:	4b82      	ldr	r3, [pc, #520]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a06:	d10b      	bne.n	8005a20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a08:	4b7e      	ldr	r3, [pc, #504]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d05b      	beq.n	8005acc <HAL_RCC_OscConfig+0x108>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d157      	bne.n	8005acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e242      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a28:	d106      	bne.n	8005a38 <HAL_RCC_OscConfig+0x74>
 8005a2a:	4b76      	ldr	r3, [pc, #472]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a75      	ldr	r2, [pc, #468]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	e01d      	b.n	8005a74 <HAL_RCC_OscConfig+0xb0>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a40:	d10c      	bne.n	8005a5c <HAL_RCC_OscConfig+0x98>
 8005a42:	4b70      	ldr	r3, [pc, #448]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a6f      	ldr	r2, [pc, #444]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	4b6d      	ldr	r3, [pc, #436]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a6c      	ldr	r2, [pc, #432]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	e00b      	b.n	8005a74 <HAL_RCC_OscConfig+0xb0>
 8005a5c:	4b69      	ldr	r3, [pc, #420]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a68      	ldr	r2, [pc, #416]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	4b66      	ldr	r3, [pc, #408]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a65      	ldr	r2, [pc, #404]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d013      	beq.n	8005aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7c:	f7fe fe10 	bl	80046a0 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a84:	f7fe fe0c 	bl	80046a0 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b64      	cmp	r3, #100	; 0x64
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e207      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a96:	4b5b      	ldr	r3, [pc, #364]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f0      	beq.n	8005a84 <HAL_RCC_OscConfig+0xc0>
 8005aa2:	e014      	b.n	8005ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa4:	f7fe fdfc 	bl	80046a0 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aac:	f7fe fdf8 	bl	80046a0 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b64      	cmp	r3, #100	; 0x64
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e1f3      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005abe:	4b51      	ldr	r3, [pc, #324]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0xe8>
 8005aca:	e000      	b.n	8005ace <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d063      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ada:	4b4a      	ldr	r3, [pc, #296]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 030c 	and.w	r3, r3, #12
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00b      	beq.n	8005afe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ae6:	4b47      	ldr	r3, [pc, #284]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d11c      	bne.n	8005b2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005af2:	4b44      	ldr	r3, [pc, #272]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d116      	bne.n	8005b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005afe:	4b41      	ldr	r3, [pc, #260]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_RCC_OscConfig+0x152>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d001      	beq.n	8005b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e1c7      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b16:	4b3b      	ldr	r3, [pc, #236]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4937      	ldr	r1, [pc, #220]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b2a:	e03a      	b.n	8005ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d020      	beq.n	8005b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b34:	4b34      	ldr	r3, [pc, #208]	; (8005c08 <HAL_RCC_OscConfig+0x244>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3a:	f7fe fdb1 	bl	80046a0 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b42:	f7fe fdad 	bl	80046a0 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e1a8      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b54:	4b2b      	ldr	r3, [pc, #172]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0f0      	beq.n	8005b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b60:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	4925      	ldr	r1, [pc, #148]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	600b      	str	r3, [r1, #0]
 8005b74:	e015      	b.n	8005ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <HAL_RCC_OscConfig+0x244>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7c:	f7fe fd90 	bl	80046a0 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b84:	f7fe fd8c 	bl	80046a0 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e187      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b96:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f0      	bne.n	8005b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d036      	beq.n	8005c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bb6:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <HAL_RCC_OscConfig+0x248>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbc:	f7fe fd70 	bl	80046a0 <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bc4:	f7fe fd6c 	bl	80046a0 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e167      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0f0      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x200>
 8005be2:	e01b      	b.n	8005c1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005be4:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <HAL_RCC_OscConfig+0x248>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bea:	f7fe fd59 	bl	80046a0 <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bf0:	e00e      	b.n	8005c10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bf2:	f7fe fd55 	bl	80046a0 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d907      	bls.n	8005c10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e150      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
 8005c04:	40023800 	.word	0x40023800
 8005c08:	42470000 	.word	0x42470000
 8005c0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c10:	4b88      	ldr	r3, [pc, #544]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1ea      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8097 	beq.w	8005d58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c2e:	4b81      	ldr	r3, [pc, #516]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10f      	bne.n	8005c5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]
 8005c3e:	4b7d      	ldr	r3, [pc, #500]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	4a7c      	ldr	r2, [pc, #496]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c48:	6413      	str	r3, [r2, #64]	; 0x40
 8005c4a:	4b7a      	ldr	r3, [pc, #488]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c52:	60bb      	str	r3, [r7, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c56:	2301      	movs	r3, #1
 8005c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5a:	4b77      	ldr	r3, [pc, #476]	; (8005e38 <HAL_RCC_OscConfig+0x474>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d118      	bne.n	8005c98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c66:	4b74      	ldr	r3, [pc, #464]	; (8005e38 <HAL_RCC_OscConfig+0x474>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a73      	ldr	r2, [pc, #460]	; (8005e38 <HAL_RCC_OscConfig+0x474>)
 8005c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c72:	f7fe fd15 	bl	80046a0 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7a:	f7fe fd11 	bl	80046a0 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e10c      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8c:	4b6a      	ldr	r3, [pc, #424]	; (8005e38 <HAL_RCC_OscConfig+0x474>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0f0      	beq.n	8005c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d106      	bne.n	8005cae <HAL_RCC_OscConfig+0x2ea>
 8005ca0:	4b64      	ldr	r3, [pc, #400]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca4:	4a63      	ldr	r2, [pc, #396]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	6713      	str	r3, [r2, #112]	; 0x70
 8005cac:	e01c      	b.n	8005ce8 <HAL_RCC_OscConfig+0x324>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	2b05      	cmp	r3, #5
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x30c>
 8005cb6:	4b5f      	ldr	r3, [pc, #380]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cba:	4a5e      	ldr	r2, [pc, #376]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cbc:	f043 0304 	orr.w	r3, r3, #4
 8005cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cc2:	4b5c      	ldr	r3, [pc, #368]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc6:	4a5b      	ldr	r2, [pc, #364]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cc8:	f043 0301 	orr.w	r3, r3, #1
 8005ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cce:	e00b      	b.n	8005ce8 <HAL_RCC_OscConfig+0x324>
 8005cd0:	4b58      	ldr	r3, [pc, #352]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd4:	4a57      	ldr	r2, [pc, #348]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cd6:	f023 0301 	bic.w	r3, r3, #1
 8005cda:	6713      	str	r3, [r2, #112]	; 0x70
 8005cdc:	4b55      	ldr	r3, [pc, #340]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce0:	4a54      	ldr	r2, [pc, #336]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	f023 0304 	bic.w	r3, r3, #4
 8005ce6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d015      	beq.n	8005d1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf0:	f7fe fcd6 	bl	80046a0 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf6:	e00a      	b.n	8005d0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cf8:	f7fe fcd2 	bl	80046a0 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e0cb      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d0e:	4b49      	ldr	r3, [pc, #292]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d0ee      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x334>
 8005d1a:	e014      	b.n	8005d46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d1c:	f7fe fcc0 	bl	80046a0 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d22:	e00a      	b.n	8005d3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d24:	f7fe fcbc 	bl	80046a0 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e0b5      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d3a:	4b3e      	ldr	r3, [pc, #248]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ee      	bne.n	8005d24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d105      	bne.n	8005d58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d4c:	4b39      	ldr	r3, [pc, #228]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	4a38      	ldr	r2, [pc, #224]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80a1 	beq.w	8005ea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d62:	4b34      	ldr	r3, [pc, #208]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 030c 	and.w	r3, r3, #12
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d05c      	beq.n	8005e28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d141      	bne.n	8005dfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d76:	4b31      	ldr	r3, [pc, #196]	; (8005e3c <HAL_RCC_OscConfig+0x478>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d7c:	f7fe fc90 	bl	80046a0 <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d84:	f7fe fc8c 	bl	80046a0 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e087      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d96:	4b27      	ldr	r3, [pc, #156]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f0      	bne.n	8005d84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69da      	ldr	r2, [r3, #28]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	019b      	lsls	r3, r3, #6
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	041b      	lsls	r3, r3, #16
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	061b      	lsls	r3, r3, #24
 8005dc6:	491b      	ldr	r1, [pc, #108]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dcc:	4b1b      	ldr	r3, [pc, #108]	; (8005e3c <HAL_RCC_OscConfig+0x478>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd2:	f7fe fc65 	bl	80046a0 <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dda:	f7fe fc61 	bl	80046a0 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e05c      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dec:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0f0      	beq.n	8005dda <HAL_RCC_OscConfig+0x416>
 8005df8:	e054      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfa:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <HAL_RCC_OscConfig+0x478>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e00:	f7fe fc4e 	bl	80046a0 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e08:	f7fe fc4a 	bl	80046a0 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e045      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1a:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x444>
 8005e26:	e03d      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d107      	bne.n	8005e40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e038      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
 8005e34:	40023800 	.word	0x40023800
 8005e38:	40007000 	.word	0x40007000
 8005e3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e40:	4b1b      	ldr	r3, [pc, #108]	; (8005eb0 <HAL_RCC_OscConfig+0x4ec>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d028      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d121      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d11a      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e70:	4013      	ands	r3, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d111      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d107      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40023800 	.word	0x40023800

08005eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0cc      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ec8:	4b68      	ldr	r3, [pc, #416]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d90c      	bls.n	8005ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed6:	4b65      	ldr	r3, [pc, #404]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ede:	4b63      	ldr	r3, [pc, #396]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0b8      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d020      	beq.n	8005f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d005      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f08:	4b59      	ldr	r3, [pc, #356]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	4a58      	ldr	r2, [pc, #352]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f20:	4b53      	ldr	r3, [pc, #332]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	4a52      	ldr	r2, [pc, #328]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f2c:	4b50      	ldr	r3, [pc, #320]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	494d      	ldr	r1, [pc, #308]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d044      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d107      	bne.n	8005f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f52:	4b47      	ldr	r3, [pc, #284]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d119      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e07f      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d003      	beq.n	8005f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d107      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f72:	4b3f      	ldr	r3, [pc, #252]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d109      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e06f      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f82:	4b3b      	ldr	r3, [pc, #236]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e067      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f92:	4b37      	ldr	r3, [pc, #220]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f023 0203 	bic.w	r2, r3, #3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	4934      	ldr	r1, [pc, #208]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fa4:	f7fe fb7c 	bl	80046a0 <HAL_GetTick>
 8005fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005faa:	e00a      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fac:	f7fe fb78 	bl	80046a0 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e04f      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc2:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 020c 	and.w	r2, r3, #12
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d1eb      	bne.n	8005fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fd4:	4b25      	ldr	r3, [pc, #148]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d20c      	bcs.n	8005ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe2:	4b22      	ldr	r3, [pc, #136]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fea:	4b20      	ldr	r3, [pc, #128]	; (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d001      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e032      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006008:	4b19      	ldr	r3, [pc, #100]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4916      	ldr	r1, [pc, #88]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	4313      	orrs	r3, r2
 8006018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006026:	4b12      	ldr	r3, [pc, #72]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	490e      	ldr	r1, [pc, #56]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	4313      	orrs	r3, r2
 8006038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800603a:	f000 f821 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 800603e:	4602      	mov	r2, r0
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	490a      	ldr	r1, [pc, #40]	; (8006074 <HAL_RCC_ClockConfig+0x1c0>)
 800604c:	5ccb      	ldrb	r3, [r1, r3]
 800604e:	fa22 f303 	lsr.w	r3, r2, r3
 8006052:	4a09      	ldr	r2, [pc, #36]	; (8006078 <HAL_RCC_ClockConfig+0x1c4>)
 8006054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006056:	4b09      	ldr	r3, [pc, #36]	; (800607c <HAL_RCC_ClockConfig+0x1c8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fadc 	bl	8004618 <HAL_InitTick>

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	40023c00 	.word	0x40023c00
 8006070:	40023800 	.word	0x40023800
 8006074:	08008b70 	.word	0x08008b70
 8006078:	2000001c 	.word	0x2000001c
 800607c:	20000020 	.word	0x20000020

08006080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006084:	b094      	sub	sp, #80	; 0x50
 8006086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	647b      	str	r3, [r7, #68]	; 0x44
 800608c:	2300      	movs	r3, #0
 800608e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006090:	2300      	movs	r3, #0
 8006092:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006098:	4b79      	ldr	r3, [pc, #484]	; (8006280 <HAL_RCC_GetSysClockFreq+0x200>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 030c 	and.w	r3, r3, #12
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d00d      	beq.n	80060c0 <HAL_RCC_GetSysClockFreq+0x40>
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	f200 80e1 	bhi.w	800626c <HAL_RCC_GetSysClockFreq+0x1ec>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <HAL_RCC_GetSysClockFreq+0x34>
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d003      	beq.n	80060ba <HAL_RCC_GetSysClockFreq+0x3a>
 80060b2:	e0db      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060b4:	4b73      	ldr	r3, [pc, #460]	; (8006284 <HAL_RCC_GetSysClockFreq+0x204>)
 80060b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80060b8:	e0db      	b.n	8006272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060ba:	4b73      	ldr	r3, [pc, #460]	; (8006288 <HAL_RCC_GetSysClockFreq+0x208>)
 80060bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060be:	e0d8      	b.n	8006272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060c0:	4b6f      	ldr	r3, [pc, #444]	; (8006280 <HAL_RCC_GetSysClockFreq+0x200>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ca:	4b6d      	ldr	r3, [pc, #436]	; (8006280 <HAL_RCC_GetSysClockFreq+0x200>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d063      	beq.n	800619e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060d6:	4b6a      	ldr	r3, [pc, #424]	; (8006280 <HAL_RCC_GetSysClockFreq+0x200>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	099b      	lsrs	r3, r3, #6
 80060dc:	2200      	movs	r2, #0
 80060de:	63bb      	str	r3, [r7, #56]	; 0x38
 80060e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e8:	633b      	str	r3, [r7, #48]	; 0x30
 80060ea:	2300      	movs	r3, #0
 80060ec:	637b      	str	r3, [r7, #52]	; 0x34
 80060ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80060f2:	4622      	mov	r2, r4
 80060f4:	462b      	mov	r3, r5
 80060f6:	f04f 0000 	mov.w	r0, #0
 80060fa:	f04f 0100 	mov.w	r1, #0
 80060fe:	0159      	lsls	r1, r3, #5
 8006100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006104:	0150      	lsls	r0, r2, #5
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4621      	mov	r1, r4
 800610c:	1a51      	subs	r1, r2, r1
 800610e:	6139      	str	r1, [r7, #16]
 8006110:	4629      	mov	r1, r5
 8006112:	eb63 0301 	sbc.w	r3, r3, r1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006124:	4659      	mov	r1, fp
 8006126:	018b      	lsls	r3, r1, #6
 8006128:	4651      	mov	r1, sl
 800612a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800612e:	4651      	mov	r1, sl
 8006130:	018a      	lsls	r2, r1, #6
 8006132:	4651      	mov	r1, sl
 8006134:	ebb2 0801 	subs.w	r8, r2, r1
 8006138:	4659      	mov	r1, fp
 800613a:	eb63 0901 	sbc.w	r9, r3, r1
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800614a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800614e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006152:	4690      	mov	r8, r2
 8006154:	4699      	mov	r9, r3
 8006156:	4623      	mov	r3, r4
 8006158:	eb18 0303 	adds.w	r3, r8, r3
 800615c:	60bb      	str	r3, [r7, #8]
 800615e:	462b      	mov	r3, r5
 8006160:	eb49 0303 	adc.w	r3, r9, r3
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006172:	4629      	mov	r1, r5
 8006174:	024b      	lsls	r3, r1, #9
 8006176:	4621      	mov	r1, r4
 8006178:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800617c:	4621      	mov	r1, r4
 800617e:	024a      	lsls	r2, r1, #9
 8006180:	4610      	mov	r0, r2
 8006182:	4619      	mov	r1, r3
 8006184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006186:	2200      	movs	r2, #0
 8006188:	62bb      	str	r3, [r7, #40]	; 0x28
 800618a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800618c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006190:	f7fa fc38 	bl	8000a04 <__aeabi_uldivmod>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4613      	mov	r3, r2
 800619a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800619c:	e058      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800619e:	4b38      	ldr	r3, [pc, #224]	; (8006280 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	099b      	lsrs	r3, r3, #6
 80061a4:	2200      	movs	r2, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	4611      	mov	r1, r2
 80061aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061ae:	623b      	str	r3, [r7, #32]
 80061b0:	2300      	movs	r3, #0
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
 80061b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	f04f 0000 	mov.w	r0, #0
 80061c0:	f04f 0100 	mov.w	r1, #0
 80061c4:	0159      	lsls	r1, r3, #5
 80061c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061ca:	0150      	lsls	r0, r2, #5
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4641      	mov	r1, r8
 80061d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80061d6:	4649      	mov	r1, r9
 80061d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061f0:	ebb2 040a 	subs.w	r4, r2, sl
 80061f4:	eb63 050b 	sbc.w	r5, r3, fp
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	00eb      	lsls	r3, r5, #3
 8006202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006206:	00e2      	lsls	r2, r4, #3
 8006208:	4614      	mov	r4, r2
 800620a:	461d      	mov	r5, r3
 800620c:	4643      	mov	r3, r8
 800620e:	18e3      	adds	r3, r4, r3
 8006210:	603b      	str	r3, [r7, #0]
 8006212:	464b      	mov	r3, r9
 8006214:	eb45 0303 	adc.w	r3, r5, r3
 8006218:	607b      	str	r3, [r7, #4]
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006226:	4629      	mov	r1, r5
 8006228:	028b      	lsls	r3, r1, #10
 800622a:	4621      	mov	r1, r4
 800622c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006230:	4621      	mov	r1, r4
 8006232:	028a      	lsls	r2, r1, #10
 8006234:	4610      	mov	r0, r2
 8006236:	4619      	mov	r1, r3
 8006238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800623a:	2200      	movs	r2, #0
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	61fa      	str	r2, [r7, #28]
 8006240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006244:	f7fa fbde 	bl	8000a04 <__aeabi_uldivmod>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	4613      	mov	r3, r2
 800624e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <HAL_RCC_GetSysClockFreq+0x200>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	0c1b      	lsrs	r3, r3, #16
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	3301      	adds	r3, #1
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006260:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800626a:	e002      	b.n	8006272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800626c:	4b05      	ldr	r3, [pc, #20]	; (8006284 <HAL_RCC_GetSysClockFreq+0x204>)
 800626e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006274:	4618      	mov	r0, r3
 8006276:	3750      	adds	r7, #80	; 0x50
 8006278:	46bd      	mov	sp, r7
 800627a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800627e:	bf00      	nop
 8006280:	40023800 	.word	0x40023800
 8006284:	00f42400 	.word	0x00f42400
 8006288:	007a1200 	.word	0x007a1200

0800628c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006290:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006292:	681b      	ldr	r3, [r3, #0]
}
 8006294:	4618      	mov	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	2000001c 	.word	0x2000001c

080062a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062a8:	f7ff fff0 	bl	800628c <HAL_RCC_GetHCLKFreq>
 80062ac:	4602      	mov	r2, r0
 80062ae:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	0a9b      	lsrs	r3, r3, #10
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	4903      	ldr	r1, [pc, #12]	; (80062c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ba:	5ccb      	ldrb	r3, [r1, r3]
 80062bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40023800 	.word	0x40023800
 80062c8:	08008b80 	.word	0x08008b80

080062cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062d0:	f7ff ffdc 	bl	800628c <HAL_RCC_GetHCLKFreq>
 80062d4:	4602      	mov	r2, r0
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	0b5b      	lsrs	r3, r3, #13
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	4903      	ldr	r1, [pc, #12]	; (80062f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062e2:	5ccb      	ldrb	r3, [r1, r3]
 80062e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40023800 	.word	0x40023800
 80062f0:	08008b80 	.word	0x08008b80

080062f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e041      	b.n	800638a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fd fed8 	bl	80040d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3304      	adds	r3, #4
 8006330:	4619      	mov	r1, r3
 8006332:	4610      	mov	r0, r2
 8006334:	f000 fdda 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d001      	beq.n	80063ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e046      	b.n	800643a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a23      	ldr	r2, [pc, #140]	; (8006448 <HAL_TIM_Base_Start+0xb4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d022      	beq.n	8006404 <HAL_TIM_Base_Start+0x70>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c6:	d01d      	beq.n	8006404 <HAL_TIM_Base_Start+0x70>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1f      	ldr	r2, [pc, #124]	; (800644c <HAL_TIM_Base_Start+0xb8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d018      	beq.n	8006404 <HAL_TIM_Base_Start+0x70>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1e      	ldr	r2, [pc, #120]	; (8006450 <HAL_TIM_Base_Start+0xbc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d013      	beq.n	8006404 <HAL_TIM_Base_Start+0x70>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1c      	ldr	r2, [pc, #112]	; (8006454 <HAL_TIM_Base_Start+0xc0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00e      	beq.n	8006404 <HAL_TIM_Base_Start+0x70>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1b      	ldr	r2, [pc, #108]	; (8006458 <HAL_TIM_Base_Start+0xc4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d009      	beq.n	8006404 <HAL_TIM_Base_Start+0x70>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a19      	ldr	r2, [pc, #100]	; (800645c <HAL_TIM_Base_Start+0xc8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d004      	beq.n	8006404 <HAL_TIM_Base_Start+0x70>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a18      	ldr	r2, [pc, #96]	; (8006460 <HAL_TIM_Base_Start+0xcc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d111      	bne.n	8006428 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b06      	cmp	r3, #6
 8006414:	d010      	beq.n	8006438 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f042 0201 	orr.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006426:	e007      	b.n	8006438 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0201 	orr.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40010000 	.word	0x40010000
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40010400 	.word	0x40010400
 800645c:	40014000 	.word	0x40014000
 8006460:	40001800 	.word	0x40001800

08006464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b01      	cmp	r3, #1
 8006476:	d001      	beq.n	800647c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e04e      	b.n	800651a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a23      	ldr	r2, [pc, #140]	; (8006528 <HAL_TIM_Base_Start_IT+0xc4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d022      	beq.n	80064e4 <HAL_TIM_Base_Start_IT+0x80>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a6:	d01d      	beq.n	80064e4 <HAL_TIM_Base_Start_IT+0x80>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1f      	ldr	r2, [pc, #124]	; (800652c <HAL_TIM_Base_Start_IT+0xc8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d018      	beq.n	80064e4 <HAL_TIM_Base_Start_IT+0x80>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1e      	ldr	r2, [pc, #120]	; (8006530 <HAL_TIM_Base_Start_IT+0xcc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d013      	beq.n	80064e4 <HAL_TIM_Base_Start_IT+0x80>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a1c      	ldr	r2, [pc, #112]	; (8006534 <HAL_TIM_Base_Start_IT+0xd0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d00e      	beq.n	80064e4 <HAL_TIM_Base_Start_IT+0x80>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1b      	ldr	r2, [pc, #108]	; (8006538 <HAL_TIM_Base_Start_IT+0xd4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d009      	beq.n	80064e4 <HAL_TIM_Base_Start_IT+0x80>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a19      	ldr	r2, [pc, #100]	; (800653c <HAL_TIM_Base_Start_IT+0xd8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d004      	beq.n	80064e4 <HAL_TIM_Base_Start_IT+0x80>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a18      	ldr	r2, [pc, #96]	; (8006540 <HAL_TIM_Base_Start_IT+0xdc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d111      	bne.n	8006508 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b06      	cmp	r3, #6
 80064f4:	d010      	beq.n	8006518 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0201 	orr.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006506:	e007      	b.n	8006518 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0201 	orr.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40010000 	.word	0x40010000
 800652c:	40000400 	.word	0x40000400
 8006530:	40000800 	.word	0x40000800
 8006534:	40000c00 	.word	0x40000c00
 8006538:	40010400 	.word	0x40010400
 800653c:	40014000 	.word	0x40014000
 8006540:	40001800 	.word	0x40001800

08006544 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e041      	b.n	80065da <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f839 	bl	80065e2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f000 fcb2 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
	...

080065f8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d109      	bne.n	800661c <HAL_TIM_OC_Start+0x24>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	bf14      	ite	ne
 8006614:	2301      	movne	r3, #1
 8006616:	2300      	moveq	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	e022      	b.n	8006662 <HAL_TIM_OC_Start+0x6a>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b04      	cmp	r3, #4
 8006620:	d109      	bne.n	8006636 <HAL_TIM_OC_Start+0x3e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b01      	cmp	r3, #1
 800662c:	bf14      	ite	ne
 800662e:	2301      	movne	r3, #1
 8006630:	2300      	moveq	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	e015      	b.n	8006662 <HAL_TIM_OC_Start+0x6a>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b08      	cmp	r3, #8
 800663a:	d109      	bne.n	8006650 <HAL_TIM_OC_Start+0x58>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	bf14      	ite	ne
 8006648:	2301      	movne	r3, #1
 800664a:	2300      	moveq	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	e008      	b.n	8006662 <HAL_TIM_OC_Start+0x6a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b01      	cmp	r3, #1
 800665a:	bf14      	ite	ne
 800665c:	2301      	movne	r3, #1
 800665e:	2300      	moveq	r3, #0
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e07c      	b.n	8006764 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <HAL_TIM_OC_Start+0x82>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006678:	e013      	b.n	80066a2 <HAL_TIM_OC_Start+0xaa>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b04      	cmp	r3, #4
 800667e:	d104      	bne.n	800668a <HAL_TIM_OC_Start+0x92>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006688:	e00b      	b.n	80066a2 <HAL_TIM_OC_Start+0xaa>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b08      	cmp	r3, #8
 800668e:	d104      	bne.n	800669a <HAL_TIM_OC_Start+0xa2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006698:	e003      	b.n	80066a2 <HAL_TIM_OC_Start+0xaa>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2201      	movs	r2, #1
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 ff99 	bl	80075e2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2d      	ldr	r2, [pc, #180]	; (800676c <HAL_TIM_OC_Start+0x174>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_TIM_OC_Start+0xcc>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a2c      	ldr	r2, [pc, #176]	; (8006770 <HAL_TIM_OC_Start+0x178>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d101      	bne.n	80066c8 <HAL_TIM_OC_Start+0xd0>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <HAL_TIM_OC_Start+0xd2>
 80066c8:	2300      	movs	r3, #0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a22      	ldr	r2, [pc, #136]	; (800676c <HAL_TIM_OC_Start+0x174>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d022      	beq.n	800672e <HAL_TIM_OC_Start+0x136>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f0:	d01d      	beq.n	800672e <HAL_TIM_OC_Start+0x136>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a1f      	ldr	r2, [pc, #124]	; (8006774 <HAL_TIM_OC_Start+0x17c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d018      	beq.n	800672e <HAL_TIM_OC_Start+0x136>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1d      	ldr	r2, [pc, #116]	; (8006778 <HAL_TIM_OC_Start+0x180>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d013      	beq.n	800672e <HAL_TIM_OC_Start+0x136>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1c      	ldr	r2, [pc, #112]	; (800677c <HAL_TIM_OC_Start+0x184>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00e      	beq.n	800672e <HAL_TIM_OC_Start+0x136>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a16      	ldr	r2, [pc, #88]	; (8006770 <HAL_TIM_OC_Start+0x178>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d009      	beq.n	800672e <HAL_TIM_OC_Start+0x136>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a18      	ldr	r2, [pc, #96]	; (8006780 <HAL_TIM_OC_Start+0x188>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_TIM_OC_Start+0x136>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a16      	ldr	r2, [pc, #88]	; (8006784 <HAL_TIM_OC_Start+0x18c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d111      	bne.n	8006752 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b06      	cmp	r3, #6
 800673e:	d010      	beq.n	8006762 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006750:	e007      	b.n	8006762 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f042 0201 	orr.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40010000 	.word	0x40010000
 8006770:	40010400 	.word	0x40010400
 8006774:	40000400 	.word	0x40000400
 8006778:	40000800 	.word	0x40000800
 800677c:	40000c00 	.word	0x40000c00
 8006780:	40014000 	.word	0x40014000
 8006784:	40001800 	.word	0x40001800

08006788 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e041      	b.n	800681e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d106      	bne.n	80067b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f839 	bl	8006826 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f000 fb90 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b02      	cmp	r3, #2
 800684e:	d122      	bne.n	8006896 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b02      	cmp	r3, #2
 800685c:	d11b      	bne.n	8006896 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f06f 0202 	mvn.w	r2, #2
 8006866:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f003 0303 	and.w	r3, r3, #3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fb16 	bl	8006eae <HAL_TIM_IC_CaptureCallback>
 8006882:	e005      	b.n	8006890 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fb08 	bl	8006e9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fb19 	bl	8006ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d122      	bne.n	80068ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d11b      	bne.n	80068ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f06f 0204 	mvn.w	r2, #4
 80068ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 faec 	bl	8006eae <HAL_TIM_IC_CaptureCallback>
 80068d6:	e005      	b.n	80068e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fade 	bl	8006e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 faef 	bl	8006ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f003 0308 	and.w	r3, r3, #8
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d122      	bne.n	800693e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f003 0308 	and.w	r3, r3, #8
 8006902:	2b08      	cmp	r3, #8
 8006904:	d11b      	bne.n	800693e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f06f 0208 	mvn.w	r2, #8
 800690e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2204      	movs	r2, #4
 8006914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fac2 	bl	8006eae <HAL_TIM_IC_CaptureCallback>
 800692a:	e005      	b.n	8006938 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fab4 	bl	8006e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fac5 	bl	8006ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	2b10      	cmp	r3, #16
 800694a:	d122      	bne.n	8006992 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b10      	cmp	r3, #16
 8006958:	d11b      	bne.n	8006992 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f06f 0210 	mvn.w	r2, #16
 8006962:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2208      	movs	r2, #8
 8006968:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fa98 	bl	8006eae <HAL_TIM_IC_CaptureCallback>
 800697e:	e005      	b.n	800698c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fa8a 	bl	8006e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fa9b 	bl	8006ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b01      	cmp	r3, #1
 800699e:	d10e      	bne.n	80069be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d107      	bne.n	80069be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f06f 0201 	mvn.w	r2, #1
 80069b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fb fc69 	bl	8002290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c8:	2b80      	cmp	r3, #128	; 0x80
 80069ca:	d10e      	bne.n	80069ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d6:	2b80      	cmp	r3, #128	; 0x80
 80069d8:	d107      	bne.n	80069ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fef9 	bl	80077dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d10e      	bne.n	8006a16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a02:	2b40      	cmp	r3, #64	; 0x40
 8006a04:	d107      	bne.n	8006a16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fa60 	bl	8006ed6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d10e      	bne.n	8006a42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d107      	bne.n	8006a42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f06f 0220 	mvn.w	r2, #32
 8006a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fec3 	bl	80077c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e048      	b.n	8006afc <HAL_TIM_OC_ConfigChannel+0xb0>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b0c      	cmp	r3, #12
 8006a76:	d839      	bhi.n	8006aec <HAL_TIM_OC_ConfigChannel+0xa0>
 8006a78:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7e:	bf00      	nop
 8006a80:	08006ab5 	.word	0x08006ab5
 8006a84:	08006aed 	.word	0x08006aed
 8006a88:	08006aed 	.word	0x08006aed
 8006a8c:	08006aed 	.word	0x08006aed
 8006a90:	08006ac3 	.word	0x08006ac3
 8006a94:	08006aed 	.word	0x08006aed
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006aed 	.word	0x08006aed
 8006aa0:	08006ad1 	.word	0x08006ad1
 8006aa4:	08006aed 	.word	0x08006aed
 8006aa8:	08006aed 	.word	0x08006aed
 8006aac:	08006aed 	.word	0x08006aed
 8006ab0:	08006adf 	.word	0x08006adf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fab6 	bl	800702c <TIM_OC1_SetConfig>
      break;
 8006ac0:	e017      	b.n	8006af2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fb1f 	bl	800710c <TIM_OC2_SetConfig>
      break;
 8006ace:	e010      	b.n	8006af2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fb8e 	bl	80071f8 <TIM_OC3_SetConfig>
      break;
 8006adc:	e009      	b.n	8006af2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fbfb 	bl	80072e0 <TIM_OC4_SetConfig>
      break;
 8006aea:	e002      	b.n	8006af2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	75fb      	strb	r3, [r7, #23]
      break;
 8006af0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e0ae      	b.n	8006c80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b0c      	cmp	r3, #12
 8006b2e:	f200 809f 	bhi.w	8006c70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b32:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b6d 	.word	0x08006b6d
 8006b3c:	08006c71 	.word	0x08006c71
 8006b40:	08006c71 	.word	0x08006c71
 8006b44:	08006c71 	.word	0x08006c71
 8006b48:	08006bad 	.word	0x08006bad
 8006b4c:	08006c71 	.word	0x08006c71
 8006b50:	08006c71 	.word	0x08006c71
 8006b54:	08006c71 	.word	0x08006c71
 8006b58:	08006bef 	.word	0x08006bef
 8006b5c:	08006c71 	.word	0x08006c71
 8006b60:	08006c71 	.word	0x08006c71
 8006b64:	08006c71 	.word	0x08006c71
 8006b68:	08006c2f 	.word	0x08006c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68b9      	ldr	r1, [r7, #8]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fa5a 	bl	800702c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0208 	orr.w	r2, r2, #8
 8006b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0204 	bic.w	r2, r2, #4
 8006b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6999      	ldr	r1, [r3, #24]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691a      	ldr	r2, [r3, #16]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	619a      	str	r2, [r3, #24]
      break;
 8006baa:	e064      	b.n	8006c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 faaa 	bl	800710c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699a      	ldr	r2, [r3, #24]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6999      	ldr	r1, [r3, #24]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	021a      	lsls	r2, r3, #8
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	619a      	str	r2, [r3, #24]
      break;
 8006bec:	e043      	b.n	8006c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 faff 	bl	80071f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0208 	orr.w	r2, r2, #8
 8006c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0204 	bic.w	r2, r2, #4
 8006c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69d9      	ldr	r1, [r3, #28]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	61da      	str	r2, [r3, #28]
      break;
 8006c2c:	e023      	b.n	8006c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fb53 	bl	80072e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69da      	ldr	r2, [r3, #28]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69da      	ldr	r2, [r3, #28]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69d9      	ldr	r1, [r3, #28]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	021a      	lsls	r2, r3, #8
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	61da      	str	r2, [r3, #28]
      break;
 8006c6e:	e002      	b.n	8006c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	75fb      	strb	r3, [r7, #23]
      break;
 8006c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e0b4      	b.n	8006e0e <HAL_TIM_ConfigClockSource+0x186>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cdc:	d03e      	beq.n	8006d5c <HAL_TIM_ConfigClockSource+0xd4>
 8006cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce2:	f200 8087 	bhi.w	8006df4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cea:	f000 8086 	beq.w	8006dfa <HAL_TIM_ConfigClockSource+0x172>
 8006cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf2:	d87f      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf4:	2b70      	cmp	r3, #112	; 0x70
 8006cf6:	d01a      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0xa6>
 8006cf8:	2b70      	cmp	r3, #112	; 0x70
 8006cfa:	d87b      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cfc:	2b60      	cmp	r3, #96	; 0x60
 8006cfe:	d050      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x11a>
 8006d00:	2b60      	cmp	r3, #96	; 0x60
 8006d02:	d877      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x16c>
 8006d04:	2b50      	cmp	r3, #80	; 0x50
 8006d06:	d03c      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0xfa>
 8006d08:	2b50      	cmp	r3, #80	; 0x50
 8006d0a:	d873      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x16c>
 8006d0c:	2b40      	cmp	r3, #64	; 0x40
 8006d0e:	d058      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d86f      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x16c>
 8006d14:	2b30      	cmp	r3, #48	; 0x30
 8006d16:	d064      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x15a>
 8006d18:	2b30      	cmp	r3, #48	; 0x30
 8006d1a:	d86b      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x16c>
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d060      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x15a>
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	d867      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x16c>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d05c      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x15a>
 8006d28:	2b10      	cmp	r3, #16
 8006d2a:	d05a      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x15a>
 8006d2c:	e062      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	6899      	ldr	r1, [r3, #8]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f000 fc30 	bl	80075a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	609a      	str	r2, [r3, #8]
      break;
 8006d5a:	e04f      	b.n	8006dfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	6899      	ldr	r1, [r3, #8]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f000 fc19 	bl	80075a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d7e:	609a      	str	r2, [r3, #8]
      break;
 8006d80:	e03c      	b.n	8006dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6859      	ldr	r1, [r3, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f000 fb8d 	bl	80074ae <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2150      	movs	r1, #80	; 0x50
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 fbe6 	bl	800756c <TIM_ITRx_SetConfig>
      break;
 8006da0:	e02c      	b.n	8006dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f000 fbac 	bl	800750c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2160      	movs	r1, #96	; 0x60
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fbd6 	bl	800756c <TIM_ITRx_SetConfig>
      break;
 8006dc0:	e01c      	b.n	8006dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6859      	ldr	r1, [r3, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f000 fb6d 	bl	80074ae <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2140      	movs	r1, #64	; 0x40
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fbc6 	bl	800756c <TIM_ITRx_SetConfig>
      break;
 8006de0:	e00c      	b.n	8006dfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4619      	mov	r1, r3
 8006dec:	4610      	mov	r0, r2
 8006dee:	f000 fbbd 	bl	800756c <TIM_ITRx_SetConfig>
      break;
 8006df2:	e003      	b.n	8006dfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	73fb      	strb	r3, [r7, #15]
      break;
 8006df8:	e000      	b.n	8006dfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_TIM_SlaveConfigSynchro+0x18>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e031      	b.n	8006e92 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 faa3 	bl	800738c <TIM_SlaveTimer_SetConfig>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d009      	beq.n	8006e60 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e018      	b.n	8006e92 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e6e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e7e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ea2:	bf00      	nop
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eca:	bf00      	nop
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
	...

08006eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a40      	ldr	r2, [pc, #256]	; (8007000 <TIM_Base_SetConfig+0x114>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d013      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0a:	d00f      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a3d      	ldr	r2, [pc, #244]	; (8007004 <TIM_Base_SetConfig+0x118>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00b      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a3c      	ldr	r2, [pc, #240]	; (8007008 <TIM_Base_SetConfig+0x11c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d007      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a3b      	ldr	r2, [pc, #236]	; (800700c <TIM_Base_SetConfig+0x120>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a3a      	ldr	r2, [pc, #232]	; (8007010 <TIM_Base_SetConfig+0x124>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d108      	bne.n	8006f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a2f      	ldr	r2, [pc, #188]	; (8007000 <TIM_Base_SetConfig+0x114>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d02b      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4c:	d027      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a2c      	ldr	r2, [pc, #176]	; (8007004 <TIM_Base_SetConfig+0x118>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d023      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a2b      	ldr	r2, [pc, #172]	; (8007008 <TIM_Base_SetConfig+0x11c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d01f      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a2a      	ldr	r2, [pc, #168]	; (800700c <TIM_Base_SetConfig+0x120>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01b      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a29      	ldr	r2, [pc, #164]	; (8007010 <TIM_Base_SetConfig+0x124>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d017      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a28      	ldr	r2, [pc, #160]	; (8007014 <TIM_Base_SetConfig+0x128>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d013      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a27      	ldr	r2, [pc, #156]	; (8007018 <TIM_Base_SetConfig+0x12c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00f      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a26      	ldr	r2, [pc, #152]	; (800701c <TIM_Base_SetConfig+0x130>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00b      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a25      	ldr	r2, [pc, #148]	; (8007020 <TIM_Base_SetConfig+0x134>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d007      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a24      	ldr	r2, [pc, #144]	; (8007024 <TIM_Base_SetConfig+0x138>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d003      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a23      	ldr	r2, [pc, #140]	; (8007028 <TIM_Base_SetConfig+0x13c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d108      	bne.n	8006fb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a0a      	ldr	r2, [pc, #40]	; (8007000 <TIM_Base_SetConfig+0x114>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d003      	beq.n	8006fe4 <TIM_Base_SetConfig+0xf8>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a0c      	ldr	r2, [pc, #48]	; (8007010 <TIM_Base_SetConfig+0x124>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d103      	bne.n	8006fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	615a      	str	r2, [r3, #20]
}
 8006ff2:	bf00      	nop
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40010000 	.word	0x40010000
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40010400 	.word	0x40010400
 8007014:	40014000 	.word	0x40014000
 8007018:	40014400 	.word	0x40014400
 800701c:	40014800 	.word	0x40014800
 8007020:	40001800 	.word	0x40001800
 8007024:	40001c00 	.word	0x40001c00
 8007028:	40002000 	.word	0x40002000

0800702c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	f023 0201 	bic.w	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f023 0302 	bic.w	r3, r3, #2
 8007074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a20      	ldr	r2, [pc, #128]	; (8007104 <TIM_OC1_SetConfig+0xd8>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d003      	beq.n	8007090 <TIM_OC1_SetConfig+0x64>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a1f      	ldr	r2, [pc, #124]	; (8007108 <TIM_OC1_SetConfig+0xdc>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d10c      	bne.n	80070aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f023 0308 	bic.w	r3, r3, #8
 8007096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f023 0304 	bic.w	r3, r3, #4
 80070a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a15      	ldr	r2, [pc, #84]	; (8007104 <TIM_OC1_SetConfig+0xd8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d003      	beq.n	80070ba <TIM_OC1_SetConfig+0x8e>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a14      	ldr	r2, [pc, #80]	; (8007108 <TIM_OC1_SetConfig+0xdc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d111      	bne.n	80070de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	4313      	orrs	r3, r2
 80070dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	621a      	str	r2, [r3, #32]
}
 80070f8:	bf00      	nop
 80070fa:	371c      	adds	r7, #28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	40010000 	.word	0x40010000
 8007108:	40010400 	.word	0x40010400

0800710c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	f023 0210 	bic.w	r2, r3, #16
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f023 0320 	bic.w	r3, r3, #32
 8007156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a22      	ldr	r2, [pc, #136]	; (80071f0 <TIM_OC2_SetConfig+0xe4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_OC2_SetConfig+0x68>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a21      	ldr	r2, [pc, #132]	; (80071f4 <TIM_OC2_SetConfig+0xe8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d10d      	bne.n	8007190 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800717a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800718e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a17      	ldr	r2, [pc, #92]	; (80071f0 <TIM_OC2_SetConfig+0xe4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_OC2_SetConfig+0x94>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a16      	ldr	r2, [pc, #88]	; (80071f4 <TIM_OC2_SetConfig+0xe8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d113      	bne.n	80071c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	621a      	str	r2, [r3, #32]
}
 80071e2:	bf00      	nop
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40010000 	.word	0x40010000
 80071f4:	40010400 	.word	0x40010400

080071f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a21      	ldr	r2, [pc, #132]	; (80072d8 <TIM_OC3_SetConfig+0xe0>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d003      	beq.n	800725e <TIM_OC3_SetConfig+0x66>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a20      	ldr	r2, [pc, #128]	; (80072dc <TIM_OC3_SetConfig+0xe4>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d10d      	bne.n	800727a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a16      	ldr	r2, [pc, #88]	; (80072d8 <TIM_OC3_SetConfig+0xe0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d003      	beq.n	800728a <TIM_OC3_SetConfig+0x92>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a15      	ldr	r2, [pc, #84]	; (80072dc <TIM_OC3_SetConfig+0xe4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d113      	bne.n	80072b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	621a      	str	r2, [r3, #32]
}
 80072cc:	bf00      	nop
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	40010000 	.word	0x40010000
 80072dc:	40010400 	.word	0x40010400

080072e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800730e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800732a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	031b      	lsls	r3, r3, #12
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4313      	orrs	r3, r2
 8007336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a12      	ldr	r2, [pc, #72]	; (8007384 <TIM_OC4_SetConfig+0xa4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_OC4_SetConfig+0x68>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a11      	ldr	r2, [pc, #68]	; (8007388 <TIM_OC4_SetConfig+0xa8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d109      	bne.n	800735c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800734e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	019b      	lsls	r3, r3, #6
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40010000 	.word	0x40010000
 8007388:	40010400 	.word	0x40010400

0800738c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f023 0307 	bic.w	r3, r3, #7
 80073ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2b70      	cmp	r3, #112	; 0x70
 80073d4:	d01a      	beq.n	800740c <TIM_SlaveTimer_SetConfig+0x80>
 80073d6:	2b70      	cmp	r3, #112	; 0x70
 80073d8:	d860      	bhi.n	800749c <TIM_SlaveTimer_SetConfig+0x110>
 80073da:	2b60      	cmp	r3, #96	; 0x60
 80073dc:	d054      	beq.n	8007488 <TIM_SlaveTimer_SetConfig+0xfc>
 80073de:	2b60      	cmp	r3, #96	; 0x60
 80073e0:	d85c      	bhi.n	800749c <TIM_SlaveTimer_SetConfig+0x110>
 80073e2:	2b50      	cmp	r3, #80	; 0x50
 80073e4:	d046      	beq.n	8007474 <TIM_SlaveTimer_SetConfig+0xe8>
 80073e6:	2b50      	cmp	r3, #80	; 0x50
 80073e8:	d858      	bhi.n	800749c <TIM_SlaveTimer_SetConfig+0x110>
 80073ea:	2b40      	cmp	r3, #64	; 0x40
 80073ec:	d019      	beq.n	8007422 <TIM_SlaveTimer_SetConfig+0x96>
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d854      	bhi.n	800749c <TIM_SlaveTimer_SetConfig+0x110>
 80073f2:	2b30      	cmp	r3, #48	; 0x30
 80073f4:	d055      	beq.n	80074a2 <TIM_SlaveTimer_SetConfig+0x116>
 80073f6:	2b30      	cmp	r3, #48	; 0x30
 80073f8:	d850      	bhi.n	800749c <TIM_SlaveTimer_SetConfig+0x110>
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d051      	beq.n	80074a2 <TIM_SlaveTimer_SetConfig+0x116>
 80073fe:	2b20      	cmp	r3, #32
 8007400:	d84c      	bhi.n	800749c <TIM_SlaveTimer_SetConfig+0x110>
 8007402:	2b00      	cmp	r3, #0
 8007404:	d04d      	beq.n	80074a2 <TIM_SlaveTimer_SetConfig+0x116>
 8007406:	2b10      	cmp	r3, #16
 8007408:	d04b      	beq.n	80074a2 <TIM_SlaveTimer_SetConfig+0x116>
 800740a:	e047      	b.n	800749c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	68d9      	ldr	r1, [r3, #12]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f000 f8c1 	bl	80075a2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007420:	e040      	b.n	80074a4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b05      	cmp	r3, #5
 8007428:	d101      	bne.n	800742e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e03b      	b.n	80074a6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6a1a      	ldr	r2, [r3, #32]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 0201 	bic.w	r2, r2, #1
 8007444:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007454:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	4313      	orrs	r3, r2
 8007460:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	621a      	str	r2, [r3, #32]
      break;
 8007472:	e017      	b.n	80074a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6818      	ldr	r0, [r3, #0]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	6899      	ldr	r1, [r3, #8]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	461a      	mov	r2, r3
 8007482:	f000 f814 	bl	80074ae <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007486:	e00d      	b.n	80074a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	6899      	ldr	r1, [r3, #8]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	461a      	mov	r2, r3
 8007496:	f000 f839 	bl	800750c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800749a:	e003      	b.n	80074a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	75fb      	strb	r3, [r7, #23]
      break;
 80074a0:	e000      	b.n	80074a4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80074a2:	bf00      	nop
  }

  return status;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b087      	sub	sp, #28
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	f023 0201 	bic.w	r2, r3, #1
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f023 030a 	bic.w	r3, r3, #10
 80074ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	621a      	str	r2, [r3, #32]
}
 8007500:	bf00      	nop
 8007502:	371c      	adds	r7, #28
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	f023 0210 	bic.w	r2, r3, #16
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007536:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	031b      	lsls	r3, r3, #12
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	4313      	orrs	r3, r2
 8007540:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007548:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	4313      	orrs	r3, r2
 8007552:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	621a      	str	r2, [r3, #32]
}
 8007560:	bf00      	nop
 8007562:	371c      	adds	r7, #28
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007582:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	f043 0307 	orr.w	r3, r3, #7
 800758e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	609a      	str	r2, [r3, #8]
}
 8007596:	bf00      	nop
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b087      	sub	sp, #28
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
 80075ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	021a      	lsls	r2, r3, #8
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	431a      	orrs	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	609a      	str	r2, [r3, #8]
}
 80075d6:	bf00      	nop
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b087      	sub	sp, #28
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	2201      	movs	r2, #1
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a1a      	ldr	r2, [r3, #32]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	43db      	mvns	r3, r3
 8007604:	401a      	ands	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a1a      	ldr	r2, [r3, #32]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f003 031f 	and.w	r3, r3, #31
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	fa01 f303 	lsl.w	r3, r1, r3
 800761a:	431a      	orrs	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	621a      	str	r2, [r3, #32]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007640:	2302      	movs	r3, #2
 8007642:	e05a      	b.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a21      	ldr	r2, [pc, #132]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d022      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007690:	d01d      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1d      	ldr	r2, [pc, #116]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d018      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a1b      	ldr	r2, [pc, #108]	; (8007710 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d013      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1a      	ldr	r2, [pc, #104]	; (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00e      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a18      	ldr	r2, [pc, #96]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d009      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a17      	ldr	r2, [pc, #92]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d004      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a15      	ldr	r2, [pc, #84]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d10c      	bne.n	80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40010000 	.word	0x40010000
 800770c:	40000400 	.word	0x40000400
 8007710:	40000800 	.word	0x40000800
 8007714:	40000c00 	.word	0x40000c00
 8007718:	40010400 	.word	0x40010400
 800771c:	40014000 	.word	0x40014000
 8007720:	40001800 	.word	0x40001800

08007724 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800773c:	2302      	movs	r3, #2
 800773e:	e03d      	b.n	80077bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e03f      	b.n	8007882 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d106      	bne.n	800781c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7fc fe42 	bl	80044a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2224      	movs	r2, #36	; 0x24
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007832:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fdef 	bl	8008418 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007848:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	695a      	ldr	r2, [r3, #20]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007858:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007868:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	4613      	mov	r3, r2
 8007896:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d130      	bne.n	8007906 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <HAL_UART_Transmit_IT+0x26>
 80078aa:	88fb      	ldrh	r3, [r7, #6]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e029      	b.n	8007908 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_UART_Transmit_IT+0x38>
 80078be:	2302      	movs	r3, #2
 80078c0:	e022      	b.n	8007908 <HAL_UART_Transmit_IT+0x7e>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	88fa      	ldrh	r2, [r7, #6]
 80078d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	88fa      	ldrh	r2, [r7, #6]
 80078da:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2221      	movs	r2, #33	; 0x21
 80078e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007900:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	e000      	b.n	8007908 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007906:	2302      	movs	r3, #2
  }
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b20      	cmp	r3, #32
 800792c:	d11d      	bne.n	800796a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_UART_Receive_IT+0x26>
 8007934:	88fb      	ldrh	r3, [r7, #6]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e016      	b.n	800796c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_UART_Receive_IT+0x38>
 8007948:	2302      	movs	r3, #2
 800794a:	e00f      	b.n	800796c <HAL_UART_Receive_IT+0x58>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800795a:	88fb      	ldrh	r3, [r7, #6]
 800795c:	461a      	mov	r2, r3
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fb69 	bl	8008038 <UART_Start_Receive_IT>
 8007966:	4603      	mov	r3, r0
 8007968:	e000      	b.n	800796c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800796a:	2302      	movs	r3, #2
  }
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b09a      	sub	sp, #104	; 0x68
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	330c      	adds	r3, #12
 8007982:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800798c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800798e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007992:	667b      	str	r3, [r7, #100]	; 0x64
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	330c      	adds	r3, #12
 800799a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800799c:	657a      	str	r2, [r7, #84]	; 0x54
 800799e:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e5      	bne.n	800797c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3314      	adds	r3, #20
 80079b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	f023 0301 	bic.w	r3, r3, #1
 80079c6:	663b      	str	r3, [r7, #96]	; 0x60
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3314      	adds	r3, #20
 80079ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079d0:	643a      	str	r2, [r7, #64]	; 0x40
 80079d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e5      	bne.n	80079b0 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d119      	bne.n	8007a20 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	330c      	adds	r3, #12
 80079f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	f023 0310 	bic.w	r3, r3, #16
 8007a02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a14:	e841 2300 	strex	r3, r2, [r1]
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e5      	bne.n	80079ec <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2a:	2b40      	cmp	r3, #64	; 0x40
 8007a2c:	d13f      	bne.n	8007aae <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3314      	adds	r3, #20
 8007a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a44:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3314      	adds	r3, #20
 8007a4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a4e:	61ba      	str	r2, [r7, #24]
 8007a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6979      	ldr	r1, [r7, #20]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e5      	bne.n	8007a2e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d013      	beq.n	8007a92 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	4a19      	ldr	r2, [pc, #100]	; (8007ad4 <HAL_UART_AbortReceive_IT+0x160>)
 8007a70:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fd fcd4 	bl	8005424 <HAL_DMA_Abort_IT>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d022      	beq.n	8007ac8 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4798      	blx	r3
 8007a90:	e01a      	b.n	8007ac8 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 faa4 	bl	8007ff4 <HAL_UART_AbortReceiveCpltCallback>
 8007aac:	e00c      	b.n	8007ac8 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa96 	bl	8007ff4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3768      	adds	r7, #104	; 0x68
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	080081a3 	.word	0x080081a3

08007ad8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b0ba      	sub	sp, #232	; 0xe8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10f      	bne.n	8007b3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <HAL_UART_IRQHandler+0x66>
 8007b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fbb3 	bl	80082a2 <UART_Receive_IT>
      return;
 8007b3c:	e256      	b.n	8007fec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 80de 	beq.w	8007d04 <HAL_UART_IRQHandler+0x22c>
 8007b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d106      	bne.n	8007b62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80d1 	beq.w	8007d04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <HAL_UART_IRQHandler+0xae>
 8007b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	f043 0201 	orr.w	r2, r3, #1
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00b      	beq.n	8007baa <HAL_UART_IRQHandler+0xd2>
 8007b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d005      	beq.n	8007baa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba2:	f043 0202 	orr.w	r2, r3, #2
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00b      	beq.n	8007bce <HAL_UART_IRQHandler+0xf6>
 8007bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d005      	beq.n	8007bce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	f043 0204 	orr.w	r2, r3, #4
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d011      	beq.n	8007bfe <HAL_UART_IRQHandler+0x126>
 8007bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d105      	bne.n	8007bf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d005      	beq.n	8007bfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	f043 0208 	orr.w	r2, r3, #8
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 81ed 	beq.w	8007fe2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d008      	beq.n	8007c26 <HAL_UART_IRQHandler+0x14e>
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fb3e 	bl	80082a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c30:	2b40      	cmp	r3, #64	; 0x40
 8007c32:	bf0c      	ite	eq
 8007c34:	2301      	moveq	r3, #1
 8007c36:	2300      	movne	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	f003 0308 	and.w	r3, r3, #8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d103      	bne.n	8007c52 <HAL_UART_IRQHandler+0x17a>
 8007c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d04f      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa2e 	bl	80080b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c62:	2b40      	cmp	r3, #64	; 0x40
 8007c64:	d141      	bne.n	8007cea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3314      	adds	r3, #20
 8007c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3314      	adds	r3, #20
 8007c8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1d9      	bne.n	8007c66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d013      	beq.n	8007ce2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbe:	4a7d      	ldr	r2, [pc, #500]	; (8007eb4 <HAL_UART_IRQHandler+0x3dc>)
 8007cc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fd fbac 	bl	8005424 <HAL_DMA_Abort_IT>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d016      	beq.n	8007d00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce0:	e00e      	b.n	8007d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7f9 ff54 	bl	8001b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce8:	e00a      	b.n	8007d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7f9 ff50 	bl	8001b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf0:	e006      	b.n	8007d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7f9 ff4c 	bl	8001b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007cfe:	e170      	b.n	8007fe2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d00:	bf00      	nop
    return;
 8007d02:	e16e      	b.n	8007fe2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	f040 814a 	bne.w	8007fa2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d12:	f003 0310 	and.w	r3, r3, #16
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 8143 	beq.w	8007fa2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 813c 	beq.w	8007fa2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60bb      	str	r3, [r7, #8]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	60bb      	str	r3, [r7, #8]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	60bb      	str	r3, [r7, #8]
 8007d3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	f040 80b4 	bne.w	8007eb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 8140 	beq.w	8007fe6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	f080 8139 	bcs.w	8007fe6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d86:	f000 8088 	beq.w	8007e9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	330c      	adds	r3, #12
 8007d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	330c      	adds	r3, #12
 8007db2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007db6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1d9      	bne.n	8007d8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3314      	adds	r3, #20
 8007ddc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007de8:	f023 0301 	bic.w	r3, r3, #1
 8007dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3314      	adds	r3, #20
 8007df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e1      	bne.n	8007dd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3314      	adds	r3, #20
 8007e18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3314      	adds	r3, #20
 8007e32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e3      	bne.n	8007e12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	330c      	adds	r3, #12
 8007e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e62:	e853 3f00 	ldrex	r3, [r3]
 8007e66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e6a:	f023 0310 	bic.w	r3, r3, #16
 8007e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	330c      	adds	r3, #12
 8007e78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e3      	bne.n	8007e58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fd fa55 	bl	8005344 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f8ac 	bl	8008008 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007eb0:	e099      	b.n	8007fe6 <HAL_UART_IRQHandler+0x50e>
 8007eb2:	bf00      	nop
 8007eb4:	0800817b 	.word	0x0800817b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 808b 	beq.w	8007fea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 8086 	beq.w	8007fea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	330c      	adds	r3, #12
 8007ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	330c      	adds	r3, #12
 8007efe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f02:	647a      	str	r2, [r7, #68]	; 0x44
 8007f04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e3      	bne.n	8007ede <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3314      	adds	r3, #20
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	623b      	str	r3, [r7, #32]
   return(result);
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	f023 0301 	bic.w	r3, r3, #1
 8007f2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	3314      	adds	r3, #20
 8007f36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e3      	bne.n	8007f16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	330c      	adds	r3, #12
 8007f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0310 	bic.w	r3, r3, #16
 8007f72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	330c      	adds	r3, #12
 8007f7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f80:	61fa      	str	r2, [r7, #28]
 8007f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	69b9      	ldr	r1, [r7, #24]
 8007f86:	69fa      	ldr	r2, [r7, #28]
 8007f88:	e841 2300 	strex	r3, r2, [r1]
 8007f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e3      	bne.n	8007f5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f834 	bl	8008008 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fa0:	e023      	b.n	8007fea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d009      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x4ea>
 8007fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f909 	bl	80081d2 <UART_Transmit_IT>
    return;
 8007fc0:	e014      	b.n	8007fec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00e      	beq.n	8007fec <HAL_UART_IRQHandler+0x514>
 8007fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d008      	beq.n	8007fec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f949 	bl	8008272 <UART_EndTransmit_IT>
    return;
 8007fe0:	e004      	b.n	8007fec <HAL_UART_IRQHandler+0x514>
    return;
 8007fe2:	bf00      	nop
 8007fe4:	e002      	b.n	8007fec <HAL_UART_IRQHandler+0x514>
      return;
 8007fe6:	bf00      	nop
 8007fe8:	e000      	b.n	8007fec <HAL_UART_IRQHandler+0x514>
      return;
 8007fea:	bf00      	nop
  }
}
 8007fec:	37e8      	adds	r7, #232	; 0xe8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop

08007ff4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	4613      	mov	r3, r2
 8008044:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	88fa      	ldrh	r2, [r7, #6]
 8008050:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	88fa      	ldrh	r2, [r7, #6]
 8008056:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2222      	movs	r2, #34	; 0x22
 8008062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008084:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	695a      	ldr	r2, [r3, #20]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f042 0201 	orr.w	r2, r2, #1
 8008094:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f042 0220 	orr.w	r2, r2, #32
 80080a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b095      	sub	sp, #84	; 0x54
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c6:	e853 3f00 	ldrex	r3, [r3]
 80080ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	330c      	adds	r3, #12
 80080da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080dc:	643a      	str	r2, [r7, #64]	; 0x40
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080e4:	e841 2300 	strex	r3, r2, [r1]
 80080e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1e5      	bne.n	80080bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3314      	adds	r3, #20
 80080f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	f023 0301 	bic.w	r3, r3, #1
 8008106:	64bb      	str	r3, [r7, #72]	; 0x48
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3314      	adds	r3, #20
 800810e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008110:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008118:	e841 2300 	strex	r3, r2, [r1]
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e5      	bne.n	80080f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	2b01      	cmp	r3, #1
 800812a:	d119      	bne.n	8008160 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	330c      	adds	r3, #12
 8008132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	e853 3f00 	ldrex	r3, [r3]
 800813a:	60bb      	str	r3, [r7, #8]
   return(result);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f023 0310 	bic.w	r3, r3, #16
 8008142:	647b      	str	r3, [r7, #68]	; 0x44
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	330c      	adds	r3, #12
 800814a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800814c:	61ba      	str	r2, [r7, #24]
 800814e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008150:	6979      	ldr	r1, [r7, #20]
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	e841 2300 	strex	r3, r2, [r1]
 8008158:	613b      	str	r3, [r7, #16]
   return(result);
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1e5      	bne.n	800812c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2220      	movs	r2, #32
 8008164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800816e:	bf00      	nop
 8008170:	3754      	adds	r7, #84	; 0x54
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b084      	sub	sp, #16
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008186:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7f9 fcfb 	bl	8001b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ae:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff ff15 	bl	8007ff4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081ca:	bf00      	nop
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b085      	sub	sp, #20
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b21      	cmp	r3, #33	; 0x21
 80081e4:	d13e      	bne.n	8008264 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ee:	d114      	bne.n	800821a <UART_Transmit_IT+0x48>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d110      	bne.n	800821a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800820c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	1c9a      	adds	r2, r3, #2
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	621a      	str	r2, [r3, #32]
 8008218:	e008      	b.n	800822c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	1c59      	adds	r1, r3, #1
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6211      	str	r1, [r2, #32]
 8008224:	781a      	ldrb	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	b29b      	uxth	r3, r3
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	4619      	mov	r1, r3
 800823a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10f      	bne.n	8008260 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800824e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800825e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	e000      	b.n	8008266 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008264:	2302      	movs	r3, #2
  }
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008288:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2220      	movs	r2, #32
 800828e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7f9 fc4a 	bl	8001b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b08c      	sub	sp, #48	; 0x30
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b22      	cmp	r3, #34	; 0x22
 80082b4:	f040 80ab 	bne.w	800840e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c0:	d117      	bne.n	80082f2 <UART_Receive_IT+0x50>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d113      	bne.n	80082f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	1c9a      	adds	r2, r3, #2
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	629a      	str	r2, [r3, #40]	; 0x28
 80082f0:	e026      	b.n	8008340 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008304:	d007      	beq.n	8008316 <UART_Receive_IT+0x74>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10a      	bne.n	8008324 <UART_Receive_IT+0x82>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d106      	bne.n	8008324 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	b2da      	uxtb	r2, r3
 800831e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	e008      	b.n	8008336 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008330:	b2da      	uxtb	r2, r3
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008344:	b29b      	uxth	r3, r3
 8008346:	3b01      	subs	r3, #1
 8008348:	b29b      	uxth	r3, r3
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	4619      	mov	r1, r3
 800834e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008350:	2b00      	cmp	r3, #0
 8008352:	d15a      	bne.n	800840a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68da      	ldr	r2, [r3, #12]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f022 0220 	bic.w	r2, r2, #32
 8008362:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008372:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	695a      	ldr	r2, [r3, #20]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f022 0201 	bic.w	r2, r2, #1
 8008382:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2220      	movs	r2, #32
 8008388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008390:	2b01      	cmp	r3, #1
 8008392:	d135      	bne.n	8008400 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	330c      	adds	r3, #12
 80083a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	613b      	str	r3, [r7, #16]
   return(result);
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f023 0310 	bic.w	r3, r3, #16
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	330c      	adds	r3, #12
 80083b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ba:	623a      	str	r2, [r7, #32]
 80083bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	69f9      	ldr	r1, [r7, #28]
 80083c0:	6a3a      	ldr	r2, [r7, #32]
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e5      	bne.n	800839a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b10      	cmp	r3, #16
 80083da:	d10a      	bne.n	80083f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff fe05 	bl	8008008 <HAL_UARTEx_RxEventCallback>
 80083fe:	e002      	b.n	8008406 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7f9 fb81 	bl	8001b08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	e002      	b.n	8008410 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	e000      	b.n	8008410 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800840e:	2302      	movs	r3, #2
  }
}
 8008410:	4618      	mov	r0, r3
 8008412:	3730      	adds	r7, #48	; 0x30
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800841c:	b0c0      	sub	sp, #256	; 0x100
 800841e:	af00      	add	r7, sp, #0
 8008420:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008434:	68d9      	ldr	r1, [r3, #12]
 8008436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	ea40 0301 	orr.w	r3, r0, r1
 8008440:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008446:	689a      	ldr	r2, [r3, #8]
 8008448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	431a      	orrs	r2, r3
 8008450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	431a      	orrs	r2, r3
 8008458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	4313      	orrs	r3, r2
 8008460:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008470:	f021 010c 	bic.w	r1, r1, #12
 8008474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800847e:	430b      	orrs	r3, r1
 8008480:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800848e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008492:	6999      	ldr	r1, [r3, #24]
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	ea40 0301 	orr.w	r3, r0, r1
 800849e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	4b8f      	ldr	r3, [pc, #572]	; (80086e4 <UART_SetConfig+0x2cc>)
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d005      	beq.n	80084b8 <UART_SetConfig+0xa0>
 80084ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	4b8d      	ldr	r3, [pc, #564]	; (80086e8 <UART_SetConfig+0x2d0>)
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d104      	bne.n	80084c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084b8:	f7fd ff08 	bl	80062cc <HAL_RCC_GetPCLK2Freq>
 80084bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80084c0:	e003      	b.n	80084ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084c2:	f7fd feef 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 80084c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d4:	f040 810c 	bne.w	80086f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084dc:	2200      	movs	r2, #0
 80084de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80084e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80084ea:	4622      	mov	r2, r4
 80084ec:	462b      	mov	r3, r5
 80084ee:	1891      	adds	r1, r2, r2
 80084f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80084f2:	415b      	adcs	r3, r3
 80084f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80084fa:	4621      	mov	r1, r4
 80084fc:	eb12 0801 	adds.w	r8, r2, r1
 8008500:	4629      	mov	r1, r5
 8008502:	eb43 0901 	adc.w	r9, r3, r1
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	f04f 0300 	mov.w	r3, #0
 800850e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800851a:	4690      	mov	r8, r2
 800851c:	4699      	mov	r9, r3
 800851e:	4623      	mov	r3, r4
 8008520:	eb18 0303 	adds.w	r3, r8, r3
 8008524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008528:	462b      	mov	r3, r5
 800852a:	eb49 0303 	adc.w	r3, r9, r3
 800852e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800853e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008542:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008546:	460b      	mov	r3, r1
 8008548:	18db      	adds	r3, r3, r3
 800854a:	653b      	str	r3, [r7, #80]	; 0x50
 800854c:	4613      	mov	r3, r2
 800854e:	eb42 0303 	adc.w	r3, r2, r3
 8008552:	657b      	str	r3, [r7, #84]	; 0x54
 8008554:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008558:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800855c:	f7f8 fa52 	bl	8000a04 <__aeabi_uldivmod>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4b61      	ldr	r3, [pc, #388]	; (80086ec <UART_SetConfig+0x2d4>)
 8008566:	fba3 2302 	umull	r2, r3, r3, r2
 800856a:	095b      	lsrs	r3, r3, #5
 800856c:	011c      	lsls	r4, r3, #4
 800856e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008572:	2200      	movs	r2, #0
 8008574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008578:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800857c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008580:	4642      	mov	r2, r8
 8008582:	464b      	mov	r3, r9
 8008584:	1891      	adds	r1, r2, r2
 8008586:	64b9      	str	r1, [r7, #72]	; 0x48
 8008588:	415b      	adcs	r3, r3
 800858a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800858c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008590:	4641      	mov	r1, r8
 8008592:	eb12 0a01 	adds.w	sl, r2, r1
 8008596:	4649      	mov	r1, r9
 8008598:	eb43 0b01 	adc.w	fp, r3, r1
 800859c:	f04f 0200 	mov.w	r2, #0
 80085a0:	f04f 0300 	mov.w	r3, #0
 80085a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085b0:	4692      	mov	sl, r2
 80085b2:	469b      	mov	fp, r3
 80085b4:	4643      	mov	r3, r8
 80085b6:	eb1a 0303 	adds.w	r3, sl, r3
 80085ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085be:	464b      	mov	r3, r9
 80085c0:	eb4b 0303 	adc.w	r3, fp, r3
 80085c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80085c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80085d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80085dc:	460b      	mov	r3, r1
 80085de:	18db      	adds	r3, r3, r3
 80085e0:	643b      	str	r3, [r7, #64]	; 0x40
 80085e2:	4613      	mov	r3, r2
 80085e4:	eb42 0303 	adc.w	r3, r2, r3
 80085e8:	647b      	str	r3, [r7, #68]	; 0x44
 80085ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80085f2:	f7f8 fa07 	bl	8000a04 <__aeabi_uldivmod>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	4611      	mov	r1, r2
 80085fc:	4b3b      	ldr	r3, [pc, #236]	; (80086ec <UART_SetConfig+0x2d4>)
 80085fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008602:	095b      	lsrs	r3, r3, #5
 8008604:	2264      	movs	r2, #100	; 0x64
 8008606:	fb02 f303 	mul.w	r3, r2, r3
 800860a:	1acb      	subs	r3, r1, r3
 800860c:	00db      	lsls	r3, r3, #3
 800860e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008612:	4b36      	ldr	r3, [pc, #216]	; (80086ec <UART_SetConfig+0x2d4>)
 8008614:	fba3 2302 	umull	r2, r3, r3, r2
 8008618:	095b      	lsrs	r3, r3, #5
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008620:	441c      	add	r4, r3
 8008622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008626:	2200      	movs	r2, #0
 8008628:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800862c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008630:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008634:	4642      	mov	r2, r8
 8008636:	464b      	mov	r3, r9
 8008638:	1891      	adds	r1, r2, r2
 800863a:	63b9      	str	r1, [r7, #56]	; 0x38
 800863c:	415b      	adcs	r3, r3
 800863e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008640:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008644:	4641      	mov	r1, r8
 8008646:	1851      	adds	r1, r2, r1
 8008648:	6339      	str	r1, [r7, #48]	; 0x30
 800864a:	4649      	mov	r1, r9
 800864c:	414b      	adcs	r3, r1
 800864e:	637b      	str	r3, [r7, #52]	; 0x34
 8008650:	f04f 0200 	mov.w	r2, #0
 8008654:	f04f 0300 	mov.w	r3, #0
 8008658:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800865c:	4659      	mov	r1, fp
 800865e:	00cb      	lsls	r3, r1, #3
 8008660:	4651      	mov	r1, sl
 8008662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008666:	4651      	mov	r1, sl
 8008668:	00ca      	lsls	r2, r1, #3
 800866a:	4610      	mov	r0, r2
 800866c:	4619      	mov	r1, r3
 800866e:	4603      	mov	r3, r0
 8008670:	4642      	mov	r2, r8
 8008672:	189b      	adds	r3, r3, r2
 8008674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008678:	464b      	mov	r3, r9
 800867a:	460a      	mov	r2, r1
 800867c:	eb42 0303 	adc.w	r3, r2, r3
 8008680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008690:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008694:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008698:	460b      	mov	r3, r1
 800869a:	18db      	adds	r3, r3, r3
 800869c:	62bb      	str	r3, [r7, #40]	; 0x28
 800869e:	4613      	mov	r3, r2
 80086a0:	eb42 0303 	adc.w	r3, r2, r3
 80086a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80086ae:	f7f8 f9a9 	bl	8000a04 <__aeabi_uldivmod>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <UART_SetConfig+0x2d4>)
 80086b8:	fba3 1302 	umull	r1, r3, r3, r2
 80086bc:	095b      	lsrs	r3, r3, #5
 80086be:	2164      	movs	r1, #100	; 0x64
 80086c0:	fb01 f303 	mul.w	r3, r1, r3
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	3332      	adds	r3, #50	; 0x32
 80086ca:	4a08      	ldr	r2, [pc, #32]	; (80086ec <UART_SetConfig+0x2d4>)
 80086cc:	fba2 2303 	umull	r2, r3, r2, r3
 80086d0:	095b      	lsrs	r3, r3, #5
 80086d2:	f003 0207 	and.w	r2, r3, #7
 80086d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4422      	add	r2, r4
 80086de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086e0:	e106      	b.n	80088f0 <UART_SetConfig+0x4d8>
 80086e2:	bf00      	nop
 80086e4:	40011000 	.word	0x40011000
 80086e8:	40011400 	.word	0x40011400
 80086ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086f4:	2200      	movs	r2, #0
 80086f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80086fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008702:	4642      	mov	r2, r8
 8008704:	464b      	mov	r3, r9
 8008706:	1891      	adds	r1, r2, r2
 8008708:	6239      	str	r1, [r7, #32]
 800870a:	415b      	adcs	r3, r3
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
 800870e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008712:	4641      	mov	r1, r8
 8008714:	1854      	adds	r4, r2, r1
 8008716:	4649      	mov	r1, r9
 8008718:	eb43 0501 	adc.w	r5, r3, r1
 800871c:	f04f 0200 	mov.w	r2, #0
 8008720:	f04f 0300 	mov.w	r3, #0
 8008724:	00eb      	lsls	r3, r5, #3
 8008726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800872a:	00e2      	lsls	r2, r4, #3
 800872c:	4614      	mov	r4, r2
 800872e:	461d      	mov	r5, r3
 8008730:	4643      	mov	r3, r8
 8008732:	18e3      	adds	r3, r4, r3
 8008734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008738:	464b      	mov	r3, r9
 800873a:	eb45 0303 	adc.w	r3, r5, r3
 800873e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800874e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008752:	f04f 0200 	mov.w	r2, #0
 8008756:	f04f 0300 	mov.w	r3, #0
 800875a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800875e:	4629      	mov	r1, r5
 8008760:	008b      	lsls	r3, r1, #2
 8008762:	4621      	mov	r1, r4
 8008764:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008768:	4621      	mov	r1, r4
 800876a:	008a      	lsls	r2, r1, #2
 800876c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008770:	f7f8 f948 	bl	8000a04 <__aeabi_uldivmod>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4b60      	ldr	r3, [pc, #384]	; (80088fc <UART_SetConfig+0x4e4>)
 800877a:	fba3 2302 	umull	r2, r3, r3, r2
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	011c      	lsls	r4, r3, #4
 8008782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008786:	2200      	movs	r2, #0
 8008788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800878c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008790:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008794:	4642      	mov	r2, r8
 8008796:	464b      	mov	r3, r9
 8008798:	1891      	adds	r1, r2, r2
 800879a:	61b9      	str	r1, [r7, #24]
 800879c:	415b      	adcs	r3, r3
 800879e:	61fb      	str	r3, [r7, #28]
 80087a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087a4:	4641      	mov	r1, r8
 80087a6:	1851      	adds	r1, r2, r1
 80087a8:	6139      	str	r1, [r7, #16]
 80087aa:	4649      	mov	r1, r9
 80087ac:	414b      	adcs	r3, r1
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	f04f 0200 	mov.w	r2, #0
 80087b4:	f04f 0300 	mov.w	r3, #0
 80087b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087bc:	4659      	mov	r1, fp
 80087be:	00cb      	lsls	r3, r1, #3
 80087c0:	4651      	mov	r1, sl
 80087c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087c6:	4651      	mov	r1, sl
 80087c8:	00ca      	lsls	r2, r1, #3
 80087ca:	4610      	mov	r0, r2
 80087cc:	4619      	mov	r1, r3
 80087ce:	4603      	mov	r3, r0
 80087d0:	4642      	mov	r2, r8
 80087d2:	189b      	adds	r3, r3, r2
 80087d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087d8:	464b      	mov	r3, r9
 80087da:	460a      	mov	r2, r1
 80087dc:	eb42 0303 	adc.w	r3, r2, r3
 80087e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80087ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80087f0:	f04f 0200 	mov.w	r2, #0
 80087f4:	f04f 0300 	mov.w	r3, #0
 80087f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80087fc:	4649      	mov	r1, r9
 80087fe:	008b      	lsls	r3, r1, #2
 8008800:	4641      	mov	r1, r8
 8008802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008806:	4641      	mov	r1, r8
 8008808:	008a      	lsls	r2, r1, #2
 800880a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800880e:	f7f8 f8f9 	bl	8000a04 <__aeabi_uldivmod>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4611      	mov	r1, r2
 8008818:	4b38      	ldr	r3, [pc, #224]	; (80088fc <UART_SetConfig+0x4e4>)
 800881a:	fba3 2301 	umull	r2, r3, r3, r1
 800881e:	095b      	lsrs	r3, r3, #5
 8008820:	2264      	movs	r2, #100	; 0x64
 8008822:	fb02 f303 	mul.w	r3, r2, r3
 8008826:	1acb      	subs	r3, r1, r3
 8008828:	011b      	lsls	r3, r3, #4
 800882a:	3332      	adds	r3, #50	; 0x32
 800882c:	4a33      	ldr	r2, [pc, #204]	; (80088fc <UART_SetConfig+0x4e4>)
 800882e:	fba2 2303 	umull	r2, r3, r2, r3
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008838:	441c      	add	r4, r3
 800883a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800883e:	2200      	movs	r2, #0
 8008840:	673b      	str	r3, [r7, #112]	; 0x70
 8008842:	677a      	str	r2, [r7, #116]	; 0x74
 8008844:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008848:	4642      	mov	r2, r8
 800884a:	464b      	mov	r3, r9
 800884c:	1891      	adds	r1, r2, r2
 800884e:	60b9      	str	r1, [r7, #8]
 8008850:	415b      	adcs	r3, r3
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008858:	4641      	mov	r1, r8
 800885a:	1851      	adds	r1, r2, r1
 800885c:	6039      	str	r1, [r7, #0]
 800885e:	4649      	mov	r1, r9
 8008860:	414b      	adcs	r3, r1
 8008862:	607b      	str	r3, [r7, #4]
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008870:	4659      	mov	r1, fp
 8008872:	00cb      	lsls	r3, r1, #3
 8008874:	4651      	mov	r1, sl
 8008876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800887a:	4651      	mov	r1, sl
 800887c:	00ca      	lsls	r2, r1, #3
 800887e:	4610      	mov	r0, r2
 8008880:	4619      	mov	r1, r3
 8008882:	4603      	mov	r3, r0
 8008884:	4642      	mov	r2, r8
 8008886:	189b      	adds	r3, r3, r2
 8008888:	66bb      	str	r3, [r7, #104]	; 0x68
 800888a:	464b      	mov	r3, r9
 800888c:	460a      	mov	r2, r1
 800888e:	eb42 0303 	adc.w	r3, r2, r3
 8008892:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	663b      	str	r3, [r7, #96]	; 0x60
 800889e:	667a      	str	r2, [r7, #100]	; 0x64
 80088a0:	f04f 0200 	mov.w	r2, #0
 80088a4:	f04f 0300 	mov.w	r3, #0
 80088a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80088ac:	4649      	mov	r1, r9
 80088ae:	008b      	lsls	r3, r1, #2
 80088b0:	4641      	mov	r1, r8
 80088b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088b6:	4641      	mov	r1, r8
 80088b8:	008a      	lsls	r2, r1, #2
 80088ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80088be:	f7f8 f8a1 	bl	8000a04 <__aeabi_uldivmod>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4b0d      	ldr	r3, [pc, #52]	; (80088fc <UART_SetConfig+0x4e4>)
 80088c8:	fba3 1302 	umull	r1, r3, r3, r2
 80088cc:	095b      	lsrs	r3, r3, #5
 80088ce:	2164      	movs	r1, #100	; 0x64
 80088d0:	fb01 f303 	mul.w	r3, r1, r3
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	3332      	adds	r3, #50	; 0x32
 80088da:	4a08      	ldr	r2, [pc, #32]	; (80088fc <UART_SetConfig+0x4e4>)
 80088dc:	fba2 2303 	umull	r2, r3, r2, r3
 80088e0:	095b      	lsrs	r3, r3, #5
 80088e2:	f003 020f 	and.w	r2, r3, #15
 80088e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4422      	add	r2, r4
 80088ee:	609a      	str	r2, [r3, #8]
}
 80088f0:	bf00      	nop
 80088f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80088f6:	46bd      	mov	sp, r7
 80088f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088fc:	51eb851f 	.word	0x51eb851f

08008900 <memset>:
 8008900:	4402      	add	r2, r0
 8008902:	4603      	mov	r3, r0
 8008904:	4293      	cmp	r3, r2
 8008906:	d100      	bne.n	800890a <memset+0xa>
 8008908:	4770      	bx	lr
 800890a:	f803 1b01 	strb.w	r1, [r3], #1
 800890e:	e7f9      	b.n	8008904 <memset+0x4>

08008910 <__libc_init_array>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	4d0d      	ldr	r5, [pc, #52]	; (8008948 <__libc_init_array+0x38>)
 8008914:	4c0d      	ldr	r4, [pc, #52]	; (800894c <__libc_init_array+0x3c>)
 8008916:	1b64      	subs	r4, r4, r5
 8008918:	10a4      	asrs	r4, r4, #2
 800891a:	2600      	movs	r6, #0
 800891c:	42a6      	cmp	r6, r4
 800891e:	d109      	bne.n	8008934 <__libc_init_array+0x24>
 8008920:	4d0b      	ldr	r5, [pc, #44]	; (8008950 <__libc_init_array+0x40>)
 8008922:	4c0c      	ldr	r4, [pc, #48]	; (8008954 <__libc_init_array+0x44>)
 8008924:	f000 f818 	bl	8008958 <_init>
 8008928:	1b64      	subs	r4, r4, r5
 800892a:	10a4      	asrs	r4, r4, #2
 800892c:	2600      	movs	r6, #0
 800892e:	42a6      	cmp	r6, r4
 8008930:	d105      	bne.n	800893e <__libc_init_array+0x2e>
 8008932:	bd70      	pop	{r4, r5, r6, pc}
 8008934:	f855 3b04 	ldr.w	r3, [r5], #4
 8008938:	4798      	blx	r3
 800893a:	3601      	adds	r6, #1
 800893c:	e7ee      	b.n	800891c <__libc_init_array+0xc>
 800893e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008942:	4798      	blx	r3
 8008944:	3601      	adds	r6, #1
 8008946:	e7f2      	b.n	800892e <__libc_init_array+0x1e>
 8008948:	08008b98 	.word	0x08008b98
 800894c:	08008b98 	.word	0x08008b98
 8008950:	08008b98 	.word	0x08008b98
 8008954:	08008b9c 	.word	0x08008b9c

08008958 <_init>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr

08008964 <_fini>:
 8008964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008966:	bf00      	nop
 8008968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896a:	bc08      	pop	{r3}
 800896c:	469e      	mov	lr, r3
 800896e:	4770      	bx	lr
